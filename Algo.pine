// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © tamth_

//@version=6
indicator("Algo", overlay=true, precision=2, max_labels_count=500, max_lines_count=500, max_boxes_count=1000, max_bars_back=1000)


//-----------------------------------------------------------------------------
// Constants
//-----------------------------------------------------------------------------
// Colors
color TRANSPARENT_COLOR = color.new(#000000, 100)
color WHITE_COLOR      = #ffffff
color BLACK_COLOR      = #000000
color RED_COLOR        = #ff006e
color ORANGE_COLOR     = #fb5607
color YELLOW_COLOR     = #ffbe0b
color GREEN_COLOR      = #2a9d8f
color AQUA_COLOR       = #00b4d8
color BLUE_COLOR       = #3a86ff
color PURPLE_COLOR     = #8338ec
color PINK_COLOR       = #df3bf1
color LIGHT_GRAY_COLOR = #212d40
color DARK_GRAY_COLOR  = #212d40
color TEXT_COLOR       = #ced4da

//-----------------------------------------------------------------------------
// Common Variables
//-----------------------------------------------------------------------------
// Bar index and input
series int barIdx = bar_index

//-----------------------------------------------------------------------------
// Common Methods
//-----------------------------------------------------------------------------
// Debug label function
debug(simple string txt) =>
    var label lbl = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    label.set_xy(lbl, barIdx, ta.highest(10)[1])
    label.set_text(lbl, txt)

//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// KAMAs
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
KAMAGrp       = "KAMAs"
KAMAShowed    = input.bool(true, "Show", group = KAMAGrp)
KAMASrc       = input.source(close, title = "Source", group = KAMAGrp)

// Current time frame settings
ctfLen        = input.int(21, title = "CTF Length", group = KAMAGrp)
ctfFastEmaLen = input.int(2, title = "CTF Fast EMA Length", group = KAMAGrp)
ctfSlowEmaLen = input.int(30, title = "CTF Slow EMA Length", group = KAMAGrp)

// Higher timeframe settings
htf           = input.timeframe("W", title = "HTF", group = KAMAGrp)
htfLen        = input.int(21, title = "HTF Length", group = KAMAGrp)
htfFastEmaLen = input.int(2, title = "HTF Fast EMA Length", group = KAMAGrp)
htfSlowEmaLen = input.int(30, title = "HTF Slow EMA Length", group = KAMAGrp)

//-----------------------------------------------------------------------------
// Methods
//-----------------------------------------------------------------------------
getKAMA(src, len, fastEmaLen, slowEmaLen) =>
    mom = math.abs(ta.change(src, len))
    volatility = math.sum(math.abs(ta.change(src)), len)
    efficiencyRatio = volatility != 0 ? mom / volatility : 0
    fastAlpha = 2 / (fastEmaLen + 1)
    slowAlpha = 2 / (slowEmaLen + 1)
    alpha = math.pow(efficiencyRatio * (fastAlpha - slowAlpha) + slowAlpha, 2)
    kama = 0.0
    kama := alpha * src + (1 - alpha) * nz(kama[1], src)

//-----------------------------------------------------------------------------
// Calculate
//-----------------------------------------------------------------------------
ctfKAMA = getKAMA(KAMASrc, ctfLen, ctfFastEmaLen, ctfSlowEmaLen)
htfKAMA = request.security(syminfo.tickerid, htf, getKAMA(KAMASrc, htfLen, htfFastEmaLen, htfSlowEmaLen))

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
plot(KAMAShowed ? ctfKAMA : na, title = "CTF KAMA", linewidth = 1, color = BLUE_COLOR, display = display.pane)
plot(KAMAShowed ? htfKAMA : na, title = "HTF KAMA", linewidth = 1, color = ORANGE_COLOR, display = display.pane)

//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// Keltner Channels
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
kcGrp    = "Keltner Channels"
kcShowed = input.bool(true, "Show", group = kcGrp)
kcTf     = input.timeframe("", title = "Timeframe", group = kcGrp)
kcLen    = input.int(20, "Length", minval = 1, group = kcGrp)
kcMult   = input.float(2.0, "Multiplier", group = kcGrp)
kcSrc    = input.source(close, "Source", group = kcGrp)
kcAtrLen = input.int(10, "ATR Length", group = kcGrp)

//-----------------------------------------------------------------------------
// Methods
//-----------------------------------------------------------------------------
getEma(src, len) => ta.ema(src, len)

//-----------------------------------------------------------------------------
// Calculate
//-----------------------------------------------------------------------------
kcEma = request.security(syminfo.tickerid, kcTf, getEma(kcSrc, kcLen))
kcRange = request.security(syminfo.tickerid, kcTf, ta.atr(kcAtrLen))
kcUpper = kcEma + kcRange * kcMult
kcLower = kcEma - kcRange * kcMult

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
plot(kcShowed ? kcEma : na, color = GREEN_COLOR, title = "Basis", display = display.pane)
plot(kcShowed ? kcUpper : na, color = GREEN_COLOR, title = "Upper", display = display.pane)
plot(kcShowed ? kcLower : na, color = GREEN_COLOR, title = "Lower", display = display.pane)

//-----------------------------------------------------------------------------