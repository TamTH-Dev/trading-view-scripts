// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © tamth_

//@version=6
indicator("Algo", overlay=true, precision=2, max_labels_count=500, max_lines_count=500, max_boxes_count=1000, max_bars_back=1000)


//-----------------------------------------------------------------------------
// Constants
//-----------------------------------------------------------------------------
// Colors
color TRANSPARENT_COLOR = color.new(#000000, 100)
color WHITE_COLOR      = #ffffff
color BLACK_COLOR      = #000000
color RED_COLOR        = #F72585
color ORANGE_COLOR     = #fb5607
color YELLOW_COLOR     = #ffbe0b
color GREEN_COLOR      = #2a9d8f
color AQUA_COLOR       = #4CC9F0
color BLUE_COLOR       = #4895EF
color PURPLE_COLOR     = #3F37C9
color PINK_COLOR       = #B5179E
color LIGHT_GRAY_COLOR = #364156
color DARK_GRAY_COLOR  = #212d40
color TEXT_COLOR       = #ced4da

//-----------------------------------------------------------------------------
// Common Variables
//-----------------------------------------------------------------------------
// Bar index and input
series int barIdx = bar_index

//-----------------------------------------------------------------------------
// Common Methods
//-----------------------------------------------------------------------------
// Debug label function
debug(simple string txt) =>
    var label lbl = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    label.set_xy(lbl, barIdx, ta.highest(10)[1])
    label.set_text(lbl, txt)

//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// KAMAs
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
kamaGrp       = "Kaufman Adaptive Moving Average"
kamaShowed    = input.bool(true, "Show", group = kamaGrp)
kamaHtf       = input.timeframe("", title = "Higher Timeframe Line", group = kamaGrp, tooltip = "Use the default setting if this value is empty; otherwise, use this setting")
kamaSrc       = input.source(close, title = "Source", group = kamaGrp)

// Current timeframe settings
ctfLen        = input.int(21, title = "CTF Length", group = kamaGrp)
ctfFastEmaLen = input.int(2, title = "CTF Fast EMA Length", group = kamaGrp)
ctfSlowEmaLen = input.int(30, title = "CTF Slow EMA Length", group = kamaGrp)

// Higher timeframe settings
htfLen        = input.int(21, title = "HTF Length", group = kamaGrp)
htfFastEmaLen = input.int(2, title = "HTF Fast EMA Length", group = kamaGrp)
htfSlowEmaLen = input.int(30, title = "HTF Slow EMA Length", group = kamaGrp)

//-----------------------------------------------------------------------------
// Methods
//-----------------------------------------------------------------------------
getKama(src, len, fastEmaLen, slowEmaLen) =>
    mom = math.abs(ta.change(src, len))
    volatility = math.sum(math.abs(ta.change(src)), len)
    efficiencyRatio = volatility != 0 ? mom / volatility : 0
    fastAlpha = 2 / (fastEmaLen + 1)
    slowAlpha = 2 / (slowEmaLen + 1)
    alpha = math.pow(efficiencyRatio * (fastAlpha - slowAlpha) + slowAlpha, 2)
    kama = 0.0
    kama := alpha * src + (1 - alpha) * nz(kama[1], src)

getDefHtf() =>
    switch timeframe.period
		"5"   => "60"
		"15"  => "240"
		"60"  => "D"
		"240" => "W"
        "1D"  => "M"
        "1M"  => "12M"

//-----------------------------------------------------------------------------
// Calculate
//-----------------------------------------------------------------------------
ctfKama = getKama(kamaSrc, ctfLen, ctfFastEmaLen, ctfSlowEmaLen)
htfKama = request.security(syminfo.tickerid, kamaHtf != "" ? kamaHtf : getDefHtf(), getKama(kamaSrc, htfLen, htfFastEmaLen, htfSlowEmaLen), gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_off)

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
plot(kamaShowed ? ctfKama : na, title = "CTF KAMA", linewidth = 1, color = AQUA_COLOR, display = display.pane)
plot(kamaShowed ? htfKama : na, title = "HTF KAMA", linewidth = 1, color = PURPLE_COLOR, display = display.pane)

//-----------------------------------------------------------------------------