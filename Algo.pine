// Â© tamth_
// @version=6
indicator(title = "Algo", shorttitle = "Algo", overlay = true, max_labels_count = 500, max_lines_count = 500, max_boxes_count = 1000, max_bars_back = 1000)


//-----------------------------------------------------------------------------*
//  Constants
//-----------------------------------------------------------------------------{
color TRANSPARENT_COLOR = color.new(#000000, 100)
color WHITE_COLOR = #ffffff
color ORANGE_COLOR = #f2aa0a
color RED_COLOR = #e91e62
color AQUA_COLOR = #1EBEE8
color BLUE_COLOR = #1E53E8
color PURPLE_COLOR = #764AF1
color LIGHT_GRAY_COLOR = #364156
color DARK_GRAY_COLOR = #212d40
color TEXT_COLOR = #ced4da

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Variables
//-----------------------------------------------------------------------------{
series int barIdx = bar_index

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Methods
//-----------------------------------------------------------------------------{
debug(simple string txt) =>
    // Create label on the first bar
    var label = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    // On next bars, update the label"s x and y position, and the text it displays
    label.set_xy(label, barIdx, ta.highest(10)[1])
    label.set_text(label, txt)

getPrdWidthByPerc(int prd, float perc) => (ta.highest(prd) - ta.lowest(prd)) * perc / 100

//-----------------------------------------------------------------------------}





//-----------------------------------------------------------------------------*
// EMAs
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
emaGrp = "EMAs"
emaShowed = input.bool(true, title = "Show", group = emaGrp)
emaSrc = input.source(close, title = "Source", group = emaGrp)
ema1Len = input.int(8, title = "EMA 1 Length", group = emaGrp, inline = "EMA1")
ema1Color = input.color(AQUA_COLOR, "", group = emaGrp, inline = "EMA1")
ema1Showed = input.bool(true, title = "Show", group = emaGrp, inline = "EMA1")
ema2Len = input.int(21, title = "EMA 2 Length", group = emaGrp, inline = "EMA2")
ema2Color = input.color(BLUE_COLOR, "", group = emaGrp, inline = "EMA2")
ema2Showed = input.bool(true, title = "Show", group = emaGrp, inline = "EMA2")
ema3Len = input.int(34, title = "EMA 3 Length", group = emaGrp, inline = "EMA3")
ema3Color = input.color(RED_COLOR, "", group = emaGrp, inline = "EMA3")
ema3Showed = input.bool(true, title = "Show", group = emaGrp, inline = "EMA3")
ema4Len = input.int(50, title = "EMA 4 Length", group = emaGrp, inline = "EMA4")
ema4Color = input.color(ORANGE_COLOR, "", group = emaGrp, inline = "EMA4")
ema4Showed = input.bool(true, title = "Show", group = emaGrp, inline = "EMA4")
ema5Len = input.int(200, title = "EMA 5 Length", group = emaGrp, inline = "EMA5")
ema5Color = input.color(PURPLE_COLOR, "", group = emaGrp, inline = "EMA5")
ema5Showed = input.bool(true, title = "Show", group = emaGrp, inline = "EMA5")

EMA_COLOR_TRANS = 40

//-----------------------------------------------------------------------------}

//-----------------------------------------------------------------------------*
// Values
//-----------------------------------------------------------------------------{
ema1 = ta.ema(emaSrc, ema1Len)
ema2 = ta.ema(emaSrc, ema2Len)
ema3 = ta.ema(emaSrc, ema3Len)
ema4 = ta.ema(emaSrc, ema4Len)
ema5 = ta.ema(emaSrc, ema5Len)

//-----------------------------------------------------------------------------*
// Render
//-----------------------------------------------------------------------------{
plot(emaShowed and ema1Showed ? ema1 : na, color = color.new(ema1Color, EMA_COLOR_TRANS), linewidth = 1, display = display.pane)
plot(emaShowed and ema2Showed ? ema2 : na, color = color.new(ema2Color, EMA_COLOR_TRANS), linewidth = 1, display = display.pane)
plot(emaShowed and ema3Showed ? ema3 : na, color = color.new(ema3Color, EMA_COLOR_TRANS), linewidth = 1, display = display.pane)
plot(emaShowed and ema4Showed ? ema4 : na, color = color.new(ema4Color, EMA_COLOR_TRANS), linewidth = 1, display = display.pane)
plot(emaShowed and ema5Showed ? ema5 : na, color = color.new(ema5Color, EMA_COLOR_TRANS), linewidth = 1, display = display.pane)

//-----------------------------------------------------------------------------}





//-----------------------------------------------------------------------------*
// Volume Profile
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string vpGrp = "Volume Profile"
bool vpShowed = input.bool(false, "Show", group = vpGrp)
int vpLen = input.int(200, "Lookback", minval = 1, maxval = 500, tooltip = "Number of most recent bars", group = vpGrp)
int vpLevelsSize = input.int(360, "Size Of Levels", minval = 1, maxval = 400, group = vpGrp)
int vpWidth = input.int(16, "Profile's Width", minval = 1, maxval = 100, tooltip = "The length of the bars relative to the Lookback value", group = vpGrp)
int vpBarWidth = input.int(2, "Bar's Width", tooltip = "Width of each bar", group = vpGrp)
int vpOffset = input.int(20, "Offset From Last Bar", group = vpGrp)
color vpColor = input.color(DARK_GRAY_COLOR, "Color", group = vpGrp)

//-----------------------------------------------------------------------------}
// Render Volume Profile
//-----------------------------------------------------------------------------{
var vpLines = array.new_line()

if barstate.isfirst
    for i = 0 to vpLevelsSize - 1
        array.push(vpLines, line.new(na, na, na, na, width = 2))

series float vpHighest = ta.highest(vpLen)
series float vpLowest = ta.lowest(vpLen)
array<float> vpLevels = array.new_float(0)
array<int> vpVols = array.new_int(0)
array<float> vpSumv = array.new_float(0)
line vpLine = na

if barstate.islast and vpShowed
    for i = 0 to vpLevelsSize
        array.push(vpLevels, vpLowest + i / vpLevelsSize * (vpHighest - vpLowest))

    for i = 0 to vpLevelsSize - 1
        series float sum = 0.
        for j = 0 to vpLen - 1
            sum := high[j] > array.get(vpLevels, i) and low[j] < array.get(vpLevels, i + 1) ? sum + volume[j] : sum
        array.push(vpSumv, sum)

    for i = 0 to vpLevelsSize - 1
        series float mult = array.get(vpSumv, i) / array.max(vpSumv)
        series int vol = math.round(vpLen * vpWidth / 100 * mult)
        array.push(vpVols, vol)
    
    series int maxVol = array.max(vpVols)
    int shift = barIdx + maxVol + vpOffset
    for i = 0 to vpLevelsSize - 1
        series int vol = array.get(vpVols, i)
        series float level = array.get(vpLevels, i)
        vpLine := array.get(vpLines, i)
        line.set_xy1(vpLine, shift, level)
        line.set_xy2(vpLine, shift - vol, level)
        line.set_color(vpLine, vpColor)
        line.set_width(vpLine, vpBarWidth)

//-----------------------------------------------------------------------------}





//-----------------------------------------------------------------------------*
// S/R
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
srGrp = "S/R"
srShowed = input.bool(false, title = "Show", group = srGrp)
srPrd = input.int(284, title = "Period", group = srGrp)
srSupportColor = input.color(#212d4080, title = "Support Color", group = srGrp)
srResistanceColor = input.color(#212d4080, title = "Resistance Color", group = srGrp)
srStrength = input.int(2, title = "Strength", minval = 1, group = srGrp)
srZoneWidthPerc = input.float(1.5, title = "Zone Width In %", minval = 0, group = srGrp)
srValColor = input.color(TEXT_COLOR, title = "Value Color", group = srGrp)

//-----------------------------------------------------------------------------}

//-----------------------------------------------------------------------------*
// Methods
//-----------------------------------------------------------------------------{
getSrValTxt(float val) =>
    str.tostring(val, "#.#####")

buildSrValBox(float top, float bot, float val, float padding) =>
    int txtOffset = barIdx + 24
    box.new(txtOffset, top - padding / 5, txtOffset + 150, bot + padding / 5, bgcolor = TRANSPARENT_COLOR, border_width = 0, text = getSrValTxt(val), text_color = srValColor, text_size = size.small, text_valign = text.align_center, text_halign = text.align_left, extend = extend.right)

//-----------------------------------------------------------------------------}

//-----------------------------------------------------------------------------*
// Render
//-----------------------------------------------------------------------------{
int srSize = 21
int srRb = 10
float srPh = ta.pivothigh(srRb, srRb)
float srPl = ta.pivotlow(srRb, srRb)
var srLevels = array.new_float(srSize, na)
float srHighestVal = ta.highest(srPrd)
float srLowestVal = ta.lowest(srPrd)
float srChannelWidth = getPrdWidthByPerc(srPrd, 10)
float srZoneWidth = getPrdWidthByPerc(300, srZoneWidthPerc)
bool[] srAas = array.new_bool(41, true)
float srHighestPh = 0.0, srHighestPh := srHighestPh[1]
float srLowestPl = 0.0, srLowestPl := srLowestPl[1]
var srLevelsClone = array.new_float(srSize, na)
var srAreaBoxes = array.new_box(srSize, na)
var srValBoxes = array.new_box(srSize, na)

if (not na(srPh) or not na(srPl)) and srShowed
    for i = 0 to array.size(srLevels) - 1
        array.set(srLevels, i, na)

    srHighestPh := srLowestVal
    srLowestPl := srHighestVal
    int ppCount = 0

    for i = 0 to srPrd
        if na(close[i])
            break

        if not na(srPh[i]) or not na(srPl[i])
            srHighestPh := math.max(srHighestPh, nz(srPh[i], srLowestVal), nz(srPl[i], srLowestVal))
            srLowestPl := math.min(srLowestPl, nz(srPh[i], srHighestVal), nz(srPl[i], srHighestVal))
            ppCount += 1

            if ppCount > 40
                break

            if array.get(srAas, ppCount)
                upl = (not na(srPh[i]) ? high[i + srRb] : low[i + srRb]) + srChannelWidth
                dnl = (not na(srPh[i]) ? high[i + srRb] : low[i + srRb]) - srChannelWidth
                tmp = array.new_bool(41, true)
                count = 0
                points = 0

                for j = 0 to srPrd
                    if na(close[j])
                        break

                    if not na(srPh[j]) or not na(srPl[j])
                        chg = false
                        count += 1

                        if count > 40
                            break

                        if array.get(srAas, count)
                            if not na(srPh[j])
                                if high[j + srRb] <= upl and high[j + srRb] >= dnl
                                    points += 1
                                    chg := true

                            if not na(srPl[j])
                                if low[j + srRb] <= upl and low[j + srRb] >= dnl
                                    points += 1
                                    chg := true

                        if chg and count < 41
                            array.set(tmp, count, false)

                if points >= srStrength
                    for g = 0 to 40 by 1
                        if not array.get(tmp, g)
                            array.set(srAas, g, false)

                    if not na(srPh[i]) and ppCount < srSize
                        array.set(srLevels, ppCount, high[i + srRb])

                    if not na(srPl[i]) and ppCount < srSize
                        array.set(srLevels, ppCount, low[i + srRb])

if srShowed
    var box srHighestAreaBox = na, box.delete(srHighestAreaBox)
    var box srLowestAreaBox = na, box.delete(srLowestAreaBox)
    var box srHighestValBox = na, box.delete(srHighestValBox)
    var box srLowestValBox = na, box.delete(srLowestValBox)
    color srHighestColor = close >= srHighestPh ? srSupportColor : srResistanceColor
    color srLowestColor = close >= srLowestPl ? srSupportColor : srResistanceColor
    float srHighestTop = srHighestPh + srZoneWidth
    float srHighestBot = srHighestPh - srZoneWidth
    float srLowestTop = srLowestPl + srZoneWidth
    float srLowestBot = srLowestPl - srZoneWidth
    srHighestAreaBox := box.new(barIdx, srHighestTop, barIdx, srHighestBot, extend = extend.both, bgcolor = srHighestColor, border_width = 0)
    srLowestAreaBox := box.new(barIdx, srLowestTop, barIdx, srLowestBot, extend = extend.both, bgcolor = srLowestColor, border_width = 0)
    srHighestValBox := buildSrValBox(srHighestTop, srHighestBot, srHighestPh, srZoneWidth)
    srLowestValBox := buildSrValBox(srLowestTop, srLowestBot, srLowestPl, srZoneWidth)

    if not na(srPh) or not na(srPl)
        for i = 0 to array.size(srAreaBoxes) - 1
            array.set(srLevelsClone, i, array.get(srLevels, i))

    for i = 0 to array.size(srAreaBoxes) - 1
        box.delete(array.get(srAreaBoxes, i))
        box.delete(array.get(srValBoxes, i))

        if not na(array.get(srLevelsClone, i))
            color lineColor = close >= array.get(srLevelsClone, i) ? srSupportColor : srResistanceColor
            float level = array.get(srLevelsClone, i)
            float top = level + srZoneWidth
            float bot = level - srZoneWidth
            bool topExisted = math.abs(level - srHighestPh) < srZoneWidth
            bool botExisted = math.abs(level - srLowestPl) < srZoneWidth

            if (not topExisted and not botExisted)
                array.set(srAreaBoxes, i, box.new(barIdx, top, barIdx, bot, extend = extend.both, bgcolor = lineColor, border_width = 0))
                array.set(srValBoxes, i, buildSrValBox(top, bot, level, srZoneWidth))

//-----------------------------------------------------------------------------}