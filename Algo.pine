// Â© tamth_
// @version=5
indicator("Algo", shorttitle = "Algo", overlay = true, max_bars_back = 5000, max_lines_count = 500, max_boxes_count = 500, max_labels_count = 500)


//-----------------------------------------------------------------------------*
//  Constants
//-----------------------------------------------------------------------------{
color TRANSPARENT_COLOR = color.new(#000000, 100)
color WHITE_COLOR = #EFEFEF
color RED_COLOR = #E81E61
color AQUA_COLOR = #04ADBF
color YELLOW_COLOR = #E8D81E
color PURPLE_COLOR = #764AF1
color ORANGE_COLOR = #E8AF1E
color GREEN_COLOR = #1EE8A3
color BLUE_COLOR = #1E53E8
color PINK_COLOR = #C31EE8
color LIGHT_GRAY_COLOR = #364156
color DARK_GRAY_COLOR = #212d40


//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Variables
//-----------------------------------------------------------------------------{
series int barIdx = bar_index
series bool confirmed = barstate.isconfirmed

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Methods
//-----------------------------------------------------------------------------{
debug(simple string txt) =>
    // Create label on the first bar
    var label = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    // On next bars, update the label"s x and y position, and the text it displays
    label.set_xy(label, barIdx, ta.highest(10)[1])
    label.set_text(label, txt)

getPrdWidthByPerc(int prd, float perc) => (ta.highest(prd) - ta.lowest(prd)) * perc / 100

getTfTxt() =>
    string prd = timeframe.period
    string tf = na

    if str.contains(prd, "S")
        tf := str.length(prd) == 1 ? "1S" : prd
    else if str.contains(prd, "D")
        tf := str.length(prd) == 1 ? "1D" : prd
    else if str.contains(prd, "W")
        tf := str.length(prd) == 1 ? "1W" : prd
    else if str.contains(prd, "M")
        tf := str.length(prd) == 1 ? "1M" : prd
    else
        float mins = str.tonumber(prd)

        if mins >= 60
            tf := str.format("{0}H",  mins / 60)
        else
            tf := str.format("{0}M",  mins)

    tf

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// S/R
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string srGrp = "S/R"
bool srShowed = input.bool(true, title = "Show", group = srGrp)
int srPrd = input.int(284, title = "Period", group = srGrp)
color srSupportColor = input.color(color.new(AQUA_COLOR, 80), title = "Support Color", group = srGrp)
color srResistanceColor = input.color(color.new(LIGHT_GRAY_COLOR, 80), title = "Resistance Color", group = srGrp)
int srStrength = input.int(2, title = "Strength", minval = 1, group = srGrp)
float srZoneWidthPerc = input.float(1.5, title = "Zone Width In %", minval = 0, group = srGrp)
color srValColor = input.color(color.new(WHITE_COLOR, 20), title = "Value Color", group = srGrp)

//-----------------------------------------------------------------------------}
// Methods
//-----------------------------------------------------------------------------{
getSrValTxt(float val) =>
    string tf = getTfTxt()
    str.format("{0} | {1}", tf, val)

buildSrValBox(float top, float bot, float val, float padding) =>
    int txtOffset = barIdx + 24
    box.new(txtOffset, top - padding / 5, txtOffset + 150, bot + padding / 5, bgcolor = TRANSPARENT_COLOR, border_width = 0, text = getSrValTxt(val), text_color = srValColor, text_size = size.small, text_valign = text.align_center, text_halign = text.align_left, extend = extend.right)

//-----------------------------------------------------------------------------}
// Get Values
//-----------------------------------------------------------------------------{
int srSize = 21
int srRb = 10
float srPh = ta.pivothigh(srRb, srRb)
float srPl = ta.pivotlow(srRb, srRb)
var srLevels = array.new_float(srSize, na)
float srHighestVal = ta.highest(srPrd)
float srLowestVal = ta.lowest(srPrd)
float srChannelWidth = getPrdWidthByPerc(srPrd, 10)
float srZoneWidth = getPrdWidthByPerc(300, srZoneWidthPerc)
bool[] srAas = array.new_bool(41, true)
float srHighestPh = 0.0, srHighestPh := srHighestPh[1]
float srLowestPl = 0.0, srLowestPl := srLowestPl[1]
var srLevelsClone = array.new_float(srSize, na)
var srAreaBoxes = array.new_box(srSize, na)
var srValBoxes = array.new_box(srSize, na)

if (not na(srPh) or not na(srPl)) and confirmed and srShowed
    for i = 0 to array.size(srLevels) - 1
        array.set(srLevels, i, na)

    srHighestPh := srLowestVal
    srLowestPl := srHighestVal
    int ppCount = 0

    for i = 0 to srPrd
        if na(close[i])
            break

        if not na(srPh[i]) or not na(srPl[i])
            srHighestPh := math.max(srHighestPh, nz(srPh[i], srLowestVal), nz(srPl[i], srLowestVal))
            srLowestPl := math.min(srLowestPl, nz(srPh[i], srHighestVal), nz(srPl[i], srHighestVal))
            ppCount += 1

            if ppCount > 40
                break

            if array.get(srAas, ppCount)
                upl = (not na(srPh[i]) ? high[i + srRb] : low[i + srRb]) + srChannelWidth
                dnl = (not na(srPh[i]) ? high[i + srRb] : low[i + srRb]) - srChannelWidth
                tmp = array.new_bool(41, true)
                count = 0
                points = 0

                for j = 0 to srPrd
                    if na(close[j])
                        break

                    if not na(srPh[j]) or not na(srPl[j])
                        chg = false
                        count += 1

                        if count > 40
                            break

                        if array.get(srAas, count)
                            if not na(srPh[j])
                                if high[j + srRb] <= upl and high[j + srRb] >= dnl
                                    points += 1
                                    chg := true

                            if not na(srPl[j])
                                if low[j + srRb] <= upl and low[j + srRb] >= dnl
                                    points += 1
                                    chg := true

                        if chg and count < 41
                            array.set(tmp, count, false)

                if points >= srStrength
                    for g = 0 to 40 by 1
                        if not array.get(tmp, g)
                            array.set(srAas, g, false)

                    if not na(srPh[i]) and ppCount < srSize
                        array.set(srLevels, ppCount, high[i + srRb])

                    if not na(srPl[i]) and ppCount < srSize
                        array.set(srLevels, ppCount, low[i + srRb])

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Range Filter
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string rfGrp = "Range Filter"
bool rfShowed = input.bool(false, title = "Show Range Filter", group = rfGrp)
float rngQty = input.float(2.618, title = "Range Size", minval = 0.0000001, group = rfGrp)
string rngScale = input.string("Average Change", title = "Range Scale", options = ["Points", "Pips", "Ticks", "% of Price", "ATR", "Average Change", "Standard Deviation", "Absolute"], group = rfGrp)
int rngPer = input.int(14, title = "Range Period (for ATR, Average Change, and Standard Deviation)", minval = 1, group = rfGrp)
bool rngSmoothRange = input.bool(true, title = "Smooth Range", group = rfGrp)
int rngSmoothPrd = input.int(27, title = "Smoothing Period", minval = 1, group = rfGrp)

//-----------------------------------------------------------------------------}
// Functions
//-----------------------------------------------------------------------------{
getCondEma(x, cond, n)=>
    var val = array.new_float(0)
    var emaVal = array.new_float(1)
    if cond
        array.push(val, x)
        if array.size(val) > 1
            array.remove(val, 0)
        if na(array.get(emaVal, 0))
            array.fill(emaVal, array.get(val, 0))
        array.set(emaVal, 0, (array.get(val, 0) - array.get(emaVal, 0)) * (2 / (n + 1)) + array.get(emaVal, 0))
    series float ema = array.get(emaVal, 0)
    ema

getCondSma(x, cond, n)=>
    var vals = array.new_float(0)
    if cond
        array.push(vals, x)
        if array.size(vals) > n
            array.remove(vals, 0)
    series float sma = array.avg(vals)
    sma

getStdev(x, n)=>
    math.sqrt(getCondSma(math.pow(x, 2), 1, n) - math.pow(getCondSma(x, 1, n), 2))

getRngSize(x, scale, qty, n)=> 
    series float atr = getCondEma(ta.tr(true), 1, n)
    series float ac = getCondEma(math.abs(x - x[1]), 1, n)
    series float sd = getStdev(x, n)
    rngSize = scale == "Pips" ? qty * 0.0001 : scale == "Points" ? qty * syminfo.pointvalue : scale == "% of Price" ? close * qty / 100 : scale == "ATR" ? qty * atr :
               scale == "Average Change" ? qty * ac : scale == "Standard Deviation" ? qty * sd : scale == "Ticks" ? qty * syminfo.mintick : qty   

getRngFilt(h, l, _rng, n, smooth, sn)=>
    series float rngSmooth = getCondEma(_rng, 1, sn)
    series float r = smooth ? rngSmooth : _rng
    var rfilt = array.new_float(2, (h + l) / 2)
    array.set(rfilt, 1, array.get(rfilt, 0))
    if h - r > array.get(rfilt, 1)
        array.set(rfilt, 0, h - r)
    if l + r < array.get(rfilt, 1)
        array.set(rfilt, 0, l + r)
    series float rngFilt = array.get(rfilt, 0)
    series float hiBand = rngFilt + r
    series float loBand = rngFilt - r
    [hiBand, loBand, rngFilt]

//-----------------------------------------------------------------------------}
// Get Values
//-----------------------------------------------------------------------------{
series float haOpen = request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, open)
series float haClose = request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, close)
series float hiVal = close
series float loVal = close
[hiBand, loBand, filt] = request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, getRngFilt(hiVal, loVal, getRngSize((hiVal + loVal) / 2, rngScale, rngQty, rngPer), rngPer, rngSmoothRange, rngSmoothPrd))

var fdir = 0.0
fdir := filt > filt[1] ? 1 : filt < filt[1] ? -1 : fdir
bool isUpward = fdir == 1
bool isDnward = fdir == -1

color filtColor = isUpward ? AQUA_COLOR : isDnward ? WHITE_COLOR : LIGHT_GRAY_COLOR

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// VWAP
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string vwapGrp = "VWAP"
bool vwapShowed = input.bool(true, title = "Show", group = vwapGrp)
string vwapAnchor = input.string("Week", title = "Anchor Period", options = ["Session", "Week", "Month", "Quarter", "Year", "Decade", "Century", "Earnings", "Dividends", "Splits"], group="VWAP Settings")
float vwapSrc = input(hlc3, title = "Source", group = vwapGrp)
bool vwapBandsShowed = input.bool(false, title = "Reversal Bands", group = vwapGrp)

//-----------------------------------------------------------------------------}
// Get Values
//-----------------------------------------------------------------------------{
series float vwapNewEarnings = request.earnings(syminfo.tickerid, earnings.actual, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol = true)
series float vwapNewDividends = request.dividends(syminfo.tickerid, dividends.gross, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol = true)
series float vwapNewSplit = request.splits(syminfo.tickerid, splits.denominator, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol = true)
series bool vwapPrd = switch vwapAnchor
	"Earnings"  => not na(vwapNewEarnings)
	"Dividends" => not na(vwapNewDividends)
	"Splits"    => not na(vwapNewSplit)
	"Session"   => timeframe.change("D")
	"Week"      => timeframe.change("W")
	"Month"     => timeframe.change("M")
	"Quarter"   => timeframe.change("3M")
	"Year"      => timeframe.change("12M")
	"Decade"    => timeframe.change("12M") and year % 10 == 0
	"Century"   => timeframe.change("12M") and year % 100 == 0
	=> false

bool vwapIsEsdAnchor = vwapAnchor == "Earnings" or vwapAnchor == "Dividends" or vwapAnchor == "Splits"
if na(vwapSrc[1]) and not vwapIsEsdAnchor
	vwapPrd := true

[vwap, vwapStDev, _] = ta.vwap(vwapSrc, vwapPrd, 1)
series float vwapBasis = vwapStDev - vwap
float vwapUpperBand1 = vwap + vwapBasis * 1.0
float vwapLowerBand1 = vwap - vwapBasis * 1.0
float vwapUpperBand2 = vwap + vwapBasis * 2.0
float vwapLowerBand2 = vwap - vwapBasis * 2.0

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Trend Ribbon
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string trGrp = "EMAs"
bool trShowed = input.bool(true, title = "Show", group = trGrp)
int leadingTrLen = input.int(8, title = "Leading Length", group = trGrp)
int laggingTrLen = input.int(21, title = "Lagging Length", group = trGrp)

//-----------------------------------------------------------------------------}
// Get Values
//-----------------------------------------------------------------------------{
series float leadingTr = ta.ema(close, leadingTrLen)
series float laggingTr = ta.ema(close, laggingTrLen)

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Plots
//-----------------------------------------------------------------------------{
// S/R
if srShowed
    var box srHighestAreaBox = na, box.delete(srHighestAreaBox)
    var box srLowestAreaBox = na, box.delete(srLowestAreaBox)
    var box srHighestValBox = na, box.delete(srHighestValBox)
    var box srLowestValBox = na, box.delete(srLowestValBox)
    color srHighestColor = close >= srHighestPh ? srSupportColor : srResistanceColor
    color srLowestColor = close >= srLowestPl ? srSupportColor : srResistanceColor
    float srHighestTop = srHighestPh + srZoneWidth
    float srHighestBot = srHighestPh - srZoneWidth
    float srLowestTop = srLowestPl + srZoneWidth
    float srLowestBot = srLowestPl - srZoneWidth
    srHighestAreaBox := box.new(barIdx, srHighestTop, barIdx, srHighestBot, extend = extend.both, bgcolor = srHighestColor, border_width = 1, border_color = srHighestColor)
    srLowestAreaBox := box.new(barIdx, srLowestTop, barIdx, srLowestBot, extend = extend.both, bgcolor = srLowestColor, border_width = 1, border_color = srLowestColor)
    srHighestValBox := buildSrValBox(srHighestTop, srHighestBot, srHighestPh, srZoneWidth)
    srLowestValBox := buildSrValBox(srLowestTop, srLowestBot, srLowestPl, srZoneWidth)

    if not na(srPh) or not na(srPl)
        for i = 0 to array.size(srAreaBoxes) - 1
            array.set(srLevelsClone, i, array.get(srLevels, i))

    for i = 0 to array.size(srAreaBoxes) - 1
        box.delete(array.get(srAreaBoxes, i))
        box.delete(array.get(srValBoxes, i))

        if not na(array.get(srLevelsClone, i))
            color lineColor = close >= array.get(srLevelsClone, i) ? srSupportColor : srResistanceColor
            float level = array.get(srLevelsClone, i)
            float top = level + srZoneWidth
            float bot = level - srZoneWidth
            bool topExisted = math.abs(level - srHighestPh) < srZoneWidth
            bool botExisted = math.abs(level - srLowestPl) < srZoneWidth

            if (not topExisted and not botExisted)
                array.set(srAreaBoxes, i, box.new(barIdx, top, barIdx, bot, extend = extend.both, bgcolor = lineColor, border_width = 1, border_color = lineColor))
                array.set(srValBoxes, i, buildSrValBox(top, bot, level, srZoneWidth))

// VWAP
plot(vwapShowed ? vwap : na, title = 'VWAP', color = LIGHT_GRAY_COLOR, linewidth = 3, display = display.pane)
plot(vwapUpperBand1, title = "Upper Reversal Band #1", color = LIGHT_GRAY_COLOR, display = vwapBandsShowed ? display.pane : display.none)
plot(vwapLowerBand1, title = "Lower Reversal Band #1", color = LIGHT_GRAY_COLOR, display = vwapBandsShowed ? display.pane : display.none)
plot(vwapUpperBand2, title = "Upper Reversal Band #2", color = LIGHT_GRAY_COLOR, display = vwapBandsShowed ? display.pane : display.none)
plot(vwapLowerBand2, title = "Lower Reversal Band #2", color = LIGHT_GRAY_COLOR, display = vwapBandsShowed ? display.pane : display.none)

// EMAs
var laggingTrPlot = plot(trShowed ? laggingTr : na, title = "Lagging EMA", color = TRANSPARENT_COLOR, linewidth = 0, display = display.pane)
var leadingTrPlot = plot(trShowed ? leadingTr : na, title = "Leading EMA", color = TRANSPARENT_COLOR, linewidth = 0, display = display.pane)
fill(leadingTrPlot, laggingTrPlot, title = "Trend Ribbon", color = color.new(leadingTr > laggingTr ? AQUA_COLOR : laggingTr > leadingTr ? RED_COLOR : TRANSPARENT_COLOR, 70), display = trShowed ? display.all : display.none)

// Range Filter
plot(rfShowed ? filt : na, title = "Range Filter", color = filtColor, linewidth = 2, display = display.pane)

//-----------------------------------------------------------------------------}