// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © tamth_

//@version=6
indicator("Algo", overlay=true, precision=2, max_labels_count=500, max_lines_count=500, max_boxes_count=1000, max_bars_back=1000)


//-----------------------------------------------------------------------------
// Constants
//-----------------------------------------------------------------------------
// Colors
color TRANSPARENT_COLOR = color.new(#000000, 100)
color WHITE_COLOR      = #ffffff
color BLACK_COLOR      = #000000
color RED_COLOR        = #ff006e
color ORANGE_COLOR     = #fb5607
color YELLOW_COLOR     = #ffbe0b
color GREEN_COLOR      = #2a9d8f
color AQUA_COLOR       = #00b4d8
color BLUE_COLOR       = #3a86ff
color PURPLE_COLOR     = #8338ec
color PINK_COLOR       = #df3bf1
color LIGHT_GRAY_COLOR = #364156
color DARK_GRAY_COLOR  = #212d40
color TEXT_COLOR       = #ced4da

//-----------------------------------------------------------------------------
// Common Variables
//-----------------------------------------------------------------------------
// Bar index and input
series int barIdx = bar_index

//-----------------------------------------------------------------------------
// Common Methods
//-----------------------------------------------------------------------------
// Debug label function
debug(simple string txt) =>
    var label lbl = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    label.set_xy(lbl, barIdx, ta.highest(10)[1])
    label.set_text(lbl, txt)

//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// KAMAs
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
KAMAGrp       = "KAMAs"
KAMAShowed    = input.bool(true, "Show", group = KAMAGrp)
KAMASrc       = input.source(close, title = "Source", group = KAMAGrp)

// Current time frame settings
ctfLen        = input.int(21, title = "CTF Length", group = KAMAGrp)
ctfFastEmaLen = input.int(2, title = "CTF Fast EMA Length", group = KAMAGrp)
ctfSlowEmaLen = input.int(30, title = "CTF Slow EMA Length", group = KAMAGrp)

// Higher timeframe settings
htf           = input.timeframe("W", title = "HTF", group = KAMAGrp)
htfLen        = input.int(21, title = "HTF Length", group = KAMAGrp)
htfFastEmaLen = input.int(2, title = "HTF Fast EMA Length", group = KAMAGrp)
htfSlowEmaLen = input.int(30, title = "HTF Slow EMA Length", group = KAMAGrp)

//-----------------------------------------------------------------------------
// Methods
//-----------------------------------------------------------------------------
getKAMA(src, len, fastEmaLen, slowEmaLen) =>
    mom = math.abs(ta.change(src, len))
    volatility = math.sum(math.abs(ta.change(src)), len)
    efficiencyRatio = volatility != 0 ? mom / volatility : 0
    fastAlpha = 2 / (fastEmaLen + 1)
    slowAlpha = 2 / (slowEmaLen + 1)
    alpha = math.pow(efficiencyRatio * (fastAlpha - slowAlpha) + slowAlpha, 2)
    kama = 0.0
    kama := alpha * src + (1 - alpha) * nz(kama[1], src)

//-----------------------------------------------------------------------------
// Calculate
//-----------------------------------------------------------------------------
ctfKAMA = getKAMA(KAMASrc, ctfLen, ctfFastEmaLen, ctfSlowEmaLen)
htfKAMA = request.security(syminfo.tickerid, htf, getKAMA(KAMASrc, htfLen, htfFastEmaLen, htfSlowEmaLen), gaps = barmerge.gaps_on, lookahead = barmerge.lookahead_off)

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
plot(KAMAShowed ? ctfKAMA : na, title = "CTF KAMA", linewidth = 1, color = AQUA_COLOR, display = display.pane)
plot(KAMAShowed ? htfKAMA : na, title = "HTF KAMA", linewidth = 1, color = PURPLE_COLOR, display = display.pane)

//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// Ichimoku Cloud
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
icGrp = "Ichimoku Cloud"
icShowed = input.bool(true, "Show", group = icGrp)
tenkanSenPrd = input.int(9, minval = 1, title = "Tenkan Sen Length", inline = "Tenkan")
tenkanSenShowed = input.bool(false, "", inline = "Tenkan")
kijunSenPrd = input.int(26, minval = 1, title = "Kijun Sen Length", inline = "Kijun")
kijunSenShowed = input.bool(false, "", inline = "Kijun")
chikouSpanOffset = input.int(26, minval = 1, title = "Chikou Span Offset", inline = "Chikou")
chikouSpanShowed = input.bool(false, "", inline = "Chikou")
senkouSpanBPrd = input.int(52, minval = 1, title = "Senkou Span B Length")

//-----------------------------------------------------------------------------
// Methods
//-----------------------------------------------------------------------------
calcDonchian(len) => math.avg(ta.lowest(len), ta.highest(len))

//-----------------------------------------------------------------------------
// Calculate
//-----------------------------------------------------------------------------
tenkanSen = calcDonchian(tenkanSenPrd)
kijunSen = calcDonchian(kijunSenPrd)
senkouSpanA = math.avg(tenkanSen, kijunSen)
senkouSpanB = calcDonchian(senkouSpanBPrd)

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
plot(icShowed and tenkanSenShowed ? tenkanSen : na, color = BLUE_COLOR, title = "Tenkan Sen")
plot(icShowed and kijunSenShowed ? kijunSen : na, color = ORANGE_COLOR, title = "Kijun Sen")
plot(icShowed and chikouSpanShowed ? close : na, offset = -chikouSpanOffset + 1, color = LIGHT_GRAY_COLOR, title = "Chikou Span")
p1 = plot(icShowed ? senkouSpanA : na, offset = chikouSpanOffset - 1, color = color.new(GREEN_COLOR, 75), title = "Senkou Span A")
p2 = plot(icShowed ? senkouSpanB : na, offset = chikouSpanOffset - 1, color = color.new(RED_COLOR, 75), title = "Senkou Span B")
plot(icShowed ? (senkouSpanA > senkouSpanB ? senkouSpanA : senkouSpanB) : na, offset = chikouSpanOffset - 1, title = "Upper Kumo Cloud", display = display.none) 
plot(icShowed ? (senkouSpanA < senkouSpanB ? senkouSpanA : senkouSpanB) : na, offset = chikouSpanOffset - 1, title = "Lower Kumo Cloud", display = display.none) 
fill(p1, p2, color = senkouSpanA > senkouSpanB ? color.new(GREEN_COLOR, 95) : color.new(RED_COLOR, 95))

//-----------------------------------------------------------------------------