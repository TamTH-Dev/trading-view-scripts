// Â© tamth_
// @version=5
indicator("Algo", shorttitle = "Algo", overlay = true, max_bars_back = 5000, max_lines_count = 500, max_boxes_count = 500, max_labels_count = 500)


//-----------------------------------------------------------------------------*
//  Constants
//-----------------------------------------------------------------------------{
color TRANSPARENT_COLOR = color.new(#000000, 100)
color WHITE_COLOR = #ffffff
color RED_COLOR = #E81E61
color AQUA_COLOR = #1EBEE8
color YELLOW_COLOR = #F2E44B
color PURPLE_COLOR = #764AF1
color ORANGE_COLOR = #F26B4B
color GREEN_COLOR = #4BF2B8
color BLUE_COLOR = #4B55F2
color PINK_COLOR = #E54BF2
color LIGHT_GRAY_COLOR = #364156
color DARK_GRAY_COLOR = #212d40


//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Variables
//-----------------------------------------------------------------------------{
series int barIdx = bar_index
series bool confirmed = barstate.isconfirmed

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Methods
//-----------------------------------------------------------------------------{
debug(simple string txt) =>
    // Create label on the first bar
    var label = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    // On next bars, update the label"s x and y position, and the text it displays
    label.set_xy(label, barIdx, ta.highest(10)[1])
    label.set_text(label, txt)

getPrdWidthByPerc(int prd, float perc) => (ta.highest(prd) - ta.lowest(prd)) * perc / 100

getTfTxt() =>
    string prd = timeframe.period
    string tf = na

    if str.contains(prd, "S")
        tf := str.length(prd) == 1 ? "1S" : prd
    else if str.contains(prd, "D")
        tf := str.length(prd) == 1 ? "1D" : prd
    else if str.contains(prd, "W")
        tf := str.length(prd) == 1 ? "1W" : prd
    else if str.contains(prd, "M")
        tf := str.length(prd) == 1 ? "1M" : prd
    else
        float mins = str.tonumber(prd)

        if mins >= 60
            tf := str.format("{0}H",  mins / 60)
        else
            tf := str.format("{0}M",  mins)

    tf

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Strategy
//-----------------------------------------------------------------------------*
string strategy = input.string("Scalping", title = "Strategy", options = ["Swing", "Scalping"], group = "General")
bool isSwing = strategy == "Swing"
bool isScalping = strategy == "Scalping"

//-----------------------------------------------------------------------------}





//-----------------------------------------------------------------------------*
// Ichimoku Kinko Hyo
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string ikhGrp = "Ichimoku Kinko Hyo"
bool ikhShowed = input.bool(true, title = "Show", group = ikhGrp)
int tenkanLen = input.int(9, minval = 1, title = "Tenkan-Sen Length", group = ikhGrp)
int kijunLen = input.int(26, minval = 1, title = "Kijun-Sen Length", group = ikhGrp)
int senkouSpanBLen = input.int(52, minval = 1, title = "Senkou-Span B Length", group = ikhGrp)
int chikouSpanDisplacement = input.int(26, minval = 1, title = "Chikou-Span Displacement", group = ikhGrp)
int kumoCloudDisplacement = input.int(26, minval = 1, title = "Kumo Cloud Displacement", group = ikhGrp)


//------------------------------------------------------------------------------
// Get lines' value
//-----------------------------------------------------------------------------{
getDonchian(len) => math.avg(ta.lowest(len), ta.highest(len))

float tenkan = getDonchian(tenkanLen)
float kijun = getDonchian(kijunLen)
float senkouSpanA = math.avg(tenkan, kijun)
float senkouSpanB = getDonchian(senkouSpanBLen)

//------------------------------------------------------------------------------
// Set lines and kumo cloud
//-----------------------------------------------------------------------------{
senkouSpanBPlot = plot(isSwing and ikhShowed ? senkouSpanB : na, offset = kumoCloudDisplacement - 1, color = LIGHT_GRAY_COLOR, title = "Senkou-Span B", display = display.pane)
senkouSpanAPlot = plot(isSwing and ikhShowed ? senkouSpanA : na, offset = kumoCloudDisplacement - 1, color = LIGHT_GRAY_COLOR, title = "Senkou-Span A", display = display.pane)
fill(senkouSpanAPlot, senkouSpanBPlot, color = senkouSpanA > senkouSpanB ? color.new(DARK_GRAY_COLOR, 60) : color.new(LIGHT_GRAY_COLOR, 0))
plot(isSwing and ikhShowed ? close : na, offset = -chikouSpanDisplacement + 1, color = AQUA_COLOR, title = "Chikou-Span", display = display.pane)
plot(isSwing and ikhShowed ? kijun : na, color = PURPLE_COLOR, title = "Kijun-Sen", display = display.pane)
plot(isSwing and ikhShowed ? tenkan : na, color = GREEN_COLOR, title = "Tenkan-Sen", display = display.pane)

//-----------------------------------------------------------------------------}





//-----------------------------------------------------------------------------*
// S/R
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string srGrp = "S/R"
bool srShowed = input.bool(false, title = "Show", group = srGrp)
int srPrd = input.int(284, title = "Period", group = srGrp)
color srSupportColor = input.color(color.new(AQUA_COLOR, 80), title = "Support Color", group = srGrp)
color srResistanceColor = input.color(color.new(RED_COLOR, 80), title = "Resistance Color", group = srGrp)
int srStrength = input.int(2, title = "Strength", minval = 1, group = srGrp)
float srZoneWidthPerc = input.float(1.5, title = "Zone Width In %", minval = 0, group = srGrp)
color srValColor = input.color(color.new(WHITE_COLOR, 20), title = "Value Color", group = srGrp)

//-----------------------------------------------------------------------------}

//-----------------------------------------------------------------------------*
// Methods
//-----------------------------------------------------------------------------{
getSrValTxt(float val) =>
    string tf = getTfTxt()
    str.format("{0} | {1}", tf, val)

buildSrValBox(float top, float bot, float val, float padding) =>
    int txtOffset = barIdx + 24
    box.new(txtOffset, top - padding / 5, txtOffset + 150, bot + padding / 5, bgcolor = TRANSPARENT_COLOR, border_width = 0, text = getSrValTxt(val), text_color = srValColor, text_size = size.small, text_valign = text.align_center, text_halign = text.align_left, extend = extend.right)

//-----------------------------------------------------------------------------}

//-----------------------------------------------------------------------------*
// Render
//-----------------------------------------------------------------------------{
int srSize = 21
int srRb = 10
float srPh = ta.pivothigh(srRb, srRb)
float srPl = ta.pivotlow(srRb, srRb)
var srLevels = array.new_float(srSize, na)
float srHighestVal = ta.highest(srPrd)
float srLowestVal = ta.lowest(srPrd)
float srChannelWidth = getPrdWidthByPerc(srPrd, 10)
float srZoneWidth = getPrdWidthByPerc(300, srZoneWidthPerc)
bool[] srAas = array.new_bool(41, true)
float srHighestPh = 0.0, srHighestPh := srHighestPh[1]
float srLowestPl = 0.0, srLowestPl := srLowestPl[1]
var srLevelsClone = array.new_float(srSize, na)
var srAreaBoxes = array.new_box(srSize, na)
var srValBoxes = array.new_box(srSize, na)

if (not na(srPh) or not na(srPl)) and confirmed and srShowed and isScalping
    for i = 0 to array.size(srLevels) - 1
        array.set(srLevels, i, na)

    srHighestPh := srLowestVal
    srLowestPl := srHighestVal
    int ppCount = 0

    for i = 0 to srPrd
        if na(close[i])
            break

        if not na(srPh[i]) or not na(srPl[i])
            srHighestPh := math.max(srHighestPh, nz(srPh[i], srLowestVal), nz(srPl[i], srLowestVal))
            srLowestPl := math.min(srLowestPl, nz(srPh[i], srHighestVal), nz(srPl[i], srHighestVal))
            ppCount += 1

            if ppCount > 40
                break

            if array.get(srAas, ppCount)
                upl = (not na(srPh[i]) ? high[i + srRb] : low[i + srRb]) + srChannelWidth
                dnl = (not na(srPh[i]) ? high[i + srRb] : low[i + srRb]) - srChannelWidth
                tmp = array.new_bool(41, true)
                count = 0
                points = 0

                for j = 0 to srPrd
                    if na(close[j])
                        break

                    if not na(srPh[j]) or not na(srPl[j])
                        chg = false
                        count += 1

                        if count > 40
                            break

                        if array.get(srAas, count)
                            if not na(srPh[j])
                                if high[j + srRb] <= upl and high[j + srRb] >= dnl
                                    points += 1
                                    chg := true

                            if not na(srPl[j])
                                if low[j + srRb] <= upl and low[j + srRb] >= dnl
                                    points += 1
                                    chg := true

                        if chg and count < 41
                            array.set(tmp, count, false)

                if points >= srStrength
                    for g = 0 to 40 by 1
                        if not array.get(tmp, g)
                            array.set(srAas, g, false)

                    if not na(srPh[i]) and ppCount < srSize
                        array.set(srLevels, ppCount, high[i + srRb])

                    if not na(srPl[i]) and ppCount < srSize
                        array.set(srLevels, ppCount, low[i + srRb])

if srShowed and isScalping
    var box srHighestAreaBox = na, box.delete(srHighestAreaBox)
    var box srLowestAreaBox = na, box.delete(srLowestAreaBox)
    var box srHighestValBox = na, box.delete(srHighestValBox)
    var box srLowestValBox = na, box.delete(srLowestValBox)
    color srHighestColor = close >= srHighestPh ? srSupportColor : srResistanceColor
    color srLowestColor = close >= srLowestPl ? srSupportColor : srResistanceColor
    float srHighestTop = srHighestPh + srZoneWidth
    float srHighestBot = srHighestPh - srZoneWidth
    float srLowestTop = srLowestPl + srZoneWidth
    float srLowestBot = srLowestPl - srZoneWidth
    srHighestAreaBox := box.new(barIdx, srHighestTop, barIdx, srHighestBot, extend = extend.both, bgcolor = srHighestColor, border_width = 1, border_color = srHighestColor)
    srLowestAreaBox := box.new(barIdx, srLowestTop, barIdx, srLowestBot, extend = extend.both, bgcolor = srLowestColor, border_width = 1, border_color = srLowestColor)
    srHighestValBox := buildSrValBox(srHighestTop, srHighestBot, srHighestPh, srZoneWidth)
    srLowestValBox := buildSrValBox(srLowestTop, srLowestBot, srLowestPl, srZoneWidth)

    if not na(srPh) or not na(srPl)
        for i = 0 to array.size(srAreaBoxes) - 1
            array.set(srLevelsClone, i, array.get(srLevels, i))

    for i = 0 to array.size(srAreaBoxes) - 1
        box.delete(array.get(srAreaBoxes, i))
        box.delete(array.get(srValBoxes, i))

        if not na(array.get(srLevelsClone, i))
            color lineColor = close >= array.get(srLevelsClone, i) ? srSupportColor : srResistanceColor
            float level = array.get(srLevelsClone, i)
            float top = level + srZoneWidth
            float bot = level - srZoneWidth
            bool topExisted = math.abs(level - srHighestPh) < srZoneWidth
            bool botExisted = math.abs(level - srLowestPl) < srZoneWidth

            if (not topExisted and not botExisted)
                array.set(srAreaBoxes, i, box.new(barIdx, top, barIdx, bot, extend = extend.both, bgcolor = lineColor, border_width = 1, border_color = lineColor))
                array.set(srValBoxes, i, buildSrValBox(top, bot, level, srZoneWidth))

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Signals
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string buySellGrp = "Buy & Sell Signals"
bool buySellSignalsShowed = input.bool(true, title = "Show", group = buySellGrp)
float sensitivity = input.float(2.5, title = "Sensitivity", minval = 1, maxval = 6, group = buySellGrp)
string trGrp = "Trend Ribbon"
bool trShowed = input.bool(false, title = "Show", group = trGrp)
string revZonesGrp = "Reversal Zones"
bool revZonesShowed = input.bool(true, "Show", group = revZonesGrp)
int revZonesPrd = input.int(30, "Period", group = revZonesGrp)

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Methods
//-----------------------------------------------------------------------------{
smoothRng(float src, int prd, float mult) =>
    float rngAvg = ta.ema(math.abs(src - src[1]), prd)
    ta.ema(rngAvg, prd * 2 - 1) * mult

filterRng(float src, float rng) =>
    float rngSrc = src
    rngSrc := src > nz(rngSrc[1]) ? src - rng < nz(rngSrc[1]) ? nz(rngSrc[1]) : src - rng : src + rng > nz(rngSrc[1]) ? nz(rngSrc[1]) : src + rng

getWt(float src, int chlPrd, int avgPrd) =>
    float esa = ta.ema(src, chlPrd)
    float d = ta.ema(math.abs(src - esa), chlPrd)
    float ci = (src - esa) / (0.015 * d)
    float leadingWt = ta.ema(ci, avgPrd)
    float laggingWt = ta.sma(leadingWt, 3)
    [leadingWt, laggingWt]

getRevZones(float src, int prd, float sensitivity) =>
    series float basis = ta.sma(src, prd)
    series float span = ta.atr(prd)
    [basis + span * sensitivity, basis - span * sensitivity]

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Get Values
//-----------------------------------------------------------------------------{
float src = close
float leadingRange = smoothRng(src, 27, 1.5)
float laggingRange = smoothRng(src, 55, sensitivity)
float avgRange = (leadingRange + laggingRange) / 2
float clearnRange = filterRng(src, avgRange)
float upSignal = 0.0, upSignal := clearnRange > clearnRange[1] ? nz(upSignal[1]) + 1 : clearnRange < clearnRange[1] ? 0 : nz(upSignal[1])
float dnSignal = 0.0, dnSignal := clearnRange < clearnRange[1] ? nz(dnSignal[1]) + 1 : clearnRange > clearnRange[1] ? 0 : nz(dnSignal[1])
bool bullishCond = bool(na), bullishCond := src > clearnRange and src > src[1] and upSignal > 0 or src > clearnRange and src < src[1] and upSignal > 0
bool bearishCond = bool(na), bearishCond := src < clearnRange and src < src[1] and dnSignal > 0 or src < clearnRange and src > src[1] and dnSignal > 0
int finalCond = 0, finalCond := bullishCond ? 1 : bearishCond ? -1 : finalCond[1]
bool isBullish = bullishCond and finalCond[1] == -1
bool isBearish = bearishCond and finalCond[1] == 1
[leadingWt, laggingWt] = getWt(hlc3, 9, 12)
[upperRevSmZone, lowerRevSmZone] = getRevZones(close, revZonesPrd, 3)
[upperRevMdZone, lowerRevMdZone] = getRevZones(close, revZonesPrd, 4)
[upperRevLgZone, lowerRevLgZone] = getRevZones(close, revZonesPrd, 5)

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Render
//-----------------------------------------------------------------------------{
bool hasMildBuySignal = ta.crossover(leadingWt, laggingWt) and laggingWt <= -80
bool hasMildSellSignal = ta.crossunder(leadingWt, laggingWt) and laggingWt >= 80
bool consistentBuySignal = isBullish and hasMildBuySignal
bool consistentSellSignal = isBearish and hasMildSellSignal
plotshape(isScalping and buySellSignalsShowed and isBullish and not consistentBuySignal and confirmed, title = "Bullish Buy Signal" , style = shape.circle, location = location.belowbar, color = GREEN_COLOR, size = size.tiny, display = display.pane)
plotshape(isScalping and buySellSignalsShowed and isBearish and not consistentSellSignal and confirmed, title = "Bearish Sell Signal", style = shape.circle, location = location.abovebar, color = PURPLE_COLOR, size = size.tiny, display = display.pane)
plotshape(isScalping and buySellSignalsShowed and consistentBuySignal and confirmed, title = "Consistent Buy Signal" , style = shape.triangleup, location = location.belowbar, color = YELLOW_COLOR, size = size.tiny, display = display.pane)
plotshape(isScalping and buySellSignalsShowed and consistentSellSignal and confirmed, title = "Consistent Sell Signal", style = shape.triangledown, location = location.abovebar, color = ORANGE_COLOR, size = size.tiny, display = display.pane)

var upperRevSmZonePlot = plot(isScalping and revZonesShowed ? upperRevSmZone : na, title = "Upper Reversal Sm Zone", color = TRANSPARENT_COLOR, display = display.pane)
var upperRevMdZonePlot = plot(isScalping and revZonesShowed ? upperRevMdZone : na, title = "Upper Reversal Md Zone", color = color.new(PINK_COLOR, 85), display = display.pane)
var upperRevLgZonePlot = plot(isScalping and revZonesShowed ? upperRevLgZone : na, title = "Upper Reversal Lg Zone", color = color.new(PINK_COLOR, 75), display = display.pane)
fill(upperRevSmZonePlot, upperRevMdZonePlot, color.new(PINK_COLOR, 85))
fill(upperRevMdZonePlot, upperRevLgZonePlot, color.new(PINK_COLOR, 75))
var lowerRevLgZonePlot = plot(isScalping and revZonesShowed ? lowerRevLgZone : na, title = "Lower Reversal Lg Zone", color = color.new(BLUE_COLOR, 75), display = display.pane)
var lowerRevMdZonePlot = plot(isScalping and revZonesShowed ? lowerRevMdZone : na, title = "Lower Reversal Md Zone", color = color.new(BLUE_COLOR, 85), display = display.pane)
var lowerRevSmZonePlot = plot(isScalping and revZonesShowed ? lowerRevSmZone : na, title = "Lower Reversal Sm Zone", color = TRANSPARENT_COLOR, display = display.pane)
fill(lowerRevSmZonePlot, lowerRevMdZonePlot, color.new(BLUE_COLOR, 85))
fill(lowerRevMdZonePlot, lowerRevLgZonePlot, color.new(BLUE_COLOR, 75))

series float ema21 = ta.ema(close, 21)
series float ema50 = ta.ema(close, 50)
color trColor = ema21 > ema50 ? color.new(AQUA_COLOR, 80) : ema21 < ema50 ? color.new(RED_COLOR, 80) : TRANSPARENT_COLOR
var trShortPlot = plot(isScalping and trShowed ? ema21 : na, title = "Short Trend Ribbon", color = trColor, linewidth = 1, display = display.pane)
var trLongPlot = plot(isScalping and trShowed ? ema50 : na, title = "Long Trend Ribbon", color = trColor, linewidth = 1, display = display.pane)
fill(trShortPlot, trLongPlot, title = "Trend Ribbon", color = trColor)

//-----------------------------------------------------------------------------}




//-----------------------------------------------------------------------------*
// Signals
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string shaGrp = "Smoothed Heikin Ashi"
bool shaShowed = input.bool(true, title = "Show", group = shaGrp)
int shaPrd = input.int(10, title = "Period", group = shaGrp)
int shaSmoothedLen = input.int(10, title = "Smoothed Length", group = shaGrp)

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Calculate Values
//-----------------------------------------------------------------------------{
series float emaOpen = ta.ema(open, shaPrd)
series float emaClose = ta.ema(close, shaPrd)
series float emaHigh = ta.ema(high, shaPrd)
series float emaLow = ta.ema(low, shaPrd)
series float shaClose = (emaOpen + emaHigh + emaLow + emaClose) / 4
series float shaOpen = na
shaOpen := na(shaOpen[1]) ? (emaOpen + emaClose) / 2 : (shaOpen[1] + shaClose[1]) / 2
series float shaHigh = math.max(emaHigh, math.max(shaOpen, shaClose))
series float shaLow = math.min(emaLow, math.min(shaOpen, shaClose))
series float shaSmoothedOpen = ta.ema(shaOpen, shaSmoothedLen)
series float shaSmoothedClose = ta.ema(shaClose, shaSmoothedLen)
series float shaSmoothedHigh = ta.ema(shaHigh, shaSmoothedLen)
series float shaSmoothedLow = ta.ema(shaLow, shaSmoothedLen)

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Render
//-----------------------------------------------------------------------------{
color shaColor = shaSmoothedOpen > shaSmoothedClose ? RED_COLOR : AQUA_COLOR
plotcandle(shaSmoothedOpen, shaSmoothedHigh, shaSmoothedLow, shaSmoothedClose, title = "Smoothed Heikin Ashi", color = color.new(shaColor, 60), bordercolor = color.new(shaColor, 20), wickcolor = TRANSPARENT_COLOR, display = isScalping and shaShowed ? display.pane : display.none)

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Golden Pocket
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string gpGrp = "Golden Pocket"
bool gpShowed = input.bool(false, "Show", group = gpGrp)
string gpDepthTooltip = "The minimum number of bars that will be taken into account when calculating the indicator."
int gpDepth = input.int(20, "Depth", group = gpGrp, tooltip = gpDepthTooltip)
string gpDevTooltip = "Deviation is a multiplier that affects how much the price should deviate from the previous pivot in order for the bar to become a new pivot."
float gpThresholdMult = input.float(3, "Deviation", group = gpGrp, tooltip = gpDevTooltip)
color gpColor = input.color(YELLOW_COLOR, "Color", group = gpGrp)

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Methods
//-----------------------------------------------------------------------------{
type Settings
    float devThreshold = 3
    int depth = 10

type Point
    int unixTime
    float price

type Pivot
    bool isHigh 
    float vol
    Point start
    Point end

type ZigZag
    Settings settings
    array<Pivot> pivots
    float volTotal = 0
    Pivot extend = na


findPivotPoint(series float src, series float len, simple bool isHigh) =>
    float pivot = nz(src[len])

    if len == 0
        Point.new(time, pivot)
    else if len * 2 <= barIdx
        bool found = true

        for i = 0 to math.abs(len - 1)
            if (isHigh and src[i] > pivot) or (not isHigh and src[i] < pivot)
                found := false
                break

        for i = len + 1 to 2 * len
            if (isHigh and src[i] >= pivot) or (not isHigh and src[i] <= pivot)
                found := false
                break

        if found
            Point.new(time[len], pivot)

calcDev(series float basePrice, series float price) =>
    float result = 100 * (price - basePrice) / math.abs(basePrice)

method updatePivot(Pivot this, Point end, float vol, Settings settings) =>
    this.end := end
    this.vol := vol

getNewPivot(series Point start, series Point end, series float vol, series bool isHigh, series Settings settings) =>
    Pivot pivot = Pivot.new(isHigh, vol, start, end)
    pivot.updatePivot(end, vol, settings)
    pivot

method isPriceHigher(series Pivot this, series Point point) => 
    int mult = this.isHigh ? 1 : -1
    point.price * mult > this.end.price * mult

method getLastPivot(series ZigZag this) =>
    int size = this.pivots.size()
    size > 0 ? this.pivots.get(size - 1) : na

method updateLastPivot(series ZigZag this, series Point point) =>
    Pivot lastPivot = this.getLastPivot()

    if this.pivots.size() == 1
        lastPivot.start := point

    lastPivot.updatePivot(point, lastPivot.vol + this.volTotal, this.settings)
    this.volTotal := 0

method addNewPivot(series ZigZag this, series Pivot pivot) =>
    this.pivots.push(pivot)
    this.volTotal := 0

method hasNewPivotPointFound(series ZigZag this, simple bool isHigh, series Point point) =>
    bool found = false
    Pivot lastPivot = this.getLastPivot()

    if not na(lastPivot)
        if lastPivot.isHigh == isHigh 
            if lastPivot.isPriceHigher(point)
                this.updateLastPivot(point)
                found := true
        else
            float dev = calcDev(lastPivot.end.price, point.price)

            if (not lastPivot.isHigh and dev >= this.settings.devThreshold) or (lastPivot.isHigh and dev <= -1 * this.settings.devThreshold)
                this.addNewPivot(getNewPivot(lastPivot.end, point, this.volTotal, isHigh, this.settings))
                found := true
    else
        this.addNewPivot(getNewPivot(point, point, this.volTotal, isHigh, this.settings))
        found := true

    found

method findPivot(series ZigZag this, series float src, simple bool isHigh, series int depth, series bool pivotRegistered = true) =>
    Point point = findPivotPoint(src, depth, isHigh)
    not na(point) and pivotRegistered ? this.hasNewPivotPointFound(isHigh, point) : false

method updateZigzag(series ZigZag this, series float vols, series float highVal, series float lowVal, series int timeVal) =>
    int depth = math.max(2, math.floor(this.settings.depth / 2))
    this.volTotal += nz(vols[depth])
    bool updated = this.findPivot(highVal, true, depth)
    updated := this.findPivot(lowVal, false, depth, not updated) or updated
    Pivot lastPivot = this.getLastPivot()
    float remVol = math.sum(vols, math.max(depth, 1))

    if barstate.islast and not na(lastPivot)
        bool isHigh = not lastPivot.isHigh
        float curSeries = isHigh ? highVal : lowVal
        Point end = Point.new(timeVal, curSeries)

        if na(this.extend) or updated
            this.extend := getNewPivot(lastPivot.end, end, this.volTotal, isHigh, this.settings)

        this.extend.updatePivot(end, this.volTotal + remVol, this.settings)

    updated

initZigzag(series Settings settings = na) =>
    ZigZag result = ZigZag.new(na(settings) ? Settings.new() : settings, array.new<Pivot>())

getGpVals(series float closeVal, series float volVal, series float highVal, series float lowVal, series int timeVal) =>
    var settings = Settings.new(gpThresholdMult, gpDepth)
    var ZigZag zigzagInst = initZigzag(settings)
    var Pivot lastPivot = na
    var float startPrice = na
    var float height = na
    settings.devThreshold := ta.atr(10) / closeVal * 100 * gpThresholdMult

    if zigzagInst.updateZigzag(volVal, highVal, lowVal, timeVal)
        lastPivot := zigzagInst.getLastPivot()

        if not na(lastPivot)
            var line lastLine = na

            if na(lastLine) and gpShowed and isScalping
                lastLine := line.new(lastPivot.start.unixTime, lastPivot.start.price, lastPivot.end.unixTime, lastPivot.end.price, xloc = xloc.bar_time, color = color.new(gpColor, 20), width = 1, style = line.style_dashed)
            else
                line.set_xy1(lastLine, lastPivot.start.unixTime, lastPivot.start.price)
                line.set_xy2(lastLine, lastPivot.end.unixTime, lastPivot.end.price)

            startPrice := lastPivot.end.price
            endPrice = lastPivot.start.price
            height := (startPrice > endPrice ? -1 : 1) * math.abs(startPrice - endPrice)

    [lastPivot, startPrice, height]

[gpLastPivot, gpStartPrice, gpHeight] = getGpVals(close, volume, high, low, time)

drawFibLevel(Pivot pivot, float level, color color, float lineWidth) =>
    var box fibLine = na, box.delete(fibLine)
    fibLine := box.new(pivot.start.unixTime, level + lineWidth / 2, time, level - lineWidth / 2, xloc = xloc.bar_time, bgcolor = gpColor, border_color = gpColor, border_width = 0, extend = extend.right)

processFibLevel(Pivot pivot, series float startPrice, series float height, simple float val, color color) =>
	float level = startPrice + height * val

    if not na(pivot)
		drawFibLevel(pivot, level, color, height / 200)
        level
    else
        na

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Render
//-----------------------------------------------------------------------------{
if gpShowed and isScalping
    float level618 = processFibLevel(gpLastPivot, gpStartPrice, gpHeight, 0.618, gpColor)
    float level65 = processFibLevel(gpLastPivot, gpStartPrice, gpHeight, 0.65, gpColor)
    var box gpValBox = na, box.delete(gpValBox)
    int gpValOffset = barIdx + 8
    float gpTopOffset = gpHeight > 0 ? level65 : level618
    gpValBox := box.new(gpValOffset, gpTopOffset + getPrdWidthByPerc(300, 1), gpValOffset + 200, gpTopOffset, bgcolor = TRANSPARENT_COLOR, border_width = 0, text = getTfTxt(), text_color = gpColor, text_size = size.small, text_valign = text.align_bottom, text_halign = text.align_left, extend = extend.right)

//-----------------------------------------------------------------------------}





//-----------------------------------------------------------------------------*
// Vector Candles
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string vcsGrp = "Vector Candles"
color lgVolUpCandleColor = input.color(AQUA_COLOR, title = "Large Volume Up Candle Color", group = vcsGrp)
color mdVolUpCandleColor = input.color(YELLOW_COLOR, title = "Medium Volume Up Candle Color", group = vcsGrp)
color lgVolDnCandleColor = input.color(RED_COLOR, title = "Large Volume Down Candle Color", group = vcsGrp)
color mdVolDnCandleColor = input.color(PINK_COLOR, title = "Medium Volume Down Candle Color", group = vcsGrp)
string ncsGrp = "Normal Candleexs"
color norUpCandleColor = input.color(GREEN_COLOR, title = "Normal Up Candle Color", group = ncsGrp)
color norDnCandleColor = input.color(PURPLE_COLOR, title = "Normal Down Candle Color", group = ncsGrp)

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Methods
//-----------------------------------------------------------------------------{
getVcsColor(series float _vol, series float _high, series float _low, series float _close, series float _open, simple color lgVolDnCandleColor, simple color lgVolUpCandleColor, simple color mdVolDnCandleColor, simple color mdVolUpCandleColor, simple color norDnCandleColor, simple color norUpCandleColor) =>
    float avgVol = math.sum(_vol[1], 10) / 10.0
    float volSpread = _vol * (_high - _low)
    float highestVolSpread = ta.highest(volSpread[1], 10)
    color vcsColor = na
    
    // Large volume
    if _vol >= 2 * avgVol or volSpread >= highestVolSpread
        vcsColor := _close > _open ? lgVolUpCandleColor : lgVolDnCandleColor
    // Medium volume
    else if _vol >= 1.5 * avgVol
        vcsColor := _close > _open ? mdVolUpCandleColor : mdVolDnCandleColor
    // Normal volume
    else
        vcsColor := _close > _open ? norUpCandleColor : norDnCandleColor

    vcsColor

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Get Values
//-----------------------------------------------------------------------------{
[_vol, _high, _low, _close, _open] = request.security(syminfo.tickerid, timeframe.period, [volume,high,low,close,open], barmerge.gaps_off, barmerge.lookahead_off)

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Render Vector Candles
//-----------------------------------------------------------------------------{
vcsColor = getVcsColor(_vol, _high, _low, _close, _open, lgVolDnCandleColor, lgVolUpCandleColor, mdVolDnCandleColor, mdVolUpCandleColor, norDnCandleColor, norUpCandleColor)
barcolor(vcsColor)

//-----------------------------------------------------------------------------}