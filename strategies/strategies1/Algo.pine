// Â© tamth_
// @version=6
indicator(title="Algo", shorttitle="Algo", overlay=true, max_labels_count=500, max_lines_count=500, max_boxes_count=1000, max_bars_back=1000)

//-----------------------------------------------------------------------------
// Constants
//-----------------------------------------------------------------------------
// Colors
color TRANSPARENT_COLOR = color.new(#000000, 100)
color WHITE_COLOR      = #ffffff
color BLACK_COLOR      = #000000
color RED_COLOR        = #ff006e
color ORANGE_COLOR     = #fb5607
color YELLOW_COLOR     = #ffbe0b
color GREEN_COLOR      = #2a9d8f
color AQUA_COLOR       = #00b4d8
color BLUE_COLOR       = #3a86ff
color PURPLE_COLOR     = #8338ec
color PINK_COLOR       = #df3bf1
color LIGHT_GRAY_COLOR = #364156
color DARK_GRAY_COLOR  = #212d40
color TEXT_COLOR       = #ced4da

//-----------------------------------------------------------------------------
// Common Variables
//-----------------------------------------------------------------------------
// Bar index
series int barIdx = bar_index

//-----------------------------------------------------------------------------
// Common Methods
//-----------------------------------------------------------------------------
// Debug label function
debug(simple string txt) =>
    var label lbl = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    label.set_xy(lbl, barIdx, ta.highest(10)[1])
    label.set_text(lbl, txt)

// Calculate period width by percentage
getPrdWidthByPerc(int prd, float perc) => 
    (ta.highest(prd) - ta.lowest(prd)) * perc / 100

//-----------------------------------------------------------------------------
// DSMAs
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
dsmaGrp    = "DSMAs"
dsmaShowed = input.bool(true, title="Show", group=dsmaGrp)
dsmaSrc    = input.source(close, title="Source", group=dsmaGrp)
dsma1Len   = input.int(40, title="DSMA 1 Length", group=dsmaGrp)
dsma2Len   = input.int(100, title="DSMA 2 Length", group=dsmaGrp)

//-----------------------------------------------------------------------------
// Methods
//-----------------------------------------------------------------------------
// Calculate DSMA
calcDsma(src, len) =>
    filt = 0.0
    dsma = 0.0

    PI = 3.1415926
    a1 = math.exp( -1.414 * PI / (0.5 * len))
    b1 = 2 * a1 * math.cos( 1.414 * PI / ( 0.5 * len))
    c2 = b1
    c3 = -a1 * a1
    c1 = 1 - c2 - c3

    zeros = src - src[2]
    filt := c1 * (zeros + zeros[1]) / 2 + c2 * nz(filt[1]) + c3 * nz(filt[2])
    rm = math.sum(filt * filt, len) 
    rms = math.sqrt(rm / len) 
    scaledFilt = rms != 0 ? filt / rms : 0
    alpha1 = math.abs(scaledFilt) * 5 / len
    dsma := alpha1 * close + (1 - alpha1) * nz(dsma[1])
    dsma

//-----------------------------------------------------------------------------
// Values
//-----------------------------------------------------------------------------
dsma1 = calcDsma(dsmaSrc, dsma1Len)
dsma2 = calcDsma(dsmaSrc, dsma2Len)

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
plot(dsmaShowed ? dsma1 : na, color=AQUA_COLOR, linewidth=1, display = display.pane, force_overlay = true)
plot(dsmaShowed ? dsma2 : na, color=RED_COLOR, linewidth=1, display = display.pane, force_overlay = true)

//-----------------------------------------------------------------------------
// EMAs
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
emaGrp        = "EMAs"
emaShowed     = input.bool(false, title="Show", group=emaGrp)
emaSrc        = input.source(close, title="Source", group=emaGrp)
ema1Len       = input.int(5, title="EMA 1 Length", group=emaGrp, inline="EMA1")
ema1Color     = input.color(GREEN_COLOR, "", group=emaGrp, inline="EMA1")
ema1Showed    = input.bool(true, title="Show", group=emaGrp, inline="EMA1")
ema2Len       = input.int(8, title="EMA 2 Length", group=emaGrp, inline="EMA2")
ema2Color     = input.color(BLUE_COLOR, "", group=emaGrp, inline="EMA2")
ema2Showed    = input.bool(true, title="Show", group=emaGrp, inline="EMA2")
ema3Len       = input.int(21, title="EMA 3 Length", group=emaGrp, inline="EMA3")
ema3Color     = input.color(RED_COLOR, "", group=emaGrp, inline="EMA3")
ema3Showed    = input.bool(true, title="Show", group=emaGrp, inline="EMA3")
ema4Len       = input.int(34, title="EMA 4 Length", group=emaGrp, inline="EMA4")
ema4Color     = input.color(ORANGE_COLOR, "", group=emaGrp, inline="EMA4")
ema4Showed    = input.bool(true, title="Show", group=emaGrp, inline="EMA4")
ema5Len       = input.int(55, title="EMA 5 Length", group=emaGrp, inline="EMA5")
ema5Color     = input.color(YELLOW_COLOR, "", group=emaGrp, inline="EMA5")
ema5Showed    = input.bool(true, title="Show", group=emaGrp, inline="EMA5")
ema6Len       = input.int(89, title="EMA 6 Length", group=emaGrp, inline="EMA6")
ema6Color     = input.color(PURPLE_COLOR, "", group=emaGrp, inline="EMA6")
ema6Showed    = input.bool(true, title="Show", group=emaGrp, inline="EMA6")

//-----------------------------------------------------------------------------
// Values
//-----------------------------------------------------------------------------
// Calculate EMAs
ema1 = ta.ema(emaSrc, ema1Len)
ema2 = ta.ema(emaSrc, ema2Len)
ema3 = ta.ema(emaSrc, ema3Len)
ema4 = ta.ema(emaSrc, ema4Len)
ema5 = ta.ema(emaSrc, ema5Len)
ema6 = ta.ema(emaSrc, ema6Len)

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
// Plot EMAs
plot(emaShowed and ema1Showed ? ema1 : na, color=ema1Color, linewidth=1, display=display.pane, style=plot.style_circles)
plot(emaShowed and ema2Showed ? ema2 : na, color=ema2Color, linewidth=1, display=display.pane, style=plot.style_circles)
plot(emaShowed and ema3Showed ? ema3 : na, color=ema3Color, linewidth=1, display=display.pane, style=plot.style_circles)
plot(emaShowed and ema4Showed ? ema4 : na, color=ema4Color, linewidth=1, display=display.pane)
plot(emaShowed and ema5Showed ? ema5 : na, color=ema5Color, linewidth=1, display=display.pane)
plot(emaShowed and ema6Showed ? ema6 : na, color=ema6Color, linewidth=1, display=display.pane)

//-----------------------------------------------------------------------------
// Volume Profile
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
string vpGrp        = "Volume Profile"
bool vpShowed       = input.bool(false, "Show", group=vpGrp)
int vpLen           = input.int(200, "Lookback", minval=1, maxval=500, tooltip="Number of most recent bars", group=vpGrp)
int vpLevelsSize    = input.int(360, "Size Of Levels", minval=1, maxval=400, group=vpGrp)
int vpWidth         = input.int(16, "Profile's Width", minval=1, maxval=100, tooltip="The length of the bars relative to the Lookback value", group=vpGrp)
int vpBarWidth      = input.int(2, "Bar's Width", tooltip="Width of each bar", group=vpGrp)
int vpOffset        = input.int(20, "Offset From Last Bar", group=vpGrp)
color vpColor       = input.color(DARK_GRAY_COLOR, "Color", group=vpGrp)

//-----------------------------------------------------------------------------
// Render Volume Profile
//-----------------------------------------------------------------------------
// Initialize volume profile lines
var vpLines = array.new_line()
if barstate.isfirst
    for i = 0 to vpLevelsSize - 1
        array.push(vpLines, line.new(na, na, na, na, width=2))

series float vpHighest = ta.highest(vpLen)
series float vpLowest  = ta.lowest(vpLen)
array<float> vpLevels  = array.new_float(0)
array<int> vpVols      = array.new_int(0)
array<float> vpSumv    = array.new_float(0)
line vpLine            = na

if barstate.islast and vpShowed
    for i = 0 to vpLevelsSize
        array.push(vpLevels, vpLowest + i / vpLevelsSize * (vpHighest - vpLowest))

    for i = 0 to vpLevelsSize - 1
        series float sum = 0.
        for j = 0 to vpLen - 1
            sum := high[j] > array.get(vpLevels, i) and low[j] < array.get(vpLevels, i + 1) ? sum + volume[j] : sum
        array.push(vpSumv, sum)

    for i = 0 to vpLevelsSize - 1
        series float mult = array.get(vpSumv, i) / array.max(vpSumv)
        series int vol = math.round(vpLen * vpWidth / 100 * mult)
        array.push(vpVols, vol)
    
    series int maxVol = array.max(vpVols)
    int shift = barIdx + maxVol + vpOffset
    for i = 0 to vpLevelsSize - 1
        series int vol = array.get(vpVols, i)
        series float level = array.get(vpLevels, i)
        vpLine := array.get(vpLines, i)
        line.set_xy1(vpLine, shift, level)
        line.set_xy2(vpLine, shift - vol, level)
        line.set_color(vpLine, vpColor)
        line.set_width(vpLine, vpBarWidth)

//-----------------------------------------------------------------------------
// S/R
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
srGrp             = "S/R"
srShowed          = input.bool(true, title="Show", group=srGrp)
srPrd             = input.int(284, title="Period", group=srGrp)
srSupportColor    = input.color(#212d4080, title="Support Color", group=srGrp)
srResistanceColor = input.color(#212d4080, title="Resistance Color", group=srGrp)
srStrength        = input.int(2, title="Strength", minval=1, group=srGrp)
srZoneWidthPerc   = input.float(1.5, title="Zone Width In %", minval=0, group=srGrp)
srValColor        = input.color(TEXT_COLOR, title="Value Color", group=srGrp)

//-----------------------------------------------------------------------------
// Methods
//-----------------------------------------------------------------------------
// Format S/R value text
getSrValTxt(float val) =>
    str.tostring(val, "#.#####")

// Build S/R value box
buildSrValBox(float top, float bot, float val, float padding) =>
    int txtOffset = barIdx + 24
    box.new(txtOffset, top - padding / 5, txtOffset + 150, bot + padding / 5, bgcolor=TRANSPARENT_COLOR, border_width=0, text=getSrValTxt(val), text_color=srValColor, text_size=size.small, text_valign=text.align_center, text_halign=text.align_left, extend=extend.right)

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
// Initialize S/R variables
int srSize           = 21
int srRb             = 10
float srPh           = ta.pivothigh(srRb, srRb)
float srPl           = ta.pivotlow(srRb, srRb)
var srLevels         = array.new_float(srSize, na)
float srHighestVal   = ta.highest(srPrd)
float srLowestVal    = ta.lowest(srPrd)
float srChannelWidth = getPrdWidthByPerc(srPrd, 10)
float srZoneWidth    = getPrdWidthByPerc(300, srZoneWidthPerc)
bool[] srAas         = array.new_bool(41, true)
float srHighestPh    = 0.0, srHighestPh := srHighestPh[1]
float srLowestPl     = 0.0, srLowestPl := srLowestPl[1]
var srLevelsClone    = array.new_float(srSize, na)
var srAreaBoxes      = array.new_box(srSize, na)
var srValBoxes       = array.new_box(srSize, na)

if (not na(srPh) or not na(srPl)) and srShowed
    for i = 0 to array.size(srLevels) - 1
        array.set(srLevels, i, na)

    srHighestPh := srLowestVal
    srLowestPl := srHighestVal
    int ppCount = 0

    for i = 0 to srPrd
        if na(close[i])
            break

        if not na(srPh[i]) or not na(srPl[i])
            srHighestPh := math.max(srHighestPh, nz(srPh[i], srLowestVal), nz(srPl[i], srLowestVal))
            srLowestPl := math.min(srLowestPl, nz(srPh[i], srHighestVal), nz(srPl[i], srHighestVal))
            ppCount += 1

            if ppCount > 40
                break

            if array.get(srAas, ppCount)
                upl = (not na(srPh[i]) ? high[i + srRb] : low[i + srRb]) + srChannelWidth
                dnl = (not na(srPh[i]) ? high[i + srRb] : low[i + srRb]) - srChannelWidth
                tmp = array.new_bool(41, true)
                count = 0
                points = 0

                for j = 0 to srPrd
                    if na(close[j])
                        break

                    if not na(srPh[j]) or not na(srPl[j])
                        chg = false
                        count += 1

                        if count > 40
                            break

                        if array.get(srAas, count)
                            if not na(srPh[j])
                                if high[j + srRb] <= upl and high[j + srRb] >= dnl
                                    points += 1
                                    chg := true

                            if not na(srPl[j])
                                if low[j + srRb] <= upl and low[j + srRb] >= dnl
                                    points += 1
                                    chg := true

                        if chg and count < 41
                            array.set(tmp, count, false)

                if points >= srStrength
                    for g = 0 to 40 by 1
                        if not array.get(tmp, g)
                            array.set(srAas, g, false)

                    if not na(srPh[i]) and ppCount < srSize
                        array.set(srLevels, ppCount, high[i + srRb])

                    if not na(srPl[i]) and ppCount < srSize
                        array.set(srLevels, ppCount, low[i + srRb])

if srShowed
    var box srHighestAreaBox = na, box.delete(srHighestAreaBox)
    var box srLowestAreaBox  = na, box.delete(srLowestAreaBox)
    var box srHighestValBox  = na, box.delete(srHighestValBox)
    var box srLowestValBox   = na, box.delete(srLowestValBox)
    color srHighestColor     = close >= srHighestPh ? srSupportColor : srResistanceColor
    color srLowestColor      = close >= srLowestPl ? srSupportColor : srResistanceColor
    float srHighestTop       = srHighestPh + srZoneWidth
    float srHighestBot       = srHighestPh - srZoneWidth
    float srLowestTop        = srLowestPl + srZoneWidth
    float srLowestBot        = srLowestPl - srZoneWidth
    srHighestAreaBox := box.new(barIdx, srHighestTop, barIdx, srHighestBot, extend=extend.both, bgcolor=srHighestColor, border_width=0)
    srLowestAreaBox := box.new(barIdx, srLowestTop, barIdx, srLowestBot, extend=extend.both, bgcolor=srLowestColor, border_width=0)
    srHighestValBox := buildSrValBox(srHighestTop, srHighestBot, srHighestPh, srZoneWidth)
    srLowestValBox := buildSrValBox(srLowestTop, srLowestBot, srLowestPl, srZoneWidth)

    if not na(srPh) or not na(srPl)
        for i = 0 to array.size(srAreaBoxes) - 1
            array.set(srLevelsClone, i, array.get(srLevels, i))

    for i = 0 to array.size(srAreaBoxes) - 1
        box.delete(array.get(srAreaBoxes, i))
        box.delete(array.get(srValBoxes, i))

        if not na(array.get(srLevelsClone, i))
            color lineColor = close >= array.get(srLevelsClone, i) ? srSupportColor : srResistanceColor
            float level = array.get(srLevelsClone, i)
            float top = level + srZoneWidth
            float bot = level - srZoneWidth
            bool topExisted = math.abs(level - srHighestPh) < srZoneWidth
            bool botExisted = math.abs(level - srLowestPl) < srZoneWidth

            if (not topExisted and not botExisted)
                array.set(srAreaBoxes, i, box.new(barIdx, top, barIdx, bot, extend=extend.both, bgcolor=lineColor, border_width=0))
                array.set(srValBoxes, i, buildSrValBox(top, bot, level, srZoneWidth))

//-----------------------------------------------------------------------------
// Signals
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
bool    sigarrows   = input.bool(true, title="Signal Arrows")
string  sigt        = input.string("+/-", title="Signal Type", options=["Current Momentum", "Sum of Change", "+/-", "Rising/Falling", "Crossed Zero", "Basis Line Momentum", "Divergence", "Combo"])
string  custsqz     = input.string("6 Dots", title="Squeeze Signal Length", options=["End of Early Signal", "6 Dots", "12 Dots", "End of Squeeze", "Custom"])
int     sqzsig      = input.int(8, title="Custom Squeeze Signal Duration")
int     sumofc      = input.int(20, title="Sum of Change Length")
int     entrysmooth = input.int(7, title="Early Entry Smoothing Period")
int     exitsmooth  = input.int(9, title="Early Exit Smoothing Period")

//-----------------------------------------------------------------------------
// Values
//-----------------------------------------------------------------------------
// Squeeze Variables
float   bb          = 2.0
float   kch         = 1.0
float   kcm         = 1.5
float   kcl         = 2.0
float   sqz         = ta.linreg(close - math.avg(math.avg(ta.highest(high, 20), ta.lowest(low, 20)), ta.ema(close, 20)), 20, 0)
float   momo        = ta.linreg((sqz-sqz[1]), exitsmooth, 0)
// Basis Line
float   basis       = ta.sma(close,20)
// Bollinger Bands
float   dev         = bb * ta.stdev(close, 20)
float   upperbb     = basis + dev
float   lowerbb     = basis - dev
// Keltner Channels Range
float   kcrange     = ta.sma(ta.tr, 20)
// Keltner Channels High
float   kcuph       = basis + kcrange * kch
float   kcdnh       = basis - kcrange * kch
// Keltner Channels Mid
float   kcupm       = basis + kcrange * kcm
float   kcdnm       = basis - kcrange * kcm
// Keltner Channels Low
float   kcupl       = basis + kcrange * kcl
float   kcdnl       = basis - kcrange * kcl
// Early Signal Variables
float   bkhigh      = upperbb - kcuph
float   bkmid       = upperbb - kcupm
float   bklow       = upperbb - kcupl
float   bkhema      = ta.ema(bkhigh,entrysmooth)
float   bkmema      = ta.ema(bkmid,entrysmooth)
float   bklema      = ta.ema(bklow,entrysmooth)
// Each Squeeze Type
bool    lowsqz      = upperbb < kcupl and lowerbb > kcdnl
bool    midsqz      = upperbb < kcupm and lowerbb > kcdnm
bool    highsqz     = upperbb < kcuph and lowerbb > kcdnh
// BB and KC Signal Formulas
bool    ksm         = close < kcdnm or close > kcupm
bool    ksh         = close < kcdnh or close > kcuph
bool    ksl         = close < kcdnl or close > kcupl
bool    bbsmh       = close < lowerbb or close > upperbb
// Early Entry Candle Conditions
bool    earlyentrymid   = bkmid > bkmema and bkmid <=0
bool    earlyentryhigh  = bkhigh > bkhema and bkhigh <=0
bool    earlyentrylow   = bklow > bklema and bklow <=0
bool    endofmid        = ta.barssince(earlyentrymid) == 1
bool    endofhigh       = ta.barssince(earlyentryhigh) == 1
bool    endoflow        = ta.barssince(earlyentrylow) == 1
// Individual KC Formulas
barssinceKsl = ta.barssince(ksl)
barssinceKsm = ta.barssince(ksm)
barssinceKsh = ta.barssince(ksh)
bool    kcllong     = ksl and lowsqz[1] and close > basis and (barssinceKsl[1] > 20)
bool    kclshort    = ksl and lowsqz[1] and close < basis and (barssinceKsl[1] > 20)
bool    kcmlong     = ksm and midsqz[1] and close > basis and (barssinceKsm[1] > 20)
bool    kcmshort    = ksm and midsqz[1] and close < basis and (barssinceKsm[1] > 20)
bool    kchlong     = ksh and highsqz[1] and close > basis and (barssinceKsh[1] > 20)
bool    kchshort    = ksh and highsqz[1] and close < basis and (barssinceKsh[1] > 20)
// Individual BB Formulas
barssinceBbSmh = ta.barssince(bbsmh)
bool    bbllong     = bbsmh and lowsqz[1] and close > basis and (barssinceBbSmh[1] > 20)
bool    bblshort    = bbsmh and lowsqz[1] and close < basis and (barssinceBbSmh[1] > 20)
bool    bbmlong     = bbsmh and midsqz[1] and close > basis and (barssinceBbSmh[1] > 20)
bool    bbmshort    = bbsmh and midsqz[1] and close < basis and (barssinceBbSmh[1] > 20)
bool    bbhlong     = bbsmh and highsqz[1] and close > basis and (barssinceBbSmh[1] > 20)
bool    bbhshort    = bbsmh and highsqz[1] and close < basis and (barssinceBbSmh[1] > 20)
// Signal Types
bool  cmom          = sigt == "Current Momentum"
bool  soc           = sigt == "Sum of Change"
bool  momom         = sigt == "+/-"
bool  rf            = sigt == "Rising/Falling"
bool  czero         = sigt == "Crossed Zero"
bool  blma          = sigt == "Basis Line Momentum"
bool  diverg        = sigt == "Divergence"
bool  combo         = sigt == "Combo"
// Signal Durations
bool  sigeoe        = custsqz == "End of Early Signal"
bool  sigreg        = custsqz == "6 Dots"
bool  sigpro        = custsqz == "12 Dots"
bool  sigeos        = custsqz == "End of Squeeze"
bool  sigcus        = custsqz == "Custom"
// Sum of Change
float   change     = math.sum((sqz-sqz[1]),sumofc)
bool    changel    = change > 0
bool    changes    = change < 0
// Basis Line Filter
bool    bbmal       = close >= basis
bool    bbmas       = close < basis
// Basic Signal Conditions
bool    sc1         = sqz > 0
bool    sc2         = sqz < 0
// Rising/Falling Conditions
bool    sqzlongreg  = sqz > sqz[1] and sqz[1] > sqz[2] and sqz[2] > sqz[3] and sqz[3] > sqz[4] and sqz[4] > sqz[5] and sqz[5] > sqz[6]
bool    sqzshortreg = sqz < sqz[1] and sqz[1] < sqz[2] and sqz[2] < sqz[3] and sqz[3] < sqz[4] and sqz[4] < sqz[5] and sqz[5] < sqz[6]
// Zero Line Conditions
bool    sqzzerolong = sqz > 0 and sqz[6] < 0
bool    sqzzeroshort= sqz < 0 and sqz[6] > 0
// Divergence Formula
ftf(_src) => _src[4] < _src[2] and _src[3] < _src[2] and _src[2] > _src[1] and _src[2] > _src[0]
fbf(_src) => _src[4] > _src[2] and _src[3] > _src[2] and _src[2] < _src[1] and _src[2] < _src[0]
ffract(_src) => ftf(_src) ? 1 : fbf(_src) ? -1 : 0
// Divergence Variables
float   fractaltop = ffract(sqz) > 0 ? sqz[2] : na
float   fractalbot = ffract(sqz) < 0 ? sqz[2] : na
float   high_prev  = ta.valuewhen(not na(fractaltop), sqz[2], 1) 
float   high_price = ta.valuewhen(not na(fractaltop), high[2], 1)
float   low_prev   = ta.valuewhen(not na(fractalbot), sqz[2], 1) 
float   low_price  = ta.valuewhen(not na(fractalbot), low[2], 1)
bool    regbeardiv = not na(fractaltop) and high[2] > high_price and sqz[2] < high_prev
bool    regbulldiv = not na(fractalbot) and low[2] < low_price and sqz[2] > low_prev
// Current Momentum
bool    cmolong         = sqz > sqz[1]
bool    cmoshort        = sqz <= sqz[1]
// False Signals
bool    lsf             = lowsqz == false
bool    msf             = midsqz == false
bool    hsf             = highsqz == false
// End of Early Signal
bool    eoel            = sigeoe ? endoflow : false
bool    eoem            = sigeoe ? endofmid : false
bool    eoeh            = sigeoe ? endofhigh : false

barssinceLsf = ta.barssince(lsf)
barssinceMsf = ta.barssince(msf)
barssinceHsf = ta.barssince(hsf)
barssinceLowSqz = ta.barssince(lowsqz)
barssinceMidSqz = ta.barssince(midsqz)
barssinceHighSqz = ta.barssince(highsqz)

// Dot Count Regular
bool    ll6             = sigreg ? lowsqz and (barssinceLsf == 6) : false
bool    ml6             = sigreg ? midsqz and (barssinceMsf == 6) : false
bool    hl6             = sigreg ? highsqz and (barssinceHsf == 6) : false
// Dot Count Prolonged
bool    ll12            = sigpro ? lowsqz and (barssinceLsf == 12) : false
bool    ml12            = sigpro ? midsqz and (barssinceMsf == 12) : false
bool    hl12            = sigpro ? highsqz and (barssinceHsf == 12) : false
// End Of Squeeze
bool    eol             = sigeos ? lsf and (barssinceLowSqz == 1) : false
bool    eom             = sigeos ? msf and (barssinceMidSqz == 1) : false
bool    eoh             = sigeos ? hsf and (barssinceHighSqz == 1) : false
// Custom Squeeze
bool    custl           = sigcus ? lowsqz and (barssinceLsf == sqzsig) : false
bool    custm           = sigcus ? midsqz and (barssinceMsf == sqzsig) : false
bool    custh           = sigcus ? highsqz and (barssinceHsf == sqzsig) : false
// Dot Count Signals
bool    squeezesignall  = eoel or ll6 or ll12 or eol or custl
bool    squeezesignalm  = eoem or ml6 or ml12 or eom or custm
bool    squeezesignalh  = eoeh or hl6 or hl12 or eoh or custh
// Sum of Change Formulas
bool    llchg           = squeezesignall and changel
bool    lschg           = squeezesignall and changes
bool    mlchg           = squeezesignalm and changel
bool    mschg           = squeezesignalm and changes
bool    hlchg           = squeezesignalh and changel
bool    hschg           = squeezesignalh and changes
// Basic Signal Formulas
bool    llbsc           = squeezesignall and sc1
bool    lsbsc           = squeezesignall and sc2
bool    mlbsc           = squeezesignalm and sc1
bool    msbsc           = squeezesignalm and sc2
bool    hlbsc           = squeezesignalh and sc1
bool    hsbsc           = squeezesignalh and sc2
// Rising/Falling Signal Formulas
bool    llrf            = squeezesignall and sqzlongreg
bool    lsrf            = squeezesignall and sqzshortreg
bool    mlrf            = squeezesignalm and sqzlongreg
bool    msrf            = squeezesignalm and sqzshortreg
bool    hlrf            = squeezesignalh and sqzlongreg
bool    hsrf            = squeezesignalh and sqzshortreg
// Zero Line Signal Formulas
bool    llz             = squeezesignall and sqzzerolong
bool    lsz             = squeezesignall and sqzzeroshort
bool    mlz             = squeezesignalm and sqzzerolong
bool    msz             = squeezesignalm and sqzzeroshort
bool    hlz             = squeezesignalh and sqzzerolong
bool    hsz             = squeezesignalh and sqzzeroshort
// Basis Line Signal Formulas
bool    llbl            = squeezesignall and bbmal
bool    lsbl            = squeezesignall and bbmas
bool    mlbl            = squeezesignalm and bbmal
bool    msbl            = squeezesignalm and bbmas
bool    hlbl            = squeezesignalh and bbmal
bool    hsbl            = squeezesignalh and bbmas
// Divergence Signal Formulas
bool    lldv            = squeezesignall and regbulldiv
bool    lsdv            = squeezesignall and regbeardiv
bool    mldv            = squeezesignalm and regbulldiv
bool    msdv            = squeezesignalm and regbeardiv
bool    hldv            = squeezesignalh and regbulldiv
bool    hsdv            = squeezesignalh and regbeardiv
// Current Momentum Signal Formulas
bool    llcm            = squeezesignall and cmolong
bool    lscm            = squeezesignall and cmoshort
bool    mlcm            = squeezesignalm and cmolong
bool    mscm            = squeezesignalm and cmoshort
bool    hlcm            = squeezesignalh and cmolong
bool    hscm            = squeezesignalh and cmoshort
// Combo Scoring
int     basicscore      = sc1 ? 6 : -6
int     rfscore         = sqzlongreg ? 3 : sqzshortreg ? -3 : 0
int     zlscore         = sqzzerolong ? 4 : sqzzeroshort ? -4 : 0
int     bbmascore       = bbmal ? 3 : bbmas ? -3 : 0
int     divscore        = regbulldiv ? 3 : regbeardiv ? -3 : 0
int     sumscore        = changel ? 4 : -4
int     currentmo       = cmolong ? 3 : -3
int     comboscore      = basicscore + rfscore + zlscore + bbmascore + divscore + sumscore + currentmo
bool    longcombo       = comboscore > 0
bool    shortcombo      = comboscore < 0
// Combo Signal Formulas
bool    llcombo         = squeezesignall and longcombo
bool    lscombo         = squeezesignall and shortcombo
bool    mlcombo         = squeezesignalm and longcombo
bool    mscombo         = squeezesignalm and shortcombo
bool    hlcombo         = squeezesignalh and longcombo
bool    hscombo         = squeezesignalh and shortcombo
// Final Signals
bool    longlow         = (soc and llchg) or (momom and llbsc) or (rf and llrf) or (czero and llz) or (blma and llbl) or (diverg and lldv) or (llcm and cmom) or (combo and llcombo)
bool    shortlow        = (soc and lschg) or (momom and lsbsc) or (rf and lsrf) or (czero and lsz) or (blma and lsbl) or (diverg and lsdv) or (lscm and cmom) or (combo and lscombo)
bool    longmid         = (soc and mlchg) or (momom and mlbsc) or (rf and mlrf) or (czero and mlz) or (blma and mlbl) or (diverg and mldv) or (mlcm and cmom) or (combo and mlcombo)
bool    shortmid        = (soc and mschg) or (momom and msbsc) or (rf and msrf) or (czero and msz) or (blma and msbl) or (diverg and msdv) or (mscm and cmom) or (combo and mscombo)
bool    longhigh        = (soc and hlchg) or (momom and hlbsc) or (rf and hlrf) or (czero and hlz) or (blma and hlbl) or (diverg and hldv) or (hlcm and cmom) or (combo and hlcombo)
bool    shorthigh       = (soc and hschg) or (momom and hsbsc) or (rf and hsrf) or (czero and hsz) or (blma and hsbl) or (diverg and hsdv) or (hscm and cmom) or (combo and hscombo)

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
plotshape(sigarrows ? (longhigh ? false : longmid ? false : longlow ? longlow : false) : false, color=color.new(RED_COLOR, 20), style=shape.triangleup, location=location.belowbar, size=size.tiny, title="Low Squeeze Signal - Long", force_overlay=true)
plotshape(sigarrows ? (shorthigh ? false : shortmid ? false : shortlow ? shortlow : false) : false, color=color.new(RED_COLOR, 20), style=shape.triangledown, location=location.abovebar, size=size.tiny, title="Low Squeeze Signal - Short", force_overlay=true)
plotshape(sigarrows ? (longhigh ? false : longmid ? longmid : false) : false, color=color.new(PINK_COLOR, 20), style=shape.triangleup, location=location.belowbar, size=size.tiny, title="Mid Squeeze Signal - Long", force_overlay=true)
plotshape(sigarrows ? (shorthigh ? false : shortmid ? shortmid : false) : false, color=color.new(PINK_COLOR, 20), style=shape.triangledown, location=location.abovebar, size=size.tiny, title="Mid Squeeze Signal - Short", force_overlay=true)
plotshape(sigarrows ? (longhigh ? longhigh : false) : false, color=color.new(PURPLE_COLOR, 20), style=shape.triangleup, location=location.belowbar, size=size.small, title="High Squeeze Signal - Long", force_overlay=true)
plotshape(sigarrows ? (shorthigh ? shorthigh : false) : false, color=color.new(PURPLE_COLOR, 20), style=shape.triangledown, location=location.abovebar, size=size.small, title="High Squeeze Signal - Short", force_overlay=true)

//------------------------------------------------------------------------------