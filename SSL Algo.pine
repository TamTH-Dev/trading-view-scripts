// Â© tamth_
// @version=5
indicator("SSL Algo", shorttitle = "SSL Algo", overlay = true, max_bars_back = 5000, max_lines_count = 500, max_boxes_count = 500, max_labels_count = 500)


//-----------------------------------------------------------------------------*
//  Constants
//-----------------------------------------------------------------------------{
color TRANSPARENT_COLOR = color.new(#000000, 100)
color WHITE_COLOR = #EFEFEF
color RED_COLOR = #E81E61
color AQUA_COLOR = #04ADBF
color YELLOW_COLOR = #E8D81E
color PURPLE_COLOR = #764AF1
color ORANGE_COLOR = #E8AF1E
color GREEN_COLOR = #1EE8A3
color BLUE_COLOR = #1E53E8
color PINK_COLOR = #C31EE8
color LIGHT_GRAY_COLOR = #364156
color DARK_GRAY_COLOR = #212d40


//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Variables
//-----------------------------------------------------------------------------{
series int barIdx = bar_index
series bool confirmed = barstate.isconfirmed

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Methods
//-----------------------------------------------------------------------------{
debug(simple string txt) =>
    // Create label on the first bar
    var label = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    // On next bars, update the label"s x and y position, and the text it displays
    label.set_xy(label, barIdx, ta.highest(10)[1])
    label.set_text(label, txt)


//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
bool baselineShowed = input.bool(true, title = "Show Baseline")
bool ssl1Showed = input.bool(false, title = "Show SSL1")
bool atrShowed = input.bool(false, title = "Show ATR bands")
int atrLen = input.int(14, title = "ATR Period")
float atrMult = input.float(1, title = "ATR Multiplier", step = 0.1)
string atrSmooth = input.string("WMA", title = "ATR Smooth", options = ["RMA", "SMA", "EMA", "WMA"])

string ssl1Type = input.string("HMA", title = "SSL1 / Baseline Type", options = ["SMA", "EMA", "LSMA", "WMA", "TMA", "HMA", "JMA"])
int ssl1Len = input.int(60, title = "SSL1 / Baseline Length")

string ssl2Type = input.string("JMA", title = "SSL2 / Continuation Type", options = ["SMA", "EMA", "WMA", "TMA", "HMA", "JMA"])
int ssl2Len = input.int(5, title = "SSL 2 Length")

string ssl3Type = input.string("HMA", title = "EXIT Type", options = ["LSMA", "TMA", "HMA", "JMA"])
int ssl3Len = input.int(15, title = "EXIT Length")
series float ssl3Src = input(close, title = "Source")

int jurikPhase = input.int(3, title = "Jurik (JMA) Only - Phase")
int jurikPower = input.int(1, title = "Jurik (JMA) Only - Power")

float baseChannelMult = input.float(0.15, title = "Base Channel Multiplier", step = 0.05)

float atrCrit = input.float(0.9, title = "Continuation ATR Criteria", step = 0.1)

//-----------------------------------------------------------------------------*
// Methods
//-----------------------------------------------------------------------------{
smoothAtr(src, atrLen) => 
    if atrSmooth == "RMA"
        ta.rma(src, atrLen)
    else
        if atrSmooth == "SMA"
            ta.sma(src, atrLen)
        else
            if atrSmooth == "EMA"
                ta.ema(src, atrLen)
            else
                ta.wma(src, atrLen)


getMa(type, src, len) =>
    float result = 0
    if type=="TMA"
        result := ta.sma(ta.sma(src, math.ceil(len / 2)), math.floor(len / 2) + 1)
    if type=="LSMA"
        result := ta.linreg(src, len, 0)
    if type=="SMA"
        result := ta.sma(src, len)
    if type=="EMA"
        result := ta.ema(src, len)
    if type=="WMA"
        result := ta.wma(src, len)
    if type=="HMA"
        result := ta.wma(2 * ta.wma(src, len / 2) - ta.wma(src, len), math.round(math.sqrt(len)))
    if type=="JMA"
        float phaseRatio = jurikPhase < -100 ? 0.5 : jurikPhase > 100 ? 2.5 : jurikPhase / 100 + 1.5
        float beta = 0.45 * (len - 1) / (0.45 * (len - 1) + 2)
        float alpha = math.pow(beta, jurikPower)
        var jma = 0.0
        var e0 = 0.0
        e0 := (1 - alpha) * src + alpha * nz(e0[1])
        var e1 = 0.0
        e1 := (src - e0) * (1 - beta) + beta * nz(e1[1])
        var e2 = 0.0
        e2 := (e0 + phaseRatio * e1 - nz(jma[1])) * math.pow(1 - alpha, 2) + math.pow(alpha, 2) * nz(e2[1])
        jma := e2 + nz(jma[1])
        result := jma
    result
    
//-----------------------------------------------------------------------------*
// Get Values
//-----------------------------------------------------------------------------{
series float smoothedAtrLen = smoothAtr(ta.tr(true), atrLen)
series float upperBand = smoothedAtrLen * atrMult + close
series float lowerBand = close - smoothedAtrLen * atrMult

series float ssl1High = getMa(ssl1Type, high, ssl1Len)
series float ssl1Low = getMa(ssl1Type, low, ssl1Len)
series float ssl2High = getMa(ssl2Type, high, ssl2Len)
series float ssl2Low = getMa(ssl2Type, low, ssl2Len)

var hlv1 = int(na)
hlv1 := close > ssl1High ? 1 : close < ssl1Low ? -1 : hlv1[1]
sslDown1 = hlv1 < 0 ? ssl1High : ssl1Low

var hlv2 = int(na)
hlv2 := close > ssl2High ? 1 : close < ssl2Low ? -1 : hlv2[1]
sslDown2 = hlv2 < 0 ? ssl2High : ssl2Low

series float exitPointHigh = getMa(ssl3Type, high, ssl3Len)
series float exitPointLow = getMa(ssl3Type, low, ssl3Len)
var hlv3 = int(na)
hlv3 := close > exitPointHigh ? 1 : close < exitPointLow ? -1 : hlv3[1]
series float SSLExitPoint = hlv3 < 0 ? exitPointHigh : exitPointLow
bool hasBuySignal = barstate.isconfirmed and ta.crossover(close, SSLExitPoint)
bool hasSellSignal = barstate.isconfirmed and ta.crossover(SSLExitPoint, close)

series float bbmc = getMa(ssl1Type, close, ssl1Len)
series float keltma = getMa(ssl1Type, ssl3Src, ssl1Len)
series float ssl1Range = ta.ema(ta.tr, ssl1Len)
series float upperk = keltma + ssl1Range * baseChannelMult
series float lowerk = keltma - ssl1Range * baseChannelMult

color baseColor = close > upperk ? AQUA_COLOR : close < lowerk ? RED_COLOR : LIGHT_GRAY_COLOR
color ssl1Color = close > sslDown1 ? AQUA_COLOR : close < sslDown1 ? RED_COLOR : na

series float upperHalf = smoothedAtrLen * atrCrit + close
series float lowerHalf = close - smoothedAtrLen * atrCrit
bool hasAtrSellSignal = upperHalf > sslDown2 and close < bbmc and close < sslDown2
bool hasAtrBuySignal = lowerHalf < sslDown2 and close > bbmc and close > sslDown2
color atrColor = hasAtrBuySignal ? YELLOW_COLOR : hasAtrSellSignal ? PURPLE_COLOR : color.new(WHITE_COLOR, 20)

//-----------------------------------------------------------------------------*
// Plots
//-----------------------------------------------------------------------------{
plotshape(hasBuySignal, title = "Buy Signals", style = shape.circle, location = location.belowbar, color = AQUA_COLOR, size = size.tiny, display = display.pane)
plotshape(hasSellSignal, title = "Sell Signals", style = shape.circle, location = location.abovebar, color = WHITE_COLOR, size = size.tiny, display = display.pane)
plot(baselineShowed ? bbmc : na, title = 'MA Baseline', color = color.new(baseColor, 20), linewidth = 3, display = display.pane)
plot(ssl1Showed ? sslDown1 : na, title = "SSL1", color = ssl1Color, linewidth = 3, display = display.pane)
var upChannel = plot(baselineShowed ? upperk : na, title = "Baseline Upper Channel", color = color.new(baseColor, 20), display = display.pane)
var lowChannel = plot(baselineShowed ? lowerk : na, title = "Basiline Lower Channel", color = color.new(baseColor, 20), display = display.pane)
fill(upChannel, lowChannel, color = color.new(baseColor, 80))

plot(atrShowed ? sslDown2 : na, title = "SSL2", linewidth = 2, color = atrColor, style = plot.style_circles, display = display.pane)
plot(atrShowed ? upperBand : na, "+ATR", color = LIGHT_GRAY_COLOR, display = display.pane)
plot(atrShowed ? lowerBand : na, "-ATR", color = LIGHT_GRAY_COLOR, display = display.pane)