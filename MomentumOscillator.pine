// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© tamth_

//@version=6
indicator("Momentum Oscillator", overlay = false, precision = 2)

//-----------------------------------------------------------------------------*
//  Constants
//-----------------------------------------------------------------------------{
color TRANSPARENT_COLOR = color.new(#000000, 100)
color WHITE_COLOR = #ffffff
color BLACK_COLOR = #000000
color RED_COLOR = #ef476f
color ORANGE_COLOR = #fb8500
color YELLOW_COLOR = #ffd166
color GREEN_COLOR = #06d6a0
color AQUA_COLOR = #00b4d8
color BLUE_COLOR = #118ab2
color PURPLE_COLOR = #9381ff
color PINK_COLOR = #f7aef8
color LIGHT_GRAY_COLOR = #364156
color DARK_GRAY_COLOR = #212d40
color TEXT_COLOR = #ced4da

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Variables
//-----------------------------------------------------------------------------{
series int barIdx = bar_index
length = input.int(20, "TTM Squeeze Length")

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Methods
//-----------------------------------------------------------------------------{
debug(simple string txt) =>
    // Create label on the first bar
    var label = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    // On next bars, update the label"s x and y position, and the text it displays
    label.set_xy(label, barIdx, ta.highest(10)[1])
    label.set_text(label, txt)

getPrdWidthByPerc(int prd, float perc) => (ta.highest(prd) - ta.lowest(prd)) * perc / 100

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Bollinger Bands
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
// BOLLINGER BANDS
bbMult = input.float(2.0, "Bollinger Band STD Multiplier")
bbBasis = ta.sma(close, length)
dev = bbMult * ta.stdev(close, length)
bbUpper = bbBasis + dev
bbLower = bbBasis - dev

//-----------------------------------------------------------------------------}

//-----------------------------------------------------------------------------*
// Keltner Channels
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
kcMultHigh = input.float(1.0, "Keltner Channel #1")
kcMultMid = input.float(1.5, "Keltner Channel #2")
kcMultLow = input.float(2.0, "Keltner Channel #3")
kcBasis = ta.sma(close, length)
devKc = ta.sma(ta.tr, length)
kcUpperHigh = kcBasis + devKc * kcMultHigh
kcLowerHigh = kcBasis - devKc * kcMultHigh
kcUpperMid = kcBasis + devKc * kcMultMid
kcLowerMid = kcBasis - devKc * kcMultMid
kcUpperLow = kcBasis + devKc * kcMultLow
kcLowerLow = kcBasis - devKc * kcMultLow

//-----------------------------------------------------------------------------}

//-----------------------------------------------------------------------------*
// Calculation
//-----------------------------------------------------------------------------*
isNoSqz = bbLower < kcLowerLow or bbUpper > kcUpperLow
isLowSqz = bbLower >= kcLowerLow or bbUpper <= kcUpperLow
isMidSqz = bbLower >= kcLowerMid or bbUpper <= kcUpperMid
isHighSqz = bbLower >= kcLowerHigh or bbUpper <= kcUpperHigh

mom = ta.linreg(close - math.avg(math.avg(ta.highest(high, length), ta.lowest(low, length)), ta.sma(close, length)), length, 0)

iff1 = mom > nz(mom[1]) ? AQUA_COLOR : BLUE_COLOR
iff2 = mom < nz(mom[1]) ? PURPLE_COLOR : PINK_COLOR
momColor = mom > 0 ? iff1 : iff2

sqzColor = isHighSqz ? ORANGE_COLOR : isMidSqz ? RED_COLOR : isLowSqz ? LIGHT_GRAY_COLOR : GREEN_COLOR

//-----------------------------------------------------------------------------}

//-----------------------------------------------------------------------------*
// Render
//-----------------------------------------------------------------------------*
plot(mom, title = "Momentum", color = momColor, style = plot.style_histogram, linewidth = 3)
plot(0, title = "Squeeze", color = sqzColor, style = plot.style_circles, linewidth = 2)

//-----------------------------------------------------------------------------}