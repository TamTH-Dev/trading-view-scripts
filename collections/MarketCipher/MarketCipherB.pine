// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© tamth_

// @version=6
indicator("Market Cipher B", overlay = false)


//-----------------------------------------------------------------------------
//  Constants
//-----------------------------------------------------------------------------
// Colors
color TRANSPARENT_COLOR = #ffffff00
color WHITE_COLOR       = #dee2e6
color BLACK_COLOR       = #000000
color RED_COLOR         = #F72585
color ORANGE_COLOR      = #fb5607
color YELLOW_COLOR      = #ffbe0b
color GREEN_COLOR       = #2a9d8f
color AQUA_COLOR        = #4CC9F0
color BLUE_COLOR        = #4361ee
color PURPLE_COLOR      = #3F37C9
color PINK_COLOR        = #B5179E
color LIGHT_GRAY_COLOR  = #364156
color DARK_GRAY_COLOR   = #212d40
color TEXT_COLOR        = #ced4da

//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// Common Functions
//-----------------------------------------------------------------------------
debug(simple string txt) =>
    // Create label on the first bar
    var label = label.new(bar_index, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    // On next bars, update the label"s x and y position, and the text it displays
    label.set_xy(label, bar_index, ta.highest(10)[1])
    label.set_text(label, txt)


//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
string thresholdGrp = "Threshold"
bool thresholdShowed = input.bool(true, title = "Show", group = thresholdGrp)
int overboughtThreshold = input.int(60, title = "Overbought Threshold", group = thresholdGrp)
int oversoldThreshold = input.int(-60, title = "Oversold Threshold", group = thresholdGrp)
string wtGrp = "Waves Trend"
bool wtShowed = input.bool(true, title = "Show", group = wtGrp)
int wtChlPrd = input.int(9, title = "Channel Period", group = wtGrp)
int wtAvgPrd = input.int(12, title = "Average Period", group = wtGrp)
float wtMaSrc = input.source(hlc3, title = "MA Source", group = wtGrp)
int wtMaLen = input.int(3, title = "MA Length", group = wtGrp)
bool wtDivShowed = input.bool(false, title = "Show Divergence", group = wtGrp)
int wtLongBearishDivLevel = input.int(45, title = "Long Bearish Divergence Level", group = wtGrp)
int wtLongBullishDivLevel = input.int(-65, title = "Long Bullish Divergence Level", group = wtGrp)
int wtShortBrearishDivLevel = input.int(15, title = "Short Bearish Divergence Level", group = wtGrp)
int wtShortBullishDivLevel = input.int(-40, title = "Short Bullish Divergence Level", group = wtGrp)
string mfoGrp = "MFO"
bool mfoShowed = input.bool(true, title = "Show", group = mfoGrp)
bool mfoBarShowed = input.bool(false, title = "Support Bar", group = mfoGrp)
int mfoPrd = input.int(60, title = "Period", group = mfoGrp)
int mfoMult = input.int(150, title = "Area Multiplier", group = mfoGrp)
string rsiGrp = "RSI"
bool rsiShowed = input.bool(true, title = "Show", group = rsiGrp)
int rsiPrd = input.int(40, title = "Period", group = rsiGrp)
string stochRsiGrp = "Stochastic RSI"
bool stochRsiShowed = input.bool(true, title = "Show", group = stochRsiGrp)
int stochRsiPrd = input.int(81, title = "Period", group = stochRsiGrp)
string vwapGrp = "VWAP"
bool vwapShowed = input.bool(true, title = "Show", group = vwapGrp)

//-----------------------------------------------------------------------------
// Functions
//-----------------------------------------------------------------------------
getTopFractal(series float src) => src[4] < src[2] and src[3] < src[2] and src[2] > src[1] and src[2] > src[0]
getBotFractal(series float src) => src[4] > src[2] and src[3] > src[2] and src[2] < src[1] and src[2] < src[0]
fractalize(series float src) =>
    series bool isBotFractal = getBotFractal(src)
    series bool isTopFractal = getTopFractal(src)
    isTopFractal ? 1 : isBotFractal ? -1 : 0

getDivPoints(series float src, int topLimit, int botLimit) =>
    series bool isTopFractal = not na(fractalize(src) > 0 and src[2] >= topLimit ? src[2] : na)
    series bool isBotFractal = not na(fractalize(src) < 0 and src[2] <= botLimit ? src[2] : na)
    float highPrev = ta.valuewhen(isTopFractal, src[2], 0)[2]
    float highPrice = ta.valuewhen(isTopFractal, high[2], 0)[2]
    float lowPrev = ta.valuewhen(isBotFractal, src[2], 0)[2]
    float lowPrice = ta.valuewhen(isBotFractal, low[2], 0)[2]
    bool isBearish = isTopFractal and high[2] > highPrice and src[2] < highPrev
    bool isBullish = isBotFractal and low[2] < lowPrice and src[2] > lowPrev
    [isTopFractal, isBotFractal, lowPrev, isBearish, isBullish]

getWtAndVwap() =>
    float src = request.security(syminfo.tickerid, timeframe.period, wtMaSrc)
    float esa = ta.ema(src, wtChlPrd)
    float d = ta.ema(math.abs(src - esa), wtChlPrd)
    float ci = (src - esa) / (0.015 * d)
    float leadingWt = ta.ema(ci, wtAvgPrd)
    float laggingWt = ta.sma(leadingWt, wtMaLen)
    float vwap = leadingWt - laggingWt
    [leadingWt, laggingWt, vwap]

getHaVal(series float src) => request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, src)

getMfo() =>
    series float haOpen = getHaVal(open)
    series float haClose = getHaVal(close)
    series float haHigh = getHaVal(high)
    series float haLow = getHaVal(low)
    mfo = ta.sma((haClose - haOpen) / (haHigh - haLow) * mfoMult, mfoPrd)

getRsi(series float _close, series float _high, series float _low) =>
    ta.sma(ta.stoch(_close, _high, _low, rsiPrd), 2)

getStochRsi(series float _close, series float _high, series float _low) =>
    ta.sma(ta.stoch(_close, _high, _low, stochRsiPrd), 2)

//-----------------------------------------------------------------------------
// Get values
//-----------------------------------------------------------------------------
series float _close = request.security(syminfo.tickerid, timeframe.period, close)
series float _high = request.security(syminfo.tickerid, timeframe.period, high)
series float _low = request.security(syminfo.tickerid, timeframe.period, low)
float rsi = getRsi(_close, _high, _low)
float stochRsi = getStochRsi(_close, _high, _low)
float mfo = getMfo()
[leadingWt, laggingWt, vwap] = getWtAndVwap()
[wtLongTopFractal, wtLongBotFractal, wtLongLowPrev, isWtLongBearishDiv, isWtLongBullishDiv] = getDivPoints(laggingWt, wtLongBearishDivLevel, wtLongBullishDivLevel)
[wtShortTopFractal, wtShortBotFractal, wtShortLowPrev, isWtShortBearishDiv, isWtShortBullishDiv] =  getDivPoints(laggingWt, wtShortBrearishDivLevel, wtShortBullishDivLevel)

//-----------------------------------------------------------------------------
// Render values
//-----------------------------------------------------------------------------
plot(thresholdShowed ? overboughtThreshold : na, title = "Overbought Threshold", color = color.new(GREEN_COLOR, 60), display = display.pane, linewidth = 4)
plot(thresholdShowed ? oversoldThreshold : na, title = "Oversold Threshold", color = color.new(RED_COLOR, 60), display = display.pane, linewidth = 4)

var mfoBarTopLine = plot(mfoShowed and mfoBarShowed ? -100 : na, title = "MFO Bar", color = color.new(WHITE_COLOR, 100), editable = false, display = display.pane)
var mfoBarBotLine = plot(mfoShowed and mfoBarShowed ? -105 : na, title = "MFO Bar", color = color.new(WHITE_COLOR, 100), editable = false, display = display.pane)
fill(mfoBarTopLine, mfoBarBotLine, title = "MFO Bar", color = mfo > 0 ? color.new(GREEN_COLOR, 40) : color.new(RED_COLOR, 40))

plot(wtShowed ? leadingWt : na, title = "Leading Wave Trend", color = LIGHT_GRAY_COLOR, linewidth = 1, style = plot.style_area)
plot(wtShowed ? laggingWt : na, title = "Lagging Wave Trend", color = color.new(DARK_GRAY_COLOR, 50), linewidth = 1, style = plot.style_area)

plot(vwapShowed ? vwap : na, title = "VWAP", color = color.new(YELLOW_COLOR, 40), style = plot.style_area)

plot(mfoShowed ? mfo : na, title = "MFO", color = mfo > 0 ? color.new(GREEN_COLOR, 60) : color.new(RED_COLOR, 60), linewidth = 2, style = plot.style_area)

plot(0, title = "Zero Line", color = color.new(WHITE_COLOR, 50), display = display.pane)

plot(ta.crossover(leadingWt, laggingWt) ? laggingWt : na, title = "Buy Signal", color = GREEN_COLOR, linewidth = 2, style = plot.style_circles, display = display.pane)
plot(ta.crossunder(leadingWt, laggingWt) ? laggingWt : na, title = "Sell Signal", color = RED_COLOR, linewidth = 2, style = plot.style_circles, display = display.pane)

color wtLongBearishDivColor = wtDivShowed and isWtLongBearishDiv ? RED_COLOR : na
color wtLongBullishDivColor = wtDivShowed and isWtLongBullishDiv ? GREEN_COLOR : na
color wtShortBearishDivColor = wtDivShowed and isWtShortBearishDiv ? color.new(RED_COLOR, 50) : na
color wtShortBullishDivColor = wtDivShowed and isWtShortBullishDiv ? color.new(GREEN_COLOR, 50) : na
plot(series = wtLongTopFractal ? laggingWt[2] : na, title = "Wave Trend Long Bearish Divergence", color = wtLongBearishDivColor, linewidth = 2, offset = -2, display = display.pane)
plot(series = wtLongBotFractal ? laggingWt[2] : na, title = "Wave Trend Long Bullish Divergence", color = wtLongBullishDivColor, linewidth = 2, offset = -2, display = display.pane)
plot(series = wtShortTopFractal ? laggingWt[2] : na, title = "Wave Trend Short Bearish Divergence", color = wtShortBearishDivColor, linewidth = 2, offset = -2, display = display.pane)
plot(series = wtShortBotFractal ? laggingWt[2] : na, title = "Wave Trend Short Bullish Divergence", color = wtShortBullishDivColor, linewidth = 2, offset = -2, display = display.pane)

plot(rsiShowed ? rsi : na, title = "RSI", color = PINK_COLOR, linewidth = 2)

plot(stochRsiShowed ? stochRsi : na, title = "Stochastic RSI", color = rsi > stochRsi ? AQUA_COLOR : PURPLE_COLOR, linewidth = 2)

//-----------------------------------------------------------------------------