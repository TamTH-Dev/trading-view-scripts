// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© tamth_

//@version=6
indicator("Oscillator", overlay=false, precision=2)

//-----------------------------------------------------------------------------
// Constants
//-----------------------------------------------------------------------------
// Colors
color TRANSPARENT_COLOR = color.new(#000000, 100)
color WHITE_COLOR      = #ffffff
color BLACK_COLOR      = #000000
color RED_COLOR        = #ff006e
color ORANGE_COLOR     = #fb5607
color YELLOW_COLOR     = #ffbe0b
color GREEN_COLOR      = #2a9d8f
color AQUA_COLOR       = #00b4d8
color BLUE_COLOR       = #3a86ff
color PURPLE_COLOR     = #8338ec
color PINK_COLOR       = #df3bf1
color GRAY_COLOR       = #212d40
color TEXT_COLOR       = #ced4da

//-----------------------------------------------------------------------------
// Common Variables
//-----------------------------------------------------------------------------
// Bar index and input
series int barIdx = bar_index

//-----------------------------------------------------------------------------
// Common Methods
//-----------------------------------------------------------------------------
// Debug label function
debug(simple string txt) =>
    var label lbl = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    label.set_xy(lbl, barIdx, ta.highest(10)[1])
    label.set_text(lbl, txt)

//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// Squeeze Momentum
//-----------------------------------------------------------------------------
sqzGrp      = "Squeeze Momentum"
sqzLen      = input.int(20, title="TTM Squeeze Length", group=sqzGrp)

//-----------------------------------------------------------------------------
// Bollinger Bands
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
bbMult      = input.float(2.0, title="Bollinger Band STD Multiplier", group=sqzGrp)
bbBasis     = ta.sma(close, sqzLen)
bbDev       = bbMult * ta.stdev(close, sqzLen)
bbUpper     = bbBasis + bbDev
bbLower     = bbBasis - bbDev

//-----------------------------------------------------------------------------
// Keltner Channels
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
kcMultHigh  = input.float(1.0, title="Keltner Channel #1", group=sqzGrp)
kcMultMid   = input.float(1.5, title="Keltner Channel #2", group=sqzGrp)
kcMultLow   = input.float(2.0, title="Keltner Channel #3", group=sqzGrp)
kcBasis     = ta.sma(close, sqzLen)
devKc       = ta.sma(ta.tr, sqzLen)
kcUpperHigh = kcBasis + devKc * kcMultHigh
kcLowerHigh = kcBasis - devKc * kcMultHigh
kcUpperMid  = kcBasis + devKc * kcMultMid
kcLowerMid  = kcBasis - devKc * kcMultMid
kcUpperLow  = kcBasis + devKc * kcMultLow
kcLowerLow  = kcBasis - devKc * kcMultLow

//-----------------------------------------------------------------------------
// Calculation
//-----------------------------------------------------------------------------
// Squeeze conditions
isNoSqz   = bbLower < kcLowerLow or bbUpper > kcUpperLow
isLowSqz  = bbLower >= kcLowerLow or bbUpper <= kcUpperLow
isMidSqz  = bbLower >= kcLowerMid or bbUpper <= kcUpperMid
isHighSqz = bbLower >= kcLowerHigh or bbUpper <= kcUpperHigh

// Momentum calculation
mom = ta.linreg(close - math.avg(math.avg(ta.highest(high, sqzLen), ta.lowest(low, sqzLen)), ta.sma(close, sqzLen)), sqzLen, 0)

iff1      = mom > nz(mom[1]) ? AQUA_COLOR : BLUE_COLOR
iff2      = mom < nz(mom[1]) ? RED_COLOR : ORANGE_COLOR
momColor  = mom > 0 ? iff1 : iff2
sqzColor  = isHighSqz ? PINK_COLOR : isMidSqz ? PURPLE_COLOR : isLowSqz ? YELLOW_COLOR : GRAY_COLOR

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
// Plot momentum and squeeze
plot(mom, title="Momentum", color=momColor, style=plot.style_line, linewidth=2, display = display.pane)
plot(0, title="Squeeze", color=sqzColor, style=plot.style_circles, linewidth=2, display = display.pane)

//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// ATR Levels
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
alGrp= "ATR Levels"
alShowed= input.bool(true, title="Show", group=alGrp)
alDayTradingOption = 'Day'
alMultidayTradingOption = 'Multiday'
alSwingTradingOption = 'Swing'
alTradingType = input.string(alDayTradingOption, 'Trading Type', options=[alDayTradingOption, alMultidayTradingOption, alSwingTradingOption], group=alGrp)
alLength = input.int(14, 'ATR Length', group=alGrp)
alTriggerPerc = input.float(0.236, 'Trigger Percentage', group=alGrp)
alPrevCloseLevelColor = input.color(WHITE_COLOR, 'Previous Close Level Color', group=alGrp)
alLowerTriggerLevelColor = input.color(PURPLE_COLOR, 'Lower Trigger Level Color', group=alGrp)
alUpperTriggerLevelColor = input.color(PURPLE_COLOR, 'Upper Trigger Level Color', group=alGrp)
alKeyTargetLevelColor = input.color(ORANGE_COLOR, 'Key Target Level Color', group=alGrp)
alAtrTargetLevelColor = input.color(WHITE_COLOR, 'ATR Target Level Color', group=alGrp)
alIntermediateTargetLevelColor = input.color(GRAY_COLOR, 'Intermediate Target Level Color', group=alGrp)
alShowAllFibLevels = input.bool(true, 'Show All Fibonacci Levels', group=alGrp)
alFastEma = input.int(8, 'Fast EMA', group=alGrp)
alPivotEma = input.int(21, 'Pivot EMA', group=alGrp)
alSlowEma = input.int(34, 'Slow EMA', group=alGrp)

//-----------------------------------------------------------------------------
// Methods
//-----------------------------------------------------------------------------
// Set the appropriate timeframe based on trading mode
getAlTf() =>
    timeframe = 'D'
    if alTradingType == alDayTradingOption
        timeframe := 'D'
    else if alTradingType == alMultidayTradingOption
        timeframe := 'W'
    else if alTradingType == alSwingTradingOption
        timeframe := 'M'
    else
        timeframe := 'D'

//-----------------------------------------------------------------------------
// Values
//-----------------------------------------------------------------------------
// Trend
price = close
alFastEmaVal = ta.ema(price, alFastEma)
alPivotEmaVal = ta.ema(price, alPivotEma)
alSlowEmaVal = ta.ema(price, alSlowEma)

// Data
alPeriodIdx = 1
alTicker = ticker.new(syminfo.prefix, syminfo.ticker, session=session.extended)
alPrevClose = request.security(alTicker, getAlTf(), close[alPeriodIdx], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
atr = request.security(alTicker, getAlTf(), ta.atr(alLength)[alPeriodIdx], gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
alPeriodHigh = request.security(alTicker, getAlTf(), high, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
alPeriodLow = request.security(alTicker, getAlTf(), low, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_on)
alRange1 = alPeriodHigh - alPeriodLow
alTrPercOfAtr = alRange1 / atr * 100
alLowerTrigger = alPrevClose - alTriggerPerc * atr
alUpperTrigger = alPrevClose + alTriggerPerc * atr
alLower0382 = alPrevClose - atr * 0.382
alUpper0382 = alPrevClose + atr * 0.382
alLower0500 = alPrevClose - atr * 0.5
alUpper0500 = alPrevClose + atr * 0.5
alLower0618 = alPrevClose - atr * 0.618
alUpper0618 = alPrevClose + atr * 0.618
alLower0786 = alPrevClose - atr * 0.786
alUpper0786 = alPrevClose + atr * 0.786
alLower1000 = alPrevClose - atr
alUpper1000 = alPrevClose + atr

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
plot(alLower1000, color=color.new(alAtrTargetLevelColor, 40), linewidth=1, title='-100%', style=plot.style_stepline, display = display.pane, force_overlay = true)
plot(alShowAllFibLevels ? alLower0786 : na, color=color.new(alIntermediateTargetLevelColor, 40), linewidth=1, title='-78.6%', style=plot.style_stepline, display = display.pane, force_overlay = true)
plot(alLower0618, color=color.new(alKeyTargetLevelColor, 40), linewidth=1, title='-61.8%', style=plot.style_stepline, display = display.pane, force_overlay = true)
plot(alShowAllFibLevels ? alLower0500 : na, color=color.new(alIntermediateTargetLevelColor, 40), linewidth=1, title='-50.0%', style=plot.style_stepline, display = display.pane, force_overlay = true)
plot(alShowAllFibLevels ? alLower0382 : na, color=color.new(alIntermediateTargetLevelColor, 40), linewidth=1, title='-38.2%', style=plot.style_stepline, display = display.pane, force_overlay = true)
plot(alLowerTrigger, color=color.new(alLowerTriggerLevelColor, 40), linewidth=1, title='Lower Trigger', style=plot.style_stepline, display = display.pane, force_overlay = true)
plot(alPrevClose, color=color.new(alPrevCloseLevelColor, 40), linewidth=1, title='Previous Close', style=plot.style_stepline, display = display.pane, force_overlay = true)
plot(alUpperTrigger, color=color.new(alUpperTriggerLevelColor, 40), linewidth=1, title='Upper Trigger', style=plot.style_stepline, display = display.pane, force_overlay = true)
plot(alShowAllFibLevels ? alUpper0382 : na, color=color.new(alIntermediateTargetLevelColor, 40), linewidth=1, title='38.2%', style=plot.style_stepline, display = display.pane, force_overlay = true)
plot(alShowAllFibLevels ? alUpper0500 : na, color=color.new(alIntermediateTargetLevelColor, 40), linewidth=1, title='50.0%', style=plot.style_stepline, display = display.pane, force_overlay = true)
plot(alUpper0618, color=color.new(alKeyTargetLevelColor, 40), linewidth=1, title='61.8%', style=plot.style_stepline, display = display.pane, force_overlay = true)
plot(alShowAllFibLevels ? alUpper0786 : na, color=color.new(alIntermediateTargetLevelColor, 40), linewidth=1, title='78.6%', style=plot.style_stepline, display = display.pane, force_overlay = true)
plot(alUpper1000, color=color.new(alAtrTargetLevelColor, 40), linewidth=1, title='100%', style=plot.style_stepline, display = display.pane, force_overlay = true)

//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// Ripster EMA Clouds
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
ripsterEmaCloudsGrp    = "Ripster EMA Clouds"
ripsterEmaCloudsShowed = input.bool(true, title="Show", group=ripsterEmaCloudsGrp)
ripsterEmaCloudsSrc    = input.source(hl2, title="Source", group=ripsterEmaCloudsGrp)
ripsterEmaCloudsTf     = input.timeframe("", title="Timeframe", group=ripsterEmaCloudsGrp)
shortEma1Len           = input.int(8, title="Short EMA 1 Length", group=ripsterEmaCloudsGrp)
longEma1Len            = input.int(9, title="Long EMA 1 Length", group=ripsterEmaCloudsGrp)
ema1CloudShowed        = input.bool(true, title="Show EMA Cloud 1", group=ripsterEmaCloudsGrp)
shortEma2Len           = input.int(5, title="Short EMA 2 Length", group=ripsterEmaCloudsGrp)
longEma2Len            = input.int(12, title="Long EMA 2 Length", group=ripsterEmaCloudsGrp)
ema2CloudShowed        = input.bool(true, title="Show EMA Cloud 2", group=ripsterEmaCloudsGrp)
shortEma3Len           = input.int(20, title="Short EMA 3 Length", group=ripsterEmaCloudsGrp)
longEma3Len            = input.int(21, title="Long EMA 3 Length", group=ripsterEmaCloudsGrp)
ema3CloudShowed        = input.bool(true, title="Show EMA Cloud 3", group=ripsterEmaCloudsGrp)
shortEma4Len           = input.int(34, title="Short EMA 4 Length", group=ripsterEmaCloudsGrp)
longEma4Len            = input.int(50, title="Long EMA 4 Length", group=ripsterEmaCloudsGrp)
ema4CloudShowed        = input.bool(true, title="Show EMA Cloud 4", group=ripsterEmaCloudsGrp)
shortEma5Len           = input.int(180, title="Short EMA 5 Length", group=ripsterEmaCloudsGrp)
longEma5Len            = input.int(200, title="Long EMA 5 Length", group=ripsterEmaCloudsGrp)
ema5CloudShowed        = input.bool(true, title="Show EMA Cloud 5", group=ripsterEmaCloudsGrp)

//-----------------------------------------------------------------------------
// Values
//-----------------------------------------------------------------------------
shortEma1 = request.security(syminfo.tickerid, ripsterEmaCloudsTf, ta.ema(ripsterEmaCloudsSrc, shortEma1Len))
longEma1  = request.security(syminfo.tickerid, ripsterEmaCloudsTf, ta.ema(ripsterEmaCloudsSrc, longEma1Len))
shortEma2 = request.security(syminfo.tickerid, ripsterEmaCloudsTf, ta.ema(ripsterEmaCloudsSrc, shortEma2Len))
longEma2  = request.security(syminfo.tickerid, ripsterEmaCloudsTf, ta.ema(ripsterEmaCloudsSrc, longEma2Len))
shortEma3 = request.security(syminfo.tickerid, ripsterEmaCloudsTf, ta.ema(ripsterEmaCloudsSrc, shortEma3Len))
longEma3  = request.security(syminfo.tickerid, ripsterEmaCloudsTf, ta.ema(ripsterEmaCloudsSrc, longEma3Len))
shortEma4 = request.security(syminfo.tickerid, ripsterEmaCloudsTf, ta.ema(ripsterEmaCloudsSrc, shortEma4Len))
longEma4  = request.security(syminfo.tickerid, ripsterEmaCloudsTf, ta.ema(ripsterEmaCloudsSrc, longEma4Len))
shortEma5 = request.security(syminfo.tickerid, ripsterEmaCloudsTf, ta.ema(ripsterEmaCloudsSrc, shortEma5Len))
longEma5  = request.security(syminfo.tickerid, ripsterEmaCloudsTf, ta.ema(ripsterEmaCloudsSrc, longEma5Len))

cloudcolour1 = shortEma1 >= longEma1 ? AQUA_COLOR : RED_COLOR
cloudcolour2 = shortEma2 >= longEma2 ? AQUA_COLOR : RED_COLOR
cloudcolour3 = shortEma3 >= longEma3 ? PINK_COLOR : YELLOW_COLOR
cloudcolour4 = shortEma4 >= longEma4 ? BLUE_COLOR : ORANGE_COLOR
cloudcolour5 = shortEma5 >= longEma5 ? PURPLE_COLOR : GREEN_COLOR

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
shortEma1Line = plot(ripsterEmaCloudsShowed and ema1CloudShowed ? shortEma1 : na, color=na, linewidth=1, title="Short EMA 1", display = display.pane, force_overlay = true)
shortEma2Line = plot(ripsterEmaCloudsShowed and ema2CloudShowed ? shortEma2 : na, color=na, linewidth=1, title="Short EMA 2", display = display.pane, force_overlay = true)
shortEma3Line = plot(ripsterEmaCloudsShowed and ema3CloudShowed ? shortEma3 : na, color=na, linewidth=1, title="Short EMA 3", display = display.pane, force_overlay = true)
shortEma4Line = plot(ripsterEmaCloudsShowed and ema4CloudShowed ? shortEma4 : na, color=na, linewidth=1, title="Short EMA 4", display = display.pane, force_overlay = true)
shortEma5Line = plot(ripsterEmaCloudsShowed and ema5CloudShowed ? shortEma5 : na, color=na, linewidth=1, title="Short EMA 5", display = display.pane, force_overlay = true)

longEma1Line = plot(ripsterEmaCloudsShowed and ema1CloudShowed ? longEma1 : na, color=na, linewidth=3, title="Long EMA 1", display = display.pane, force_overlay = true)
longEma2Line = plot(ripsterEmaCloudsShowed and ema2CloudShowed ? longEma2 : na, color=na, linewidth=3, title="Long EMA 2", display = display.pane, force_overlay = true)
longEma3Line = plot(ripsterEmaCloudsShowed and ema3CloudShowed ? longEma3 : na, color=na, linewidth=3, title="Long EMA 3", display = display.pane, force_overlay = true)
longEma4Line = plot(ripsterEmaCloudsShowed and ema4CloudShowed ? longEma4 : na, color=na, linewidth=3, title="Long EMA 4", display = display.pane, force_overlay = true)
longEma5Line = plot(ripsterEmaCloudsShowed and ema5CloudShowed ? longEma5 : na, color=na, linewidth=3, title="Long EMA 5", display = display.pane, force_overlay = true)

fill(shortEma1Line, longEma1Line, color=color.new(cloudcolour1, 70), title="EMA Cloud 1")
fill(shortEma2Line, longEma2Line, color=color.new(cloudcolour2, 70), title="EMA Cloud 2")
fill(shortEma3Line, longEma3Line, color=color.new(cloudcolour3, 70), title="EMA Cloud 3")
fill(shortEma4Line, longEma4Line, color=color.new(cloudcolour4, 70), title="EMA Cloud 4")
fill(shortEma5Line, longEma5Line, color=color.new(cloudcolour5, 70), title="EMA Cloud 5")

//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// DSMAs
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
dsmaGrp    = "DSMAs"
dsmaShowed = input.bool(false, title="Show", group=dsmaGrp)
dsmaSrc    = input.source(close, title="Source", group=dsmaGrp)
dsma1Len   = input.int(40, title="DSMA 1 Length", group=dsmaGrp)
dsma2Len   = input.int(100, title="DSMA 2 Length", group=dsmaGrp)

//-----------------------------------------------------------------------------
// Methods
//-----------------------------------------------------------------------------
calcDsma(src, len) =>
    filt = 0.0
    dsma = 0.0

    PI = 3.1415926
    a1 = math.exp( -1.414 * PI / (0.5 * len))
    b1 = 2 * a1 * math.cos( 1.414 * PI / ( 0.5 * len))
    c2 = b1
    c3 = -a1 * a1
    c1 = 1 - c2 - c3

    zeros = src - src[2]
    filt := c1 * (zeros + zeros[1]) / 2 + c2 * nz(filt[1]) + c3 * nz(filt[2])
    rm = math.sum(filt * filt, len) 
    rms = math.sqrt(rm / len) 
    scaledFilt = rms != 0 ? filt / rms : 0
    alpha1 = math.abs(scaledFilt) * 5 / len
    dsma := alpha1 * close + (1 - alpha1) * nz(dsma[1])
    dsma

//-----------------------------------------------------------------------------
// Values
//-----------------------------------------------------------------------------
dsma1 = calcDsma(dsmaSrc, dsma1Len)
dsma2 = calcDsma(dsmaSrc, dsma2Len)

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
// plot(dsmaShowed ? dsma1 : na, color=BLUE_COLOR, linewidth=1, display = display.pane, force_overlay = true)
// plot(dsmaShowed ? dsma2 : na, color=RED_COLOR, linewidth=1, display = display.pane, force_overlay = true)

//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// Signals
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
bool    sigarrows   = input.bool(true, title="Signal Arrows")
string  sigt        = input.string("+/-", title="Signal Type", options=["Current Momentum", "Sum of Change", "+/-", "Rising/Falling", "Crossed Zero", "Basis Line Momentum", "Divergence", "Combo"])
string  custsqz     = input.string("6 Dots", title="Squeeze Signal Length", options=["End of Early Signal", "6 Dots", "12 Dots", "End of Squeeze", "Custom"])
int     sqzsig      = input.int(8, title="Custom Squeeze Signal Duration")
int     sumofc      = input.int(20, title="Sum of Change Length")
int     entrysmooth = input.int(7, title="Early Entry Smoothing Period")
int     exitsmooth  = input.int(9, title="Early Exit Smoothing Period")

//-----------------------------------------------------------------------------
// Values
//-----------------------------------------------------------------------------
// Squeeze Variables
float   bb          = 2.0
float   kch         = 1.0
float   kcm         = 1.5
float   kcl         = 2.0
float   sqz         = ta.linreg(close - math.avg(math.avg(ta.highest(high, 20), ta.lowest(low, 20)), ta.ema(close, 20)), 20, 0)
float   momo        = ta.linreg((sqz-sqz[1]), exitsmooth, 0)
// Basis Line
float   basis       = ta.sma(close,20)
// Bollinger Bands
float   dev         = bb * ta.stdev(close, 20)
float   upperbb     = basis + dev
float   lowerbb     = basis - dev
// Keltner Channels Range
float   kcrange     = ta.sma(ta.tr, 20)
// Keltner Channels High
float   kcuph       = basis + kcrange * kch
float   kcdnh       = basis - kcrange * kch
// Keltner Channels Mid
float   kcupm       = basis + kcrange * kcm
float   kcdnm       = basis - kcrange * kcm
// Keltner Channels Low
float   kcupl       = basis + kcrange * kcl
float   kcdnl       = basis - kcrange * kcl
// Early Signal Variables
float   bkhigh      = upperbb - kcuph
float   bkmid       = upperbb - kcupm
float   bklow       = upperbb - kcupl
float   bkhema      = ta.ema(bkhigh,entrysmooth)
float   bkmema      = ta.ema(bkmid,entrysmooth)
float   bklema      = ta.ema(bklow,entrysmooth)
// Each Squeeze Type
bool    lowsqz      = upperbb < kcupl and lowerbb > kcdnl
bool    midsqz      = upperbb < kcupm and lowerbb > kcdnm
bool    highsqz     = upperbb < kcuph and lowerbb > kcdnh
// BB and KC Signal Formulas
bool    ksm         = close < kcdnm or close > kcupm
bool    ksh         = close < kcdnh or close > kcuph
bool    ksl         = close < kcdnl or close > kcupl
bool    bbsmh       = close < lowerbb or close > upperbb
// Early Entry Candle Conditions
bool    earlyentrymid   = bkmid > bkmema and bkmid <=0
bool    earlyentryhigh  = bkhigh > bkhema and bkhigh <=0
bool    earlyentrylow   = bklow > bklema and bklow <=0
bool    endofmid        = ta.barssince(earlyentrymid) == 1
bool    endofhigh       = ta.barssince(earlyentryhigh) == 1
bool    endoflow        = ta.barssince(earlyentrylow) == 1
// Individual KC Formulas
barssinceKsl = ta.barssince(ksl)
barssinceKsm = ta.barssince(ksm)
barssinceKsh = ta.barssince(ksh)
bool    kcllong     = ksl and lowsqz[1] and close > basis and (barssinceKsl[1] > 20)
bool    kclshort    = ksl and lowsqz[1] and close < basis and (barssinceKsl[1] > 20)
bool    kcmlong     = ksm and midsqz[1] and close > basis and (barssinceKsm[1] > 20)
bool    kcmshort    = ksm and midsqz[1] and close < basis and (barssinceKsm[1] > 20)
bool    kchlong     = ksh and highsqz[1] and close > basis and (barssinceKsh[1] > 20)
bool    kchshort    = ksh and highsqz[1] and close < basis and (barssinceKsh[1] > 20)
// Individual BB Formulas
barssinceBbSmh = ta.barssince(bbsmh)
bool    bbllong     = bbsmh and lowsqz[1] and close > basis and (barssinceBbSmh[1] > 20)
bool    bblshort    = bbsmh and lowsqz[1] and close < basis and (barssinceBbSmh[1] > 20)
bool    bbmlong     = bbsmh and midsqz[1] and close > basis and (barssinceBbSmh[1] > 20)
bool    bbmshort    = bbsmh and midsqz[1] and close < basis and (barssinceBbSmh[1] > 20)
bool    bbhlong     = bbsmh and highsqz[1] and close > basis and (barssinceBbSmh[1] > 20)
bool    bbhshort    = bbsmh and highsqz[1] and close < basis and (barssinceBbSmh[1] > 20)
// Signal Types
bool  cmom          = sigt == "Current Momentum"
bool  soc           = sigt == "Sum of Change"
bool  momom         = sigt == "+/-"
bool  rf            = sigt == "Rising/Falling"
bool  czero         = sigt == "Crossed Zero"
bool  blma          = sigt == "Basis Line Momentum"
bool  diverg        = sigt == "Divergence"
bool  combo         = sigt == "Combo"
// Signal Durations
bool  sigeoe        = custsqz == "End of Early Signal"
bool  sigreg        = custsqz == "6 Dots"
bool  sigpro        = custsqz == "12 Dots"
bool  sigeos        = custsqz == "End of Squeeze"
bool  sigcus        = custsqz == "Custom"
// Sum of Change
float   change     = math.sum((sqz-sqz[1]),sumofc)
bool    changel    = change > 0
bool    changes    = change < 0
// Basis Line Filter
bool    bbmal       = close >= basis
bool    bbmas       = close < basis
// Basic Signal Conditions
bool    sc1         = sqz > 0
bool    sc2         = sqz < 0
// Rising/Falling Conditions
bool    sqzlongreg  = sqz > sqz[1] and sqz[1] > sqz[2] and sqz[2] > sqz[3] and sqz[3] > sqz[4] and sqz[4] > sqz[5] and sqz[5] > sqz[6]
bool    sqzshortreg = sqz < sqz[1] and sqz[1] < sqz[2] and sqz[2] < sqz[3] and sqz[3] < sqz[4] and sqz[4] < sqz[5] and sqz[5] < sqz[6]
// Zero Line Conditions
bool    sqzzerolong = sqz > 0 and sqz[6] < 0
bool    sqzzeroshort= sqz < 0 and sqz[6] > 0
// Divergence Formula
ftf(_src) => _src[4] < _src[2] and _src[3] < _src[2] and _src[2] > _src[1] and _src[2] > _src[0]
fbf(_src) => _src[4] > _src[2] and _src[3] > _src[2] and _src[2] < _src[1] and _src[2] < _src[0]
ffract(_src) => ftf(_src) ? 1 : fbf(_src) ? -1 : 0
// Divergence Variables
float   fractaltop = ffract(sqz) > 0 ? sqz[2] : na
float   fractalbot = ffract(sqz) < 0 ? sqz[2] : na
float   high_prev  = ta.valuewhen(not na(fractaltop), sqz[2], 1) 
float   high_price = ta.valuewhen(not na(fractaltop), high[2], 1)
float   low_prev   = ta.valuewhen(not na(fractalbot), sqz[2], 1) 
float   low_price  = ta.valuewhen(not na(fractalbot), low[2], 1)
bool    regbeardiv = not na(fractaltop) and high[2] > high_price and sqz[2] < high_prev
bool    regbulldiv = not na(fractalbot) and low[2] < low_price and sqz[2] > low_prev
// Current Momentum
bool    cmolong         = sqz > sqz[1]
bool    cmoshort        = sqz <= sqz[1]
// False Signals
bool    lsf             = lowsqz == false
bool    msf             = midsqz == false
bool    hsf             = highsqz == false
// End of Early Signal
bool    eoel            = sigeoe ? endoflow : false
bool    eoem            = sigeoe ? endofmid : false
bool    eoeh            = sigeoe ? endofhigh : false

barssinceLsf = ta.barssince(lsf)
barssinceMsf = ta.barssince(msf)
barssinceHsf = ta.barssince(hsf)
barssinceLowSqz = ta.barssince(lowsqz)
barssinceMidSqz = ta.barssince(midsqz)
barssinceHighSqz = ta.barssince(highsqz)

// Dot Count Regular
bool    ll6             = sigreg ? lowsqz and (barssinceLsf == 6) : false
bool    ml6             = sigreg ? midsqz and (barssinceMsf == 6) : false
bool    hl6             = sigreg ? highsqz and (barssinceHsf == 6) : false
// Dot Count Prolonged
bool    ll12            = sigpro ? lowsqz and (barssinceLsf == 12) : false
bool    ml12            = sigpro ? midsqz and (barssinceMsf == 12) : false
bool    hl12            = sigpro ? highsqz and (barssinceHsf == 12) : false
// End Of Squeeze
bool    eol             = sigeos ? lsf and (barssinceLowSqz == 1) : false
bool    eom             = sigeos ? msf and (barssinceMidSqz == 1) : false
bool    eoh             = sigeos ? hsf and (barssinceHighSqz == 1) : false
// Custom Squeeze
bool    custl           = sigcus ? lowsqz and (barssinceLsf == sqzsig) : false
bool    custm           = sigcus ? midsqz and (barssinceMsf == sqzsig) : false
bool    custh           = sigcus ? highsqz and (barssinceHsf == sqzsig) : false
// Dot Count Signals
bool    squeezesignall  = eoel or ll6 or ll12 or eol or custl
bool    squeezesignalm  = eoem or ml6 or ml12 or eom or custm
bool    squeezesignalh  = eoeh or hl6 or hl12 or eoh or custh
// Sum of Change Formulas
bool    llchg           = squeezesignall and changel
bool    lschg           = squeezesignall and changes
bool    mlchg           = squeezesignalm and changel
bool    mschg           = squeezesignalm and changes
bool    hlchg           = squeezesignalh and changel
bool    hschg           = squeezesignalh and changes
// Basic Signal Formulas
bool    llbsc           = squeezesignall and sc1
bool    lsbsc           = squeezesignall and sc2
bool    mlbsc           = squeezesignalm and sc1
bool    msbsc           = squeezesignalm and sc2
bool    hlbsc           = squeezesignalh and sc1
bool    hsbsc           = squeezesignalh and sc2
// Rising/Falling Signal Formulas
bool    llrf            = squeezesignall and sqzlongreg
bool    lsrf            = squeezesignall and sqzshortreg
bool    mlrf            = squeezesignalm and sqzlongreg
bool    msrf            = squeezesignalm and sqzshortreg
bool    hlrf            = squeezesignalh and sqzlongreg
bool    hsrf            = squeezesignalh and sqzshortreg
// Zero Line Signal Formulas
bool    llz             = squeezesignall and sqzzerolong
bool    lsz             = squeezesignall and sqzzeroshort
bool    mlz             = squeezesignalm and sqzzerolong
bool    msz             = squeezesignalm and sqzzeroshort
bool    hlz             = squeezesignalh and sqzzerolong
bool    hsz             = squeezesignalh and sqzzeroshort
// Basis Line Signal Formulas
bool    llbl            = squeezesignall and bbmal
bool    lsbl            = squeezesignall and bbmas
bool    mlbl            = squeezesignalm and bbmal
bool    msbl            = squeezesignalm and bbmas
bool    hlbl            = squeezesignalh and bbmal
bool    hsbl            = squeezesignalh and bbmas
// Divergence Signal Formulas
bool    lldv            = squeezesignall and regbulldiv
bool    lsdv            = squeezesignall and regbeardiv
bool    mldv            = squeezesignalm and regbulldiv
bool    msdv            = squeezesignalm and regbeardiv
bool    hldv            = squeezesignalh and regbulldiv
bool    hsdv            = squeezesignalh and regbeardiv
// Current Momentum Signal Formulas
bool    llcm            = squeezesignall and cmolong
bool    lscm            = squeezesignall and cmoshort
bool    mlcm            = squeezesignalm and cmolong
bool    mscm            = squeezesignalm and cmoshort
bool    hlcm            = squeezesignalh and cmolong
bool    hscm            = squeezesignalh and cmoshort
// Combo Scoring
int     basicscore      = sc1 ? 6 : -6
int     rfscore         = sqzlongreg ? 3 : sqzshortreg ? -3 : 0
int     zlscore         = sqzzerolong ? 4 : sqzzeroshort ? -4 : 0
int     bbmascore       = bbmal ? 3 : bbmas ? -3 : 0
int     divscore        = regbulldiv ? 3 : regbeardiv ? -3 : 0
int     sumscore        = changel ? 4 : -4
int     currentmo       = cmolong ? 3 : -3
int     comboscore      = basicscore + rfscore + zlscore + bbmascore + divscore + sumscore + currentmo
bool    longcombo       = comboscore > 0
bool    shortcombo      = comboscore < 0
// Combo Signal Formulas
bool    llcombo         = squeezesignall and longcombo
bool    lscombo         = squeezesignall and shortcombo
bool    mlcombo         = squeezesignalm and longcombo
bool    mscombo         = squeezesignalm and shortcombo
bool    hlcombo         = squeezesignalh and longcombo
bool    hscombo         = squeezesignalh and shortcombo
// Final Signals
bool    longlow         = (soc and llchg) or (momom and llbsc) or (rf and llrf) or (czero and llz) or (blma and llbl) or (diverg and lldv) or (llcm and cmom) or (combo and llcombo)
bool    shortlow        = (soc and lschg) or (momom and lsbsc) or (rf and lsrf) or (czero and lsz) or (blma and lsbl) or (diverg and lsdv) or (lscm and cmom) or (combo and lscombo)
bool    longmid         = (soc and mlchg) or (momom and mlbsc) or (rf and mlrf) or (czero and mlz) or (blma and mlbl) or (diverg and mldv) or (mlcm and cmom) or (combo and mlcombo)
bool    shortmid        = (soc and mschg) or (momom and msbsc) or (rf and msrf) or (czero and msz) or (blma and msbl) or (diverg and msdv) or (mscm and cmom) or (combo and mscombo)
bool    longhigh        = (soc and hlchg) or (momom and hlbsc) or (rf and hlrf) or (czero and hlz) or (blma and hlbl) or (diverg and hldv) or (hlcm and cmom) or (combo and hlcombo)
bool    shorthigh       = (soc and hschg) or (momom and hsbsc) or (rf and hsrf) or (czero and hsz) or (blma and hsbl) or (diverg and hsdv) or (hscm and cmom) or (combo and hscombo)

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
plotshape(sigarrows ? (longhigh ? false : longmid ? false : longlow ? longlow : false) : false, color=color.new(YELLOW_COLOR, 20), style=shape.diamond, location=location.belowbar, size=size.tiny, title="Low Squeeze Signal - Long", force_overlay=true, display = display.pane)
plotshape(sigarrows ? (shorthigh ? false : shortmid ? false : shortlow ? shortlow : false) : false, color=color.new(YELLOW_COLOR, 20), style=shape.diamond, location=location.abovebar, size=size.tiny, title="Low Squeeze Signal - Short", force_overlay=true, display = display.pane)
plotshape(sigarrows ? (longhigh ? false : longmid ? longmid : false) : false, color=color.new(PURPLE_COLOR, 20), style=shape.diamond, location=location.belowbar, size=size.tiny, title="Mid Squeeze Signal - Long", force_overlay=true, display = display.pane)
plotshape(sigarrows ? (shorthigh ? false : shortmid ? shortmid : false) : false, color=color.new(PURPLE_COLOR, 20), style=shape.diamond, location=location.abovebar, size=size.tiny, title="Mid Squeeze Signal - Short", force_overlay=true, display = display.pane)
plotshape(sigarrows ? (longhigh ? longhigh : false) : false, color=color.new(PINK_COLOR, 20), style=shape.diamond, location=location.belowbar, size=size.tiny, title="High Squeeze Signal - Long", force_overlay=true, display = display.pane)
plotshape(sigarrows ? (shorthigh ? shorthigh : false) : false, color=color.new(PINK_COLOR, 20), style=shape.diamond, location=location.abovebar, size=size.tiny, title="High Squeeze Signal - Short", force_overlay=true, display = display.pane)

//------------------------------------------------------------------------------