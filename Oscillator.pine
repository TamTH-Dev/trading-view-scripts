// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © tamth_

//@version=6
indicator("Oscillator", overlay = false, max_boxes_count = 500, max_lines_count = 500, max_labels_count = 500, max_bars_back = 5000)


//-----------------------------------------------------------------------------
// Constants
//-----------------------------------------------------------------------------
// Colors
color TRANSPARENT_COLOR = #ffffff00
color WHITE_COLOR       = #dee2e6
color BLACK_COLOR       = #000000
color RED_COLOR         = #F72585
color ORANGE_COLOR      = #fb5607
color YELLOW_COLOR      = #ffbe0b
color GREEN_COLOR       = #2a9d8f
color AQUA_COLOR        = #4CC9F0
color BLUE_COLOR        = #4361ee
color PURPLE_COLOR      = #3F37C9
color PINK_COLOR        = #B5179E
color LIGHT_GRAY_COLOR  = #364156
color DARK_GRAY_COLOR   = #212d40
color TEXT_COLOR        = #ced4da

//-----------------------------------------------------------------------------
// Common Variables
//-----------------------------------------------------------------------------
series int barIdx = bar_index

//-----------------------------------------------------------------------------
// Common Methods
//-----------------------------------------------------------------------------
debug(simple string txt) =>
    var label lbl = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    label.set_xy(lbl, barIdx, ta.highest(10)[1])
    label.set_text(lbl, txt)

//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
mfi_len = input.int(14, "MFI length")
upper_level = input.int(70, "Upper MFI Level", minval = 50)
lower_level = input.int(30, "Lower MFI Level", maxval = 50)
min_channel_len = input.int(15, "Minimal bars length of the channel")

upper_col = input.color(AQUA_COLOR, "↑", inline = "colors")
lower_col = input.color(PURPLE_COLOR, "↓", inline = "colors")

var start = int(na)
var trigger = false
var float upper = na 
var float lower = na
var channel_color = color(na)
color bar_color = na

//-----------------------------------------------------------------------------
// Calculate
//-----------------------------------------------------------------------------
mfi = ta.mfi(close, mfi_len)

channel_upper = ta.crossover(mfi, 70) and not trigger 
channel_lower = ta.crossunder(mfi, 30) and not trigger 

mfi_color = color.from_gradient(mfi, 30, 70, lower_col, upper_col)

if channel_upper
    label.new(bar_index, mfi, style = label.style_circle, size = size.tiny, color = color.new(mfi_color, 60))

    start := bar_index
    trigger := true
    upper := high
    lower := low
    channel_color := mfi_color
    bar_color := mfi_color

if channel_lower
    label.new(bar_index, mfi, style = label.style_circle, size = size.tiny, color = color.new(mfi_color, 60))

    start := bar_index
    trigger := true
    upper := high
    lower := low
    channel_color := mfi_color
    bar_color := mfi_color


if bar_index-start >= min_channel_len 
    trigger := false


trigger_change = channel_upper != channel_upper[1] or channel_lower != channel_lower[1]

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
barcolor(bar_color)
pmfi = plot(mfi, "MFI", color = mfi_color, linewidth = 2, display = display.pane)
p50 = plot(50, color = LIGHT_GRAY_COLOR, editable = false, display = display.pane)
plower = plot(lower_level, "Lower MFI Level", color = bar_index % 3 == 0 ? na : LIGHT_GRAY_COLOR, display = display.pane)
pupper = plot(upper_level, "Upper MFI Level", color = bar_index % 3 == 0 ? na : LIGHT_GRAY_COLOR, display = display.pane)

fill(pmfi, pupper, mfi >= upper_level ? color.new(mfi_color, 80) : na)
fill(pmfi, plower, mfi <= lower_level ? color.new(mfi_color, 80) : na)

plot(trigger_change ? float(na) : upper, force_overlay = true, style = plot.style_linebr, offset = -1, color = color.new(channel_color, 50), editable = false, display = display.pane)
plot(trigger_change ? float(na) : lower, force_overlay = true, style = plot.style_linebr, offset = -1, color = color.new(channel_color, 50), editable = false, display = display.pane)

p1 = plot(trigger_change ? float(na) : upper, force_overlay = true, style = plot.style_linebr, color = color.new(channel_color, 70), linewidth = 3, editable = false, display = display.pane)
p2 = plot(trigger_change ? float(na) : lower, force_overlay = true, style = plot.style_linebr, color = color.new(channel_color, 70), linewidth = 3, editable = false, display = display.pane)

fill(p1, p2, color.new(channel_color, 95))

plot(trigger_change ? float(na) : math.avg(upper, lower), force_overlay = true, style = plot.style_linebr, offset = -1, color = LIGHT_GRAY_COLOR, editable = false, display = display.pane)
plot(trigger_change ? float(na) : math.avg(upper, lower), force_overlay = true, style = plot.style_linebr, color = LIGHT_GRAY_COLOR, editable = false, display = display.pane)

//-----------------------------------------------------------------------------