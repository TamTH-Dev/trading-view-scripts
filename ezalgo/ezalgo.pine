// Â© tamth_
// @version=5
indicator("EzAlgo", overlay = true, max_bars_back = 5000, max_boxes_count = 500)


// Colors
color white_color = color.white
color blue_dark_color = #082EBF
color blue_light_color = #3DCBFF
color yellow_color = #F2E40A
color green_color = #16F9BA
color red_color = #F23A64
color pink_color = #DB3AF2
color aqua_color = #21BAF3
color purple_color = #673AB7
color green_color_30 = color.new(green_color, 70)
color red_color_30 = color.new(red_color, 70)
color aqua_color_70 = color.new(aqua_color, 70)
color purple_color_70 = color.new(purple_color, 70)
color aqua_color_40 = color.new(aqua_color, 40)
color purple_color_40 = color.new(purple_color, 40)

//** S/R **//

// Inputs
string sr_grp = "S/R"
color sr_support_color = input.color(green_color, title = "Support Color", group = sr_grp)
color sr_resistance_color = input.color(red_color, title = "Resistance Color", group = sr_grp)
int sr_strength = input.int(2, title = "Strength", minval = 1, group = sr_grp)
int sr_zone_width_percent = input.int(1, title = "Zone Width In %", minval = 0, tooltip = "It's calculated using % of the distance between highest/lowest in last 300 bars", group = sr_grp)


// Methods
method get_width_by_percent(int len, int perc) => (ta.highest(len) - ta.lowest(len)) * perc / 100


// Plots
int sr_size = 21
int sr_rb = 10
int sr_prd = 284
float sr_ph = ta.pivothigh(sr_rb, sr_rb)
float sr_pl = ta.pivotlow (sr_rb, sr_rb)
var sr_levels = array.new_float(sr_size, na)
float sr_highest_prd = ta.highest(sr_prd)
float sr_lowest_prd = ta.lowest(sr_prd)
float sr_channel_perc = get_width_by_percent(sr_prd, 10)
float sr_zone_perc = get_width_by_percent(300, sr_zone_width_percent)
bool[] sr_aas = array.new_bool(41, true)
float sr_highest_ph = 0.0, sr_highest_ph := sr_highest_ph[1]
float sr_lowest_pl = 0.0, sr_lowest_pl := sr_lowest_pl[1]
var sr_levels_tmp = array.new_float(sr_size, na)
var sr_lines = array.new_line(sr_size, na)
var sr_lines_h = array.new_line(sr_size, na)
var sr_lines_l = array.new_line(sr_size, na)
var sr_lines_f = array.new_linefill(sr_size, na)

if sr_ph or sr_pl
    for i = 0 to array.size(sr_levels) - 1
        array.set(sr_levels, i, na)

    sr_highest_ph := sr_lowest_prd
    sr_lowest_pl := sr_highest_prd
    int pp_count = 0

    for i = 0 to sr_prd
        if na(close[i])
            break

        if not na(sr_ph[i]) or not na(sr_pl[i])
            sr_highest_ph := math.max(sr_highest_ph, nz(sr_ph[i], sr_lowest_prd), nz(sr_pl[i], sr_lowest_prd))
            sr_lowest_pl := math.min(sr_lowest_pl, nz(sr_ph[i], sr_highest_prd), nz(sr_pl[i], sr_highest_prd))
            pp_count += 1

            if pp_count > 40
                break

            if array.get(sr_aas, pp_count)
                upl = (sr_ph[i] ? high[i + sr_rb] : low[i + sr_rb]) + sr_channel_perc
                dnl = (sr_ph[i] ? high[i + sr_rb] : low[i + sr_rb]) - sr_channel_perc
                tmp = array.new_bool(41, true)
                count = 0
                points = 0

                for j = 0 to sr_prd
                    if na(close[j])
                        break

                    if not na(sr_ph[j]) or not na(sr_pl[j])
                        chg = false
                        count += 1

                        if count > 40
                            break

                        if array.get(sr_aas, count)
                            if not na(sr_ph[j])
                                if high[j + sr_rb] <= upl and high[j + sr_rb] >= dnl
                                    points += 1
                                    chg := true

                            if not na(sr_pl[j])
                                if low[j + sr_rb] <= upl and low[j + sr_rb] >= dnl
                                    points += 1
                                    chg := true

                        if chg and count < 41
                            array.set(tmp, count, false)

                if points >= sr_strength
                    for g = 0 to 40 by 1
                        if not array.get(tmp, g)
                            array.set(sr_aas, g, false)

                    if sr_ph[i] and pp_count < sr_size
                        array.set(sr_levels, pp_count, high[i + sr_rb])

                    if sr_pl[i] and pp_count < sr_size
                        array.set(sr_levels, pp_count, low[i + sr_rb])


var line sr_highest_fill_1 = na, line.delete(sr_highest_fill_1)
var line sr_highest_fill_2 = na, line.delete(sr_highest_fill_2)
var line sr_lowest_fill_1 = na, line.delete(sr_lowest_fill_1)
var line sr_lowest_fill_2 = na, line.delete(sr_lowest_fill_2)
color sr_high_color = close >= sr_highest_ph ? sr_support_color : sr_resistance_color
color sr_low_color = close >= sr_lowest_pl ? sr_support_color : sr_resistance_color
sr_highest_fill_1 := line.new(bar_index - 311, sr_highest_ph + sr_zone_perc, bar_index, sr_highest_ph + sr_zone_perc, xloc.bar_index, extend.both, na)
sr_highest_fill_2 := line.new(bar_index - 311, sr_highest_ph - sr_zone_perc, bar_index, sr_highest_ph - sr_zone_perc, xloc.bar_index, extend.both, na)
sr_lowest_fill_1 := line.new(bar_index - 311, sr_lowest_pl + sr_zone_perc, bar_index, sr_lowest_pl + sr_zone_perc, xloc.bar_index, extend.both, na)
sr_lowest_fill_2 := line.new(bar_index - 311, sr_lowest_pl - sr_zone_perc, bar_index, sr_lowest_pl - sr_zone_perc, xloc.bar_index, extend.both, na)
linefill.new(sr_highest_fill_1, sr_highest_fill_2, color.new(sr_high_color, 80))
linefill.new(sr_lowest_fill_1, sr_lowest_fill_2 , color.new(sr_low_color, 80))

if sr_ph or sr_pl
    for i = 0 to array.size(sr_lines) - 1
        array.set(sr_levels_tmp, i, array.get(sr_levels, i))

for i = 0 to array.size(sr_lines) - 1
    line.delete(array.get(sr_lines, i))
    line.delete(array.get(sr_lines_h, i))
    line.delete(array.get(sr_lines_l, i))
    linefill.delete(array.get(sr_lines_f, i))

    if array.get(sr_levels_tmp, i)
        line_col = close >= array.get(sr_levels_tmp, i) ? sr_support_color : sr_resistance_color
        array.set(sr_lines_h, i, line.new(bar_index - 355, array.get(sr_levels_tmp, i) + sr_zone_perc, bar_index, array.get(sr_levels_tmp, i) + sr_zone_perc, xloc.bar_index, extend.both, na))
        array.set(sr_lines_l, i, line.new(bar_index - 355, array.get(sr_levels_tmp, i) - sr_zone_perc, bar_index, array.get(sr_levels_tmp, i) - sr_zone_perc, xloc.bar_index, extend.both, na))
        array.set(sr_lines_f, i, linefill.new(array.get(sr_lines_h, i), array.get(sr_lines_l, i), color.new(line_col, 80)))





//** Signals **//

// Inputs
string buy_sell_grp = "Buy & Sell Signals"
bool buy_sell_signals_showed = input.bool(true, title = "Show", group = buy_sell_grp)
float sensitivity = input.float(1.7, title = "Sensitivity", minval = 1, maxval = 6, group = buy_sell_grp)
int signal_offset = input.int(2, title = "Offset", minval = 0, group = buy_sell_grp)
string trend_ribbon_grp = "Trend Ribbon"
bool ribbon_showed = input.bool(true, title = "Show", group = trend_ribbon_grp)
int ribbon_leading_smoothing = input.int(5, title = "Leading Smoothing", minval = 1, group = trend_ribbon_grp)
int ribbon_lagging_smoothing = input.int(8, title = "Lagging Smoothing", minval = 1, group = trend_ribbon_grp)
string reversal_bands_grp = "Reversal Bands"
bool rev_bands_showed = input.bool(true, "Show", group = reversal_bands_grp)
int rev_bands_prd = input.int(30, "Period", group = reversal_bands_grp)


// Methods
method smooth_rng(float src, int prd, float mult) =>
    float rng_avg = ta.ema(math.abs(src - src[1]), prd)
    ta.ema(rng_avg, prd * 2 - 1) * mult

method filter_rng(float src, float rng) =>
    float rng_src = src
    rng_src := src > nz(rng_src[1]) ? src - rng < nz(rng_src[1]) ? nz(rng_src[1]) : src - rng : src + rng > nz(rng_src[1]) ? nz(rng_src[1]) : src + rng

method get_wt(float src, int chl_prd, int avg_prd) =>
    float esa = ta.ema(src, chl_prd)
    float d = ta.ema(math.abs(src - esa), chl_prd)
    float ci = (src - esa) / (0.015 * d)
    float leading_wt = ta.ema(ci, avg_prd)
    float lagging_wt = ta.sma(leading_wt, 3)
    [leading_wt, lagging_wt]

method get_rev_bands(float src, int prd, float sensitivity) =>
    basis = ta.sma(src, prd)
    span = ta.atr(prd)
    [basis + span * sensitivity, basis - span * sensitivity]


float src = close
float leading_range = smooth_rng(src, 27, 1.5)
float lagging_range = smooth_rng(src, 55, sensitivity)
float avg_range = (leading_range + lagging_range) / 2
float clean_range = filter_rng(src, avg_range)
float up = 0.0, up := clean_range > clean_range[1] ? nz(up[1]) + 1 : clean_range < clean_range[1] ? 0 : nz(up[1])
float dn = 0.0, dn := clean_range < clean_range[1] ? nz(dn[1]) + 1 : clean_range > clean_range[1] ? 0 : nz(dn[1])
bool bullish_cond = bool(na), bullish_cond := src > clean_range and src > src[1] and up > 0 or src > clean_range and src < src[1] and up > 0
bool bearish_cond = bool(na), bearish_cond := src < clean_range and src < src[1] and dn > 0 or src < clean_range and src > src[1] and dn > 0
int final_cond = 0, final_cond := bullish_cond ? 1 : bearish_cond ? -1 : final_cond[1]
bool is_bullish = bullish_cond and final_cond[1] == -1
bool is_bearish = bearish_cond and final_cond[1] == 1
[leading_wt, lagging_wt] = get_wt(hlc3, 9, 12)
[upper_rev_s_band, lower_rev_s_band] = get_rev_bands(close, rev_bands_prd, 3)
[upper_rev_m_band, lower_rev_m_band] = get_rev_bands(close, rev_bands_prd, 4)
[upper_rev_l_band, lower_rev_l_band] = get_rev_bands(close, rev_bands_prd, 5)


// Plots
barcolor(up > dn ? aqua_color : purple_color)

float offset_perc = get_width_by_percent(300, signal_offset)
plotshape(buy_sell_signals_showed and is_bullish ? low - offset_perc : na, title = "Buy Label" , style = shape.labelup, location = location.absolute, color = green_color, offset = 0, size = size.tiny, display = display.pane)
plotshape(buy_sell_signals_showed and is_bearish ? high + offset_perc : na, title = "Sell Label", style = shape.labeldown, location = location.absolute, color = red_color, offset = 0, size = size.tiny, display = display.pane)
plotshape(ta.crossover(leading_wt, lagging_wt) and -60 <= lagging_wt and lagging_wt <= -40, title = "Mild Buy" , style = shape.xcross, location = location.belowbar, color = green_color, size = size.tiny, display = display.pane)
plotshape(ta.crossunder(leading_wt, lagging_wt) and 60 >= lagging_wt and lagging_wt >= 40, title = "Mild Sell", style = shape.xcross, location = location.abovebar, color = red_color, size = size.tiny, display = display.pane)

plot(rev_bands_showed ? upper_rev_s_band : na, title = "Upper Reversal Short Band", color = red_color_30, display = display.pane)
plot(rev_bands_showed ? upper_rev_m_band : na, title = "Upper Reversal Medium Band", color = red_color_30, display = display.pane)
plot(rev_bands_showed ? upper_rev_l_band : na, title = "Upper Reversal Long Band", color = red_color_30, display = display.pane)
plot(rev_bands_showed ? lower_rev_l_band : na, title = "Lower Reversal Long Band", color = green_color_30, display = display.pane)
plot(rev_bands_showed ? lower_rev_m_band : na, title = "Lower Reversal Medium Band", color = green_color_30, display = display.pane)
plot(rev_bands_showed ? lower_rev_s_band : na, title = "Lower Reversal Short Band", color = green_color_30, display = display.pane)

float leading_ribbon = ta.sma(close, ribbon_leading_smoothing)
float lagging_ribbon = ta.sma(close, ribbon_lagging_smoothing)
fill(plot(ribbon_showed ? leading_ribbon : na, "", na, editable = false, display = display.pane), plot(ribbon_showed ? lagging_ribbon : na, "", na, editable = false, display = display.pane), color = leading_ribbon > lagging_ribbon ? aqua_color_70 : purple_color_70, title = "Ribbon Fill Color")









//** Volume Profile **//

// Inputs
string vp_grp = "Volume Profile"
int vp_prd = input.int(200, "Period", 1, 500, group = vp_grp)
int vp_smoothing = input.int(3, "Smoothing", 1, 6, group = vp_grp)
int vp_pivot = input.int(3, "Peak Sensitivity", 1, 10, group = vp_grp)
int vp_peak_thresh = input.int(80, "Peak Threshold", group = vp_grp)
int vp_score_len = input.int(20, "Mean Score Length", group = vp_grp)
color vp_high_color = input.color(aqua_color_40, "Histogram Colors", inline = "hist", group = vp_grp)
color vp_low_color = input.color(purple_color_40, "", inline = "hist", group = vp_grp)
int vp_trans = input.int(10, "Transparency", 0, 100, group = vp_grp)
color vp_alpha = color.new(color.black, 100)


// Methods
method get_gamma(float src) =>
    var float math_two_sqrt_over_pi = 1.8603827342052657173362492472666631120594218414085755
    var int gamma_n = 10
    var float gamma_r = 10.900511
    var float[] series_gamma_dk = array.from(
     2.48574089138753565546e-5,
     1.05142378581721974210,
     -3.45687097222016235469,
     4.51227709466894823700,
     -2.98285225323576655721, 
     1.05639711577126713077, 
     -1.95428773191645869583e-1, 
     1.70970543404441224307e-2, 
     -5.71926117404305781283e-4, 
     4.63399473359905636708e-6, 
     -2.71994908488607703910e-9)

    // float z = src

    if src < 0.5
        float s = array.get(series_gamma_dk, 0)

        for int i = 1 to gamma_n by 1
            s += array.get(series_gamma_dk, i) / (i - src)
            s

        gamma = math.pi / math.sin(math.pi * src) * s * math_two_sqrt_over_pi * math.pow((0.5 - src + gamma_r) / math.e, 0.5 - src)
        gamma
    else
        float s = array.get(series_gamma_dk, 0)

        for int i = 1 to gamma_n by 1
            s += array.get(series_gamma_dk, i) / (src + i - 1.0)
            s

        gamma = s * math_two_sqrt_over_pi * math.pow((src - 0.5 + gamma_r) / math.e, src - 0.5)
        gamma

method get_dist_pdf(float x, int v) =>
    get_gamma((v + 1) / 2) / (math.sqrt(v * math.pi) * get_gamma(v / 2)) * math.pow(1 + x * x / v, -(v + 1) / 2)

method rise_factorial(float c, int n) =>
    float product = 1.0

    if n > 0
        for i = 0 to n - 1
            product *= (c + i)
            
    product

method get_hypergeometric(float a, float b, float c, float z) =>
    float sum = 0.0

    for i = 0 to 2
        sum += rise_factorial(a, i) * rise_factorial(b, i) * math.pow(z, i) / (rise_factorial(c, i) * rise_factorial(i, i))
    
    sum

method get_dist_cdf(float x, int v) =>
    1 / 2.0 + x * get_gamma((v + 1) / 2.0) * (get_hypergeometric(1 / 2.0, (v + 1) / 2.0, 3.0 / 2, x * x / v) / (math.sqrt(v * math.pi) * get_gamma(v / 2)))

method round_num(float number)=>
    if number >= 1000000000
        str.tostring(math.round(number / 1000000000, 2)) + " B"
    else if number >= 1000000
        str.tostring(math.round(number / 1000000, 2)) + " M"
    else if number >= 1000
        str.tostring(math.round(number / 1000, 2)) + " K"
    else 
        str.tostring(math.round(number, 2))

int vp_stdev_len = vp_score_len
float vp_mean = ta.sma(close, vp_score_len)
float vp_p = (1 - 0.99) / 2

float vp_lower = -100
float vp_upper = 100
float vp_mid = (vp_lower + vp_upper) / 2

while math.abs(get_dist_cdf(vp_mid, vp_stdev_len - 1) - vp_p) > 0.000001
    if get_dist_cdf(vp_mid, vp_stdev_len - 1) > vp_p
        vp_upper := vp_mid
    else
        vp_lower := vp_mid

    vp_mid := (vp_lower + vp_upper) / 2

float vp_value = vp_mid

if vp_value < 0
    vp_value := -vp_value

float vp_squared_diff = math.pow(open - vp_mean, 2)
float vp_summed_squares = math.sum(vp_squared_diff, vp_stdev_len)
float vp_mean_squared_error = vp_summed_squares / (vp_stdev_len - 1)
float vp_rmse = math.sqrt(vp_mean_squared_error)
float vp_root_standard_error = math.sqrt(1 + 1 / vp_stdev_len + vp_squared_diff / vp_summed_squares)
float vp_offset = vp_value * vp_rmse * vp_root_standard_error

method sinc(int src, int bandwidth) =>
    if src == 0
        1
    else
        math.sin(math.pi * src / bandwidth) / (math.pi * src / bandwidth)

method multi_kernel_regression(float[] src, int prd)=>
    int size = array.size(src)
    float[] estimated_arr = array.new<float>(size)
    float cur_price = na

    for i = 0 to size - 1 
        float sum = 0
        float sumw = 0

        for j = 0 to size - 1 
            diff = i - j
            weight = sinc(diff, prd)
            sum += array.get(src, j) * weight
            sumw += weight

        cur_price := sum / sumw
        array.set(estimated_arr, i, cur_price >= 0 ? cur_price : 0)

    estimated_arr

int vp_cnum = 100
float vp_top = ta.highest(vp_prd)
float vp_bot = ta.lowest(vp_prd)
float vp_dist = (vp_top - vp_bot) / 500
float vp_step = (vp_top - vp_bot) / vp_cnum
float vp_range = vp_step * vp_pivot
float[] vp_levels = array.new_float(vp_cnum + 1)

for x = 0 to vp_cnum by 1
    array.set(vp_levels, x, vp_bot + vp_step * x)

method get_vol(float a, float b, float x, float y, float vol) =>
    // Bar is completely below or above the range
    if y < a or x > b
        0
    // Entire bar is inside the range but doesn't span it
    else if x >= a and y <= b
        p_range = (y - x) / (b - a)
        p_range * vol
    // Bar completely covers the range
    else if x <= a and y >= b
        p_bar = (b - a) / (y - x)
        p_bar * vol
    // Top of the bar is inside the range
    else if x < a and y <= b
        p_bar = (y - a) / (y - x)
        p_bar * vol
    // Bottom of the bar is inside the range
    else if x >= a and y > b
        p_bar = (b - x) / (y - x)
        p_bar * vol
    else
        vol

var lines = array.new<line>()
var probs = array.new<box>()
var volus = array.new<box>()
var float line_float = na

if array.size(lines) > 0
    for i = array.size(lines) - 1 to 0
        line.delete(array.get(lines, i))
        array.remove(lines, i)

    for i = array.size(probs) - 1 to 0
        box.delete(array.get(probs, i))
        array.remove(probs, i)

    for i = array.size(volus) - 1 to 0
        box.delete(array.get(volus, i))
        array.remove(volus, i)
 
if barstate.islast
    float[] _volumes = array.new_float(vp_cnum, 0.)
    float[] bullish_volumes = array.new_float(vp_cnum, 0.)

    for bars = 0 to vp_prd - 1 by 1
        High = high[bars]
        Low = low[bars]
        Volume = volume[bars]
        state = open[bars] < close[bars]

        for x = 0 to vp_cnum - 1 by 1
            array.set(_volumes, x, array.get(_volumes, x) + get_vol(array.get(vp_levels, x), array.get(vp_levels, x + 1), Low, High, Volume))
            
            if state
                array.set(bullish_volumes, x, array.get(bullish_volumes, x) + get_vol(array.get(vp_levels, x), array.get(vp_levels, x + 1), Low, High, Volume))

    float[] smooth_volume = multi_kernel_regression(_volumes, vp_smoothing) 
    var hl = array.new_float(vp_pivot, na)
    var hr = array.new_float(vp_pivot, na)

    for i = 0 to array.size(smooth_volume) - 1
        max = array.max(smooth_volume, i) 
        var previous = 0.
        idx = array.indexof(smooth_volume, max)

        if max > array.percentile_nearest_rank(smooth_volume, vp_peak_thresh)
            for j = 0 to array.size(hl) - 1
                array.set(hl, j, array.get(smooth_volume, math.max(0, idx - 1 - j)))
                array.set(hr, j, array.get(smooth_volume, math.min(array.size(smooth_volume) - 1, idx + 1 + j)))
                            
    color_array = array.new_float(vp_cnum, 0.)

    for i = 0 to vp_cnum - 1
        max_level = array.get(_volumes, i)
        bullish_level = array.get(bullish_volumes, i)
        array.set(color_array, i, bullish_level/max_level)

    maxvol = array.max(_volumes)

    for x = 0 to vp_cnum - 1 by 1
        array.set(_volumes, x, array.get(_volumes, x) * vp_prd / (3 * maxvol))

    normal_volumes = multi_kernel_regression(_volumes, vp_smoothing)
    // edge = bar_index - vp_prd + 1
    int demo = 80
    edge = bar_index + demo
    var vol_bars = array.new_box(vp_cnum, na)

    for i = 0 to vp_cnum - 1 by 1
        box.delete(array.get(vol_bars, i))
        array.set(
         vol_bars, i, 
        //  box.new(edge, 
        //   array.get(levels, i + 1) - dist, 
        //   edge + math.round(array.get(normal_volumes, i)), 
        //   array.get(levels, i) + dist, 
        //   border_width = 0, 
        //   bgcolor = color.new(color.from_gradient(array.get(color_array, i), 0, 1, vp_low_color, vp_high_color), vp_trans))
        //  )
         box.new(edge - math.round(array.get(normal_volumes, i)), 
          array.get(vp_levels, i + 1) - vp_dist, 
          edge, 
          array.get(vp_levels, i) + vp_dist, 
          border_width = 0, 
          bgcolor = color.new(color.from_gradient(array.get(color_array, i), 0, 1, vp_low_color, vp_high_color), vp_trans))
         )
 