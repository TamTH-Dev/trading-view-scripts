// Â© tamth_
// @version=5
indicator("EzAlgo", overlay = true, max_bars_back = 5000, max_lines_count = 500, max_boxes_count = 500, max_labels_count = 500)


// Colors
color transparent_color = color.new(#000000, 100)
color white_color = #ffffff
color yellow_color = #f2e40a
color orange_color = #f2aa0a
color red_color = #e91e62
color aqua_color = #00bbf9
color light_gray_color = #364156
color dark_gray_color = #212d40
color purple_color = #764af1


// General Methods
get_prd_width_by_perc(int prd, int perc) => (ta.highest(prd) - ta.lowest(prd)) * perc / 100

get_tf_txt() =>
    string prd = timeframe.period
    string tf = na

    if str.contains(prd, "S")
        tf := str.length(prd) == 1 ? "1S" : prd
    else if str.contains(prd, "D")
        tf := str.length(prd) == 1 ? "1D" : prd
    else if str.contains(prd, "W")
        tf := str.length(prd) == 1 ? "1W" : prd
    else if str.contains(prd, "M")
        tf := str.length(prd) == 1 ? "1M" : prd
    else
        float mins = str.tonumber(prd)

        if mins >= 60
            tf := str.format("{0}H",  mins / 60)
        else
            tf := str.format("{0}M",  mins)

    tf

extract_tf(simple string prd) =>
    int len = str.length(prd)

    if str.contains(prd, "M")
        if (str.length(prd) == 1)
            [1, "M"]
        else
            [str.tonumber(str.substring(prd, 0, len - 1)), "M"]
    else if str.contains(prd, "W")
        if (str.length(prd) == 1)
            [1, "W"]
        else
            [str.tonumber(str.substring(prd, 0, len - 1)), "W"]
    else if str.contains(prd, "D")
        if (str.length(prd) == 1)
            [1, "D"]
        else
            [str.tonumber(str.substring(prd, 0, len - 1)), "D"]
    else if str.contains(prd, "S")
        if (str.length(prd) == 1)
            [1, "S"]
        else
            [str.tonumber(str.substring(prd, 0, len - 1)), "S"]
    else
        [str.tonumber(prd), ""]

is_tf_equal(simple string res) => res == timeframe.period

is_tf_higher(simple string res) =>
    [cur_prd, cur_unit] = extract_tf(timeframe.period)
    [res_prd, res_unit] = extract_tf(res)

    if res_unit == cur_unit
        res_prd > cur_prd
    else
        if res_unit == "M"
            true
        else if res_unit == "W"
            if cur_unit == "M"
                false
            else
                true
        else if res_unit == "D"
            if cur_unit == "M" or cur_unit == "W"
                false
            else
                true
        else if res_unit == "S"
            false
        else
            if cur_unit == "M" or cur_unit == "W" or cur_unit == "D"
                false
            else
                true


// Debugger
f_print(simple string txt) =>
    // Create label on the first bar.
    var label = label.new(bar_index, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, color.gray, size.large, text.align_left)
    // On next bars, update the label"s x and y position, and the text it displays.
    label.set_xy(label, bar_index, ta.highest(10)[1])
    label.set_text(label, txt)





//** Volume Profile **//

// Inputs
string vp_grp = "Volume Profile"
bool vp_showed = input.bool(true, title = "Show", group = vp_grp)
int vp_prd = input.int(200, "Period", 1, 500, group = vp_grp)
int vp_smoothing = input.int(3, "Smoothing", 1, 6, group = vp_grp)
int vp_pivot = input.int(3, "Peak Sensitivity", 1, 10, group = vp_grp)
int vp_peak_thresh = input.int(80, "Peak Threshold", group = vp_grp)
int vp_offset = input.int(15, "Offset From Last Bar", group = vp_grp)
int vp_trans = input.int(0, "Transparency", 0, 100, group = vp_grp)
color vp_high_color = input.color(light_gray_color, "Histogram Colors", inline = "Histogram Colors", group = vp_grp)
color vp_low_color = input.color(dark_gray_color, "", inline = "Histogram Colors", group = vp_grp)
int vp_compaction_factor = input.int(3, "Compaction Factor", tooltip = "Compact volume profile", minval = 1, maxval = 6, group = vp_grp)


// Methods
get_sin(int src, int bandwidth) =>
    if src == 0
        1
    else
        math.sin(math.pi * src / bandwidth) / (math.pi * src / bandwidth)

get_multi_kernel_regression(float[] src, int prd) =>
    int size = array.size(src)
    float[] estimated_arr = array.new<float>(size)
    float cur_price = na

    for i = 0 to size - 1 
        float sum = 0
        float sumw = 0

        for j = 0 to size - 1 
            diff = i - j
            weight = get_sin(diff, prd)
            sum += array.get(src, j) * weight
            sumw += weight

        cur_price := sum / sumw
        array.set(estimated_arr, i, cur_price >= 0 ? cur_price : 0)

    estimated_arr

int vp_cnum = 500
float vp_top = ta.highest(vp_prd)
float vp_bot = ta.lowest(vp_prd)
float vp_step = (vp_top - vp_bot) / vp_cnum
float[] vp_levels = array.new_float(vp_cnum + 1)

for x = 0 to vp_cnum by 1
    array.set(vp_levels, x, vp_bot + vp_step * x)

get_vol(float a, float b, float x, float y, float vol) =>
    // Bar is completely below or above the range
    if y < a or x > b
        0
    // Entire bar is inside the range but doesn"t span it
    else if x >= a and y <= b
        p_range = (y - x) / (b - a)
        p_range * vol
    // Bar completely covers the range
    else if x <= a and y >= b
        p_bar = (b - a) / (y - x)
        p_bar * vol
    // Top of the bar is inside the range
    else if x < a and y <= b
        p_bar = (y - a) / (y - x)
        p_bar * vol
    // Bottom of the bar is inside the range
    else if x >= a and y > b
        p_bar = (b - x) / (y - x)
        p_bar * vol
    else
        vol

var lines = array.new<line>()
var probs = array.new<box>()
var volus = array.new<box>()
var float line_float = na

if array.size(lines) > 0
    for i = array.size(lines) - 1 to 0
        line.delete(array.get(lines, i))
        array.remove(lines, i)

    for i = array.size(probs) - 1 to 0
        box.delete(array.get(probs, i))
        array.remove(probs, i)

    for i = array.size(volus) - 1 to 0
        box.delete(array.get(volus, i))
        array.remove(volus, i)


// Plots
if barstate.islast and vp_showed
    float[] _vols = array.new_float(vp_cnum, 0.)
    float[] _bullish_vols = array.new_float(vp_cnum, 0.)

    for bars = 0 to vp_prd - 1 by 1
        float _high = high[bars]
        float _low = low[bars]
        float _vol = volume[bars]
        bool _is_bullish = open[bars] < close[bars]

        for x = 0 to vp_cnum - 1 by 1
            array.set(_vols, x, array.get(_vols, x) + get_vol(array.get(vp_levels, x), array.get(vp_levels, x + 1), _low, _high, _vol))
            
            if _is_bullish
                array.set(_bullish_vols, x, array.get(_bullish_vols, x) + get_vol(array.get(vp_levels, x), array.get(vp_levels, x + 1), _low, _high, _vol))
                            
    float[] colors = array.new_float(vp_cnum, 0.)

    for i = 0 to vp_cnum - 1
        float max_level = array.get(_vols, i)
        float bullish_level = array.get(_bullish_vols, i)
        array.set(colors, i, bullish_level / max_level)

    float max_vol = array.max(_vols)

    for x = 0 to vp_cnum - 1 by 1
        array.set(_vols, x, array.get(_vols, x) * vp_prd / (3 * max_vol))

    float[] normal_vols = get_multi_kernel_regression(_vols, vp_smoothing)
    int edge = bar_index + math.round(array.max(normal_vols) / vp_compaction_factor) + vp_offset
    var vol_bars = array.new_box(vp_cnum, na)

    for i = 0 to vp_cnum - 1 by 1
        box.delete(array.get(vol_bars, i))
        int vol = math.round(array.get(normal_vols, i) / vp_compaction_factor)
        color box_color = vol > 0 ? color.new(color.from_gradient(array.get(colors, i), 0, 1, vp_low_color, vp_high_color), vp_trans) : transparent_color
        box vol_box = box.new(edge - vol, array.get(vp_levels, i + 1), edge, array.get(vp_levels, i), border_width = 0, bgcolor = box_color)
        array.set(vol_bars, i, vol_box)





//** S/R **//

// Inputs
string sr_grp = "S/R"
bool sr_showed = input.bool(true, title = "Show", group = sr_grp)
int sr_prd = input.int(284, title = "Period", group = sr_grp)
color sr_support_color = input.color(#00bbf94d, title = "Support Color", group = sr_grp)
color sr_resistance_color = input.color(#e91e624d, title = "Resistance Color", group = sr_grp)
int sr_strength = input.int(2, title = "Strength", minval = 1, group = sr_grp)
int sr_zone_width_percent = input.int(1, title = "Zone Width In %", minval = 0, group = sr_grp)
color sr_val_color = input.color(#ffffff, title = "Value Color", group = sr_grp)


// Methods
get_sr_val_txt(float val) =>
    string tf = get_tf_txt()

    str.format("{0} | {1}", tf, val)

build_sr_val_box(float top, float bot, float val, float v_padding) =>
    int sr_txt_offset = bar_index + 24
    box.new(sr_txt_offset, top - v_padding / 5, sr_txt_offset + 150, bot + v_padding / 5, bgcolor = transparent_color, border_width = 0, text = get_sr_val_txt(val), text_color = sr_val_color, text_size = size.small, text_valign = text.align_center, text_halign = text.align_left, extend = extend.right)


// Plots
int sr_size = 21
int sr_rb = 10
float sr_ph = ta.pivothigh(sr_rb, sr_rb)
float sr_pl = ta.pivotlow(sr_rb, sr_rb)
var sr_levels = array.new_float(sr_size, na)
float sr_highest_val = ta.highest(sr_prd)
float sr_lowest_val = ta.lowest(sr_prd)
float sr_channel_width = get_prd_width_by_perc(sr_prd, 10)
float sr_zone_width = get_prd_width_by_perc(300, sr_zone_width_percent)
bool[] sr_aas = array.new_bool(41, true)
float sr_highest_ph = 0.0, sr_highest_ph := sr_highest_ph[1]
float sr_lowest_pl = 0.0, sr_lowest_pl := sr_lowest_pl[1]
var sr_levels_clone = array.new_float(sr_size, na)
var sr_area_boxes = array.new_box(sr_size, na)
var sr_val_boxes = array.new_box(sr_size, na)

if (sr_ph or sr_pl) and sr_showed
    for i = 0 to array.size(sr_levels) - 1
        array.set(sr_levels, i, na)

    sr_highest_ph := sr_lowest_val
    sr_lowest_pl := sr_highest_val
    int pp_count = 0

    for i = 0 to sr_prd
        if na(close[i])
            break

        if not na(sr_ph[i]) or not na(sr_pl[i])
            sr_highest_ph := math.max(sr_highest_ph, nz(sr_ph[i], sr_lowest_val), nz(sr_pl[i], sr_lowest_val))
            sr_lowest_pl := math.min(sr_lowest_pl, nz(sr_ph[i], sr_highest_val), nz(sr_pl[i], sr_highest_val))
            pp_count += 1

            if pp_count > 40
                break

            if array.get(sr_aas, pp_count)
                upl = (sr_ph[i] ? high[i + sr_rb] : low[i + sr_rb]) + sr_channel_width
                dnl = (sr_ph[i] ? high[i + sr_rb] : low[i + sr_rb]) - sr_channel_width
                tmp = array.new_bool(41, true)
                count = 0
                points = 0

                for j = 0 to sr_prd
                    if na(close[j])
                        break

                    if not na(sr_ph[j]) or not na(sr_pl[j])
                        chg = false
                        count += 1

                        if count > 40
                            break

                        if array.get(sr_aas, count)
                            if not na(sr_ph[j])
                                if high[j + sr_rb] <= upl and high[j + sr_rb] >= dnl
                                    points += 1
                                    chg := true

                            if not na(sr_pl[j])
                                if low[j + sr_rb] <= upl and low[j + sr_rb] >= dnl
                                    points += 1
                                    chg := true

                        if chg and count < 41
                            array.set(tmp, count, false)

                if points >= sr_strength
                    for g = 0 to 40 by 1
                        if not array.get(tmp, g)
                            array.set(sr_aas, g, false)

                    if sr_ph[i] and pp_count < sr_size
                        array.set(sr_levels, pp_count, high[i + sr_rb])

                    if sr_pl[i] and pp_count < sr_size
                        array.set(sr_levels, pp_count, low[i + sr_rb])

if sr_showed
    var box sr_highest_area_box = na, box.delete(sr_highest_area_box)
    var box sr_lowest_area_box = na, box.delete(sr_lowest_area_box)
    var box sr_highest_val_box = na, box.delete(sr_highest_val_box)
    var box sr_lowest_val_box = na, box.delete(sr_lowest_val_box)
    color sr_highest_color = close >= sr_highest_ph ? sr_support_color : sr_resistance_color
    color sr_lowest_color = close >= sr_lowest_pl ? sr_support_color : sr_resistance_color
    float sr_highest_top = sr_highest_ph + sr_zone_width
    float sr_highest_bot = sr_highest_ph - sr_zone_width
    float sr_lowest_top = sr_lowest_pl + sr_zone_width
    float sr_lowest_bot = sr_lowest_pl - sr_zone_width
    sr_highest_area_box := box.new(bar_index, sr_highest_top, bar_index, sr_highest_bot, extend = extend.both, bgcolor = sr_highest_color, border_width = 0)
    sr_lowest_area_box := box.new(bar_index, sr_lowest_top, bar_index, sr_lowest_bot, extend = extend.both, bgcolor = sr_lowest_color, border_width = 0)
    sr_highest_val_box := build_sr_val_box(sr_highest_top, sr_highest_bot, sr_highest_ph, sr_zone_width)
    sr_lowest_val_box := build_sr_val_box(sr_lowest_top, sr_lowest_bot, sr_lowest_pl, sr_zone_width)

    if sr_ph or sr_pl
        for i = 0 to array.size(sr_area_boxes) - 1
            array.set(sr_levels_clone, i, array.get(sr_levels, i))

    for i = 0 to array.size(sr_area_boxes) - 1
        box.delete(array.get(sr_area_boxes, i))
        box.delete(array.get(sr_val_boxes, i))

        if array.get(sr_levels_clone, i)
            color line_color = close >= array.get(sr_levels_clone, i) ? sr_support_color : sr_resistance_color
            float level = array.get(sr_levels_clone, i)
            float top = level + sr_zone_width
            float bot = level - sr_zone_width
            bool top_existed = math.abs(level - sr_highest_ph) < sr_zone_width
            bool bot_existed = math.abs(level - sr_lowest_pl) < sr_zone_width

            if (not top_existed and not bot_existed)
                array.set(sr_area_boxes, i, box.new(bar_index, top, bar_index, bot, extend = extend.both, bgcolor = line_color, border_width = 0))
                array.set(sr_val_boxes, i, build_sr_val_box(top, bot, level, sr_zone_width))





//** Signals **//

// Inputs
string buy_sell_grp = "Buy & Sell Signals"
bool buy_sell_signals_showed = input.bool(true, title = "Show", group = buy_sell_grp)
float sensitivity = input.float(1.7, title = "Sensitivity", minval = 1, maxval = 6, group = buy_sell_grp)
string trend_ribbon_grp = "Trend Ribbon"
bool ribbon_showed = input.bool(false, title = "Show", group = trend_ribbon_grp)
int ribbon_leading_smoothing = input.int(5, title = "Leading Smoothing", minval = 1, group = trend_ribbon_grp)
int ribbon_lagging_smoothing = input.int(8, title = "Lagging Smoothing", minval = 1, group = trend_ribbon_grp)
string reversal_bands_grp = "Reversal Bands"
bool rev_bands_showed = input.bool(true, "Show", group = reversal_bands_grp)
int rev_bands_prd = input.int(30, "Period", group = reversal_bands_grp)
string custom_bar_colors_grp = "Custom Bar Colors"
bool custom_bar_colors_used = input.bool(false, "Use", group = custom_bar_colors_grp)


// Methods
smooth_rng(float src, int prd, float mult) =>
    float rng_avg = ta.ema(math.abs(src - src[1]), prd)
    ta.ema(rng_avg, prd * 2 - 1) * mult

filter_rng(float src, float rng) =>
    float rng_src = src
    rng_src := src > nz(rng_src[1]) ? src - rng < nz(rng_src[1]) ? nz(rng_src[1]) : src - rng : src + rng > nz(rng_src[1]) ? nz(rng_src[1]) : src + rng

get_wt(float src, int chl_prd, int avg_prd) =>
    float esa = ta.ema(src, chl_prd)
    float d = ta.ema(math.abs(src - esa), chl_prd)
    float ci = (src - esa) / (0.015 * d)
    float leading_wt = ta.ema(ci, avg_prd)
    float lagging_wt = ta.sma(leading_wt, 3)
    [leading_wt, lagging_wt]

get_rev_bands(float src, int prd, float sensitivity) =>
    basis = ta.sma(src, prd)
    span = ta.atr(prd)
    [basis + span * sensitivity, basis - span * sensitivity]


float src = close
float leading_range = smooth_rng(src, 27, 1.5)
float lagging_range = smooth_rng(src, 55, sensitivity)
float avg_range = (leading_range + lagging_range) / 2
float clean_range = filter_rng(src, avg_range)
float up_signal = 0.0, up_signal := clean_range > clean_range[1] ? nz(up_signal[1]) + 1 : clean_range < clean_range[1] ? 0 : nz(up_signal[1])
float dn_signal = 0.0, dn_signal := clean_range < clean_range[1] ? nz(dn_signal[1]) + 1 : clean_range > clean_range[1] ? 0 : nz(dn_signal[1])
bool bullish_cond = bool(na), bullish_cond := src > clean_range and src > src[1] and up_signal > 0 or src > clean_range and src < src[1] and up_signal > 0
bool bearish_cond = bool(na), bearish_cond := src < clean_range and src < src[1] and dn_signal > 0 or src < clean_range and src > src[1] and dn_signal > 0
int final_cond = 0, final_cond := bullish_cond ? 1 : bearish_cond ? -1 : final_cond[1]
bool is_bullish = bullish_cond and final_cond[1] == -1
bool is_bearish = bearish_cond and final_cond[1] == 1
[leading_wt, lagging_wt] = get_wt(hlc3, 9, 12)
[upper_rev_sm_band, lower_rev_sm_band] = get_rev_bands(close, rev_bands_prd, 3)
[upper_rev_md_band, lower_rev_md_band] = get_rev_bands(close, rev_bands_prd, 4)
[upper_rev_lg_band, lower_rev_lg_band] = get_rev_bands(close, rev_bands_prd, 5)


// Custom bars' color
barcolor(custom_bar_colors_used ? (up_signal > dn_signal ? aqua_color : red_color) : na, title = "Custom Bar Colors", editable = false)


// Plots
bool has_mild_buy_signal = ta.crossover(leading_wt, lagging_wt) and lagging_wt <= -53
bool has_mild_sell_signal = ta.crossunder(leading_wt, lagging_wt) and lagging_wt >= 53
bool consistent_buy_signal = is_bullish and has_mild_buy_signal
bool consistent_sell_signal = is_bearish and has_mild_sell_signal
plotshape(buy_sell_signals_showed and is_bullish and not consistent_buy_signal, title = "Bullish Buy Signal" , style = shape.labelup, location = location.belowbar, color = aqua_color, size = size.small, display = display.pane)
plotshape(buy_sell_signals_showed and is_bearish and not consistent_sell_signal, title = "Bearish Sell Signal", style = shape.labeldown, location = location.abovebar, color = red_color, size = size.small, display = display.pane)
plotshape(buy_sell_signals_showed and has_mild_buy_signal and not consistent_buy_signal, title = "Mild Buy Signal" , style = shape.xcross, location = location.belowbar, color = aqua_color, size = size.tiny, display = display.pane)
plotshape(buy_sell_signals_showed and has_mild_sell_signal and not consistent_sell_signal, title = "Mild Sell Signal", style = shape.xcross, location = location.abovebar, color = red_color, size = size.tiny, display = display.pane)
plotshape(buy_sell_signals_showed and consistent_buy_signal, title = "Consistent Buy Signal" , style = shape.triangleup, location = location.belowbar, color = yellow_color, size = size.small, display = display.pane)
plotshape(buy_sell_signals_showed and consistent_sell_signal, title = "Consistent Sell Signal", style = shape.triangledown, location = location.abovebar, color = orange_color, size = size.small, display = display.pane)

var upper_rev_sm_band_plot = plot(rev_bands_showed ? upper_rev_sm_band : na, title = "Upper Reversal Sm Band", color = transparent_color, display = display.pane)
var upper_rev_md_band_plot = plot(rev_bands_showed ? upper_rev_md_band : na, title = "Upper Reversal Md Band", color = color.new(color.white, 97), display = display.pane)
var upper_rev_lg_band_plot = plot(rev_bands_showed ? upper_rev_lg_band : na, title = "Upper Reversal Lg Band", color = color.new(color.white, 97), display = display.pane)
fill(upper_rev_sm_band_plot, upper_rev_md_band_plot, color.new(red_color, 85))
fill(upper_rev_md_band_plot, upper_rev_lg_band_plot, color.new(red_color, 80))
var lower_rev_lg_band_plot = plot(rev_bands_showed ? lower_rev_lg_band : na, title = "Lower Reversal Lg Band", color = color.new(color.white, 97), display = display.pane)
var lower_rev_md_band_plot = plot(rev_bands_showed ? lower_rev_md_band : na, title = "Lower Reversal Md Band", color = color.new(color.white, 97), display = display.pane)
var lower_rev_sm_band_plot = plot(rev_bands_showed ? lower_rev_sm_band : na, title = "Lower Reversal Sm Band", color = transparent_color, display = display.pane)
fill(lower_rev_sm_band_plot, lower_rev_md_band_plot, color.new(aqua_color, 85))
fill(lower_rev_md_band_plot, lower_rev_lg_band_plot, color.new(aqua_color, 80))

float leading_ribbon = ta.sma(close, ribbon_leading_smoothing)
float lagging_ribbon = ta.sma(close, ribbon_lagging_smoothing)
fill(plot(ribbon_showed ? leading_ribbon : na, "", na, editable = false, display = display.pane), plot(ribbon_showed ? lagging_ribbon : na, "", na, editable = false, display = display.pane), color = leading_ribbon > lagging_ribbon ? color.new(aqua_color, 70) : color.new(red_color, 70), title = "Ribbon Fill Color")




//** Master Pattern **//

// Inputs
// string mp_grp = "Master Pattern"
// int mp_contraction_lookback = input.int(3, "Contraction Detection Lookback", minval = 1, group = mp_grp)
// int mp_liq_levels = input.int(20, "Liquidity Levels", minval = 1, group = mp_grp)
// bool mp_major_showed = input.bool(true, "Show Major Pattern", group = mp_grp)
// bool mp_minor_showed = input.bool(true, "Show Minor Pattern", group = mp_grp)
// color mp_bullish_color = input.color(green_color_40, "Bullish Pattern", inline = "Bullish Pattern", group = mp_grp)
// bool mp_bullish_box_showed = input.bool(true, "Area", inline = "bull", group = mp_grp)
// bool mp_bullish_line_showed = input.bool(true, "Line", inline = "bull", group = mp_grp)
// color mp_bearish_color = input.color(red_color_40, "Bearish Pattern", inline = "Bearish Pattern", group = mp_grp)
// bool mp_bearish_box_showed = input.bool(true, "Area", inline = "bear", group = mp_grp)
// bool mp_bearish_line_showed = input.bool(true, "Line", inline = "bear", group = mp_grp)
// bool mp_liq_levels_showed = input.bool(true, "Show Liquidity Levels", group = mp_grp)
// color mp_bullish_liq_color = input.color(green_color_40, "Upper Liquidity", group = mp_grp)
// color mp_bearish_liq_color = input.color(red_color_40, "Lower Liquidity", group = mp_grp)

// type master_pattern
//     box area
//     line avg
//     bool break_up
//     bool break_down

// var mp_phy = 0., var mp_phx = 0, var mp_pht = 0.
// var mp_ply = 0., var mp_plx = 0, var mp_plt = 0.
// var float mp_top = na
// var float mp_btm = na
// int mp_bar_idx = bar_index
// float mp_ph = ta.pivothigh(mp_contraction_lookback, mp_contraction_lookback)
// float mp_pl = ta.pivotlow(mp_contraction_lookback, mp_contraction_lookback)

// if mp_ph
//     mp_pht := math.sign(mp_ph - mp_phy)
//     mp_phy := mp_ph

//     if mp_pht == -1 and mp_plt == 1
//         mp_top := mp_ph
//         mp_btm := mp_ply
//         mp_phx := mp_bar_idx - mp_contraction_lookback

// if mp_pl
//     mp_plt := math.sign(mp_pl - mp_ply)
//     mp_ply := mp_pl

//     if mp_pht  == -1 and mp_plt == 1
//         mp_top := mp_phy
//         mp_btm := mp_pl
//         mp_plx := mp_bar_idx - mp_contraction_lookback

// var master_pattern master = master_pattern.new()
// bool mp_is_bullish = high[mp_contraction_lookback] > mp_top and mp_top > mp_btm
// bool mp_is_bearish = low[mp_contraction_lookback] < mp_btm and mp_top > mp_btm

// if mp_is_bullish or mp_is_bearish
//     color style_color = mp_is_bullish ? mp_bullish_color : mp_bearish_color
//     master.avg.set_x2(mp_bar_idx - mp_contraction_lookback)
//     val = math.avg(mp_top, mp_btm)

//     master := master_pattern.new(
//       (mp_is_bullish and mp_bullish_box_showed) or (mp_is_bearish and mp_bearish_box_showed) ? box.new(math.max(mp_phx, mp_plx), mp_top, mp_bar_idx - mp_contraction_lookback, mp_btm, na, bgcolor = mp_minor_showed ? color.new(style_color, 80) : na) : na
//       , (mp_is_bullish and mp_bullish_line_showed) or (mp_is_bearish and mp_bearish_line_showed) ? line.new(mp_bar_idx - mp_contraction_lookback, val, mp_bar_idx, val, color = mp_minor_showed ? style_color : na) : na
//       , mp_is_bullish
//       , mp_is_bearish)
//     mp_top := na
//     mp_btm := na

// if master.break_up
//     if low < master.area.get_bottom()
//         if not mp_major_showed
//             master.area.delete()
//             master.avg.delete()
//         else
//             master.area.set_border_color(mp_bullish_color)

//             if not mp_minor_showed
//                 master.area.set_bgcolor(color.new(mp_bullish_color, 50))
//                 master.avg.set_color(mp_bullish_color)
// else if master.break_down
//     if high > master.area.get_top()
//         if not mp_major_showed
//             master.area.delete()
//             master.avg.delete()
//         else
//             master.area.set_border_color(mp_bearish_color)

//             if not mp_minor_showed
//                 master.area.set_bgcolor(color.new(mp_bearish_color, 50))
//                 master.avg.set_color(mp_bearish_color)

// if not na(master.avg)
//     master.avg.set_x2(mp_bar_idx)

// var line mp_liq_up = na, var mp_liq_up_reach = false
// var line mp_liq_dn = na, var mp_liq_dn_reach = false
// float mp_liq_ph = ta.pivothigh(mp_liq_levels, mp_liq_levels)
// float mp_liq_pl = ta.pivotlow(mp_liq_levels, mp_liq_levels)

// if mp_liq_ph and mp_liq_levels_showed
//     if not mp_liq_up_reach
//         mp_liq_up.set_x2(mp_bar_idx - mp_liq_levels)

//     mp_liq_up := line.new(mp_bar_idx - mp_liq_levels, mp_liq_ph, mp_bar_idx, mp_liq_ph, color = mp_bullish_liq_color, style = line.style_dotted)
//     mp_liq_up_reach := false
// else if not mp_liq_up_reach and mp_liq_levels_showed
//     mp_liq_up.set_x2(mp_bar_idx)

//     if high > mp_liq_up.get_y1()
//         mp_liq_up_reach := true

// if mp_liq_pl and mp_liq_levels_showed
//     if not mp_liq_dn_reach
//         mp_liq_dn.set_x2(mp_bar_idx - mp_liq_levels)

//     mp_liq_dn := line.new(mp_bar_idx - mp_liq_levels, mp_liq_pl, mp_bar_idx, mp_liq_pl, color = mp_bearish_liq_color, style = line.style_dotted)
//     mp_liq_dn_reach := false
// else if not mp_liq_dn_reach and mp_liq_levels_showed
//     mp_liq_dn.set_x2(mp_bar_idx)

//     if low < mp_liq_dn.get_y1()
//         mp_liq_dn_reach := true





//** Dashboard **//

// Inputs
string db_grp = "Dashboard"
bool db_showed = input.bool(true, "Show Dashboard", group = db_grp)
string db_location = input.string("Top Right", "Table Location", ["Top Right", "Middle Right", "Bottom Right", "Top Center", "Middle Center", "Bottom Center", "Top Left", "Middle Left", "Bottom Left"], group = db_grp)
color db_txt_color = input.color(#EEEEEE, "Table Text Color", group = db_grp)
color db_bg_color = input.color(#1A1A1A, "Table Background Color", group = db_grp)
string db_size = input.string("Small", "Table Size", ["Large", "Normal", "Small", "Tiny"], group = db_grp)
var _db_location = db_location == "Top Right" ? position.top_right : db_location == "Middle Right" ? position.middle_right : db_location == "Bottom Right" ? position.bottom_right : db_location == "Top Center" ? position.top_center : db_location == "Middle Center" ? position.middle_center : db_location == "Bottom Center" ? position.bottom_center : db_location == "Top Left" ? position.top_left : db_location == "Middle Left" ? position.middle_left : position.bottom_left
var _db_size = db_size == "Large" ? size.large : db_size == "Normal" ? size.normal : db_size == "Small" ? size.small : size.tiny
var db_instance = db_showed ? table.new(_db_location, 3, 7, db_bg_color, #0A0A0A, 2, db_bg_color, 1) : na


// Methods
build_db_cell(int col, int row, string txt) => table.cell(db_instance, col, row, txt, 0, 0, db_txt_color, text_size = _db_size)

get_status_and_strength(float price, series float ema_21, series float ema_144) =>
    if price > ema_144
        int strength = price > ema_21 and ema_21 > ema_144 ? 2 : 1
        [true, strength]
    else if price < ema_144
        int strength = price < ema_21 and ema_21 < ema_144 ? 2 : 1
        [false, strength]
    else
        [false, 1]

get_status_and_strength_by_tf(simple string res) =>
    float eh_price = request.security(syminfo.tickerid, res, close, barmerge.gaps_off, barmerge.lookahead_on)
    float eh_ema_21 = request.security(syminfo.tickerid, res, ta.ema(close, 21), barmerge.gaps_off, barmerge.lookahead_on)
    float eh_ema_144 = request.security(syminfo.tickerid, res, ta.ema(close, 144), barmerge.gaps_off, barmerge.lookahead_on)

    float l_price = na
    float l_ema_21 = na
    float l_ema_144 = na
    float[] l_prices = request.security_lower_tf(syminfo.tickerid, not is_tf_equal(res) and not is_tf_higher(res) ? res : timeframe.period, close)
    float[] l_emas_21 = request.security_lower_tf(syminfo.tickerid, not is_tf_equal(res) and not is_tf_higher(res) ? res : timeframe.period, ta.ema(close, 21))
    float[] l_emas_144 = request.security_lower_tf(syminfo.tickerid, not is_tf_equal(res) and not is_tf_higher(res) ? res : timeframe.period, ta.ema(close, 144))

    if array.size(l_prices) > 0
        l_price := array.get(l_prices, array.size(l_prices) - 1)

    if array.size(l_emas_21) > 0
        l_ema_21 := array.get(l_emas_21, array.size(l_emas_21) - 1)

    if array.size(l_emas_144) > 0
        l_ema_144 := array.get(l_emas_144, array.size(l_emas_144) - 1)

    array.clear(l_prices)
    array.clear(l_emas_21)
    array.clear(l_emas_144)

    if is_tf_equal(res) or is_tf_higher(res)
        get_status_and_strength(eh_price, eh_ema_21, eh_ema_144)
    else
        get_status_and_strength(l_price, l_ema_21, l_ema_144)

[is_tf_1h_bullish, tf_1h_strength] = get_status_and_strength_by_tf("60")
[is_tf_4h_bullish, tf_4h_strength] = get_status_and_strength_by_tf("240")
[is_tf_8h_bullish, tf_8h_strength] = get_status_and_strength_by_tf("480")
[is_tf_12h_bullish, tf_12h_strength] = get_status_and_strength_by_tf("720")
[is_tf_daily_bullish, tf_daily_strength] = get_status_and_strength_by_tf("D")
[is_tf_weekly_bullish, tf_weekly_strength] = get_status_and_strength_by_tf("W")


// Plots
if barstate.islast and db_showed
    build_db_cell(0, 0, "Timeframe")
    build_db_cell(0, 1, "1H")
    build_db_cell(0, 2, "4H")
    build_db_cell(0, 3, "8H")
    build_db_cell(0, 4, "12H")
    build_db_cell(0, 5, "Daily")
    build_db_cell(0, 6, "Weekly")
    string bullish_icon = "ð¢"
    string bearish_icon = "ð´"
    build_db_cell(1, 0, "Bias")
    build_db_cell(1, 1, is_tf_1h_bullish ? bullish_icon : bearish_icon)
    build_db_cell(1, 2, is_tf_4h_bullish ? bullish_icon : bearish_icon)
    build_db_cell(1, 3, is_tf_8h_bullish ? bullish_icon : bearish_icon)
    build_db_cell(1, 4, is_tf_12h_bullish ? bullish_icon : bearish_icon)
    build_db_cell(1, 5, is_tf_daily_bullish ? bullish_icon: bearish_icon)
    build_db_cell(1, 6, is_tf_weekly_bullish ? bullish_icon : bearish_icon)
    string weak_strength_icon = "ð"
    string strong_strength_icon = "ðð"
    build_db_cell(2, 0, "Strength")
    build_db_cell(2, 1, tf_1h_strength == 1 ? weak_strength_icon : strong_strength_icon)
    build_db_cell(2, 2, tf_4h_strength == 1 ? weak_strength_icon : strong_strength_icon)
    build_db_cell(2, 3, tf_8h_strength == 1 ? weak_strength_icon : strong_strength_icon)
    build_db_cell(2, 4, tf_12h_strength == 1 ? weak_strength_icon : strong_strength_icon)
    build_db_cell(2, 5, tf_daily_strength == 1 ? weak_strength_icon : strong_strength_icon)
    build_db_cell(2, 6, tf_weekly_strength == 1 ? weak_strength_icon : strong_strength_icon)


//** Golden Pocket **//

// Inputs
string gp_grp = "Golden Pocket"
bool gp_showed = input.bool(true, "Show", group = gp_grp)
string gp_depth_tooltip = "The minimum number of bars that will be taken into account when calculating the indicator."
int gp_depth = input.int(10, "Depth", group = gp_grp, tooltip = gp_depth_tooltip)
string gp_dev_tooltip = "Deviation is a multiplier that affects how much the price should deviate from the previous pivot in order for the bar to become a new pivot."
float gp_threshold_multiplier = input.float(3, "Deviation", group = gp_grp, tooltip = gp_dev_tooltip)
color gp_color = input.color(yellow_color, "Color", group = gp_grp)


// Methods
type Settings
    float dev_threshold = 3
    int depth = 10

type Point
    int unix_time
    float price

type Pivot
    bool is_high 
    float vol
    Point start
    Point end

type ZigZag
    Settings settings
    array<Pivot> pivots
    float vol_total = 0
    Pivot extend = na


find_pivot_point(series float src, series float len, simple bool is_high) =>
    float pivot = nz(src[len])

    if len == 0
        Point.new(time, pivot)
    else if len * 2 <= bar_index
        bool found = true

        for i = 0 to math.abs(len - 1)
            if (is_high and src[i] > pivot) or (not is_high and src[i] < pivot)
                found := false
                break

        for i = len + 1 to 2 * len
            if (is_high and src[i] >= pivot) or (not is_high and src[i] <= pivot)
                found := false
                break

        if found
            Point.new(time[len], pivot)

calc_dev(series float base_price, series float price) =>
    float result = 100 * (price - base_price) / math.abs(base_price)

method update_pivot(Pivot this, Point end, float vol, Settings settings) =>
    this.end := end
    this.vol := vol

get_new_pivot(series Point start, series Point end, series float vol, series bool is_high, series Settings settings) =>
    Pivot pivot = Pivot.new(is_high, vol, start, end)
    pivot.update_pivot(end, vol, settings)
    pivot

method is_price_higher(series Pivot this, series Point point) => 
    int mult = this.is_high ? 1 : -1
    point.price * mult > this.end.price * mult

method get_last_pivot(series ZigZag this) =>
    int size = this.pivots.size()
    size > 0 ? this.pivots.get(size - 1) : na

method update_last_pivot(series ZigZag this, series Point point) =>
    Pivot last_pivot = this.get_last_pivot()

    if this.pivots.size() == 1
        last_pivot.start := point

    last_pivot.update_pivot(point, last_pivot.vol + this.vol_total, this.settings)
    this.vol_total := 0

method add_new_pivot(series ZigZag this, series Pivot pivot) =>
    this.pivots.push(pivot)
    this.vol_total := 0

method has_new_pivot_point_found(series ZigZag this, simple bool is_high, series Point point) =>
    bool found = false
    Pivot last_pivot = this.get_last_pivot()

    if not na(last_pivot)
        if last_pivot.is_high == is_high 
            if last_pivot.is_price_higher(point)
                this.update_last_pivot(point)
                found := true
        else
            float dev = calc_dev(last_pivot.end.price, point.price)

            if (not last_pivot.is_high and dev >= this.settings.dev_threshold) or (last_pivot.is_high and dev <= -1 * this.settings.dev_threshold)
                this.add_new_pivot(get_new_pivot(last_pivot.end, point, this.vol_total, is_high, this.settings))
                found := true
    else
        this.add_new_pivot(get_new_pivot(point, point, this.vol_total, is_high, this.settings))
        found := true

    found

method find_pivot(series ZigZag this, series float src, simple bool is_high, series int depth, series bool pivot_registered = true) =>
    Point point = find_pivot_point(src, depth, is_high)
    not na(point) and pivot_registered ? this.has_new_pivot_point_found(is_high, point) : false

method update_zigzag(series ZigZag this, series float vols, series float high_val, series float low_val, series int time_val) =>
    int depth = math.max(2, math.floor(this.settings.depth / 2))
    this.vol_total += nz(vols[depth])
    bool updated = this.find_pivot(high_val, true, depth)
    updated := this.find_pivot(low_val, false, depth, not updated) or updated
    Pivot last_pivot = this.get_last_pivot()
    float rem_vol = math.sum(vols, math.max(depth, 1))

    if barstate.islast and not na(last_pivot)
        bool is_high = not last_pivot.is_high
        float cur_series = is_high ? high_val : low_val
        Point end = Point.new(time_val, cur_series)

        if na(this.extend) or updated
            this.extend := get_new_pivot(last_pivot.end, end, this.vol_total, is_high, this.settings)

        this.extend.update_pivot(end, this.vol_total + rem_vol, this.settings)

    updated

init_zigzag(series Settings settings = na) =>
    ZigZag result = ZigZag.new(na(settings) ? Settings.new() : settings, array.new<Pivot>())

get_gp_vals(series float close_val, series float vol_val, series float high_val, series float low_val, series int time_val) =>
    var settings = Settings.new(gp_threshold_multiplier, gp_depth)
    var ZigZag zigzag_instance = init_zigzag(settings)
    var Pivot last_pivot = na
    var float start_price = na
    var float height = na
    settings.dev_threshold := ta.atr(10) / close_val * 100 * gp_threshold_multiplier

    if zigzag_instance.update_zigzag(vol_val, high_val, low_val, time_val)
        last_pivot := zigzag_instance.get_last_pivot()

        if not na(last_pivot)
            var line last_line = na

            if na(last_line)
                last_line := line.new(last_pivot.start.unix_time, last_pivot.start.price, last_pivot.end.unix_time, last_pivot.end.price, xloc = xloc.bar_time, color = color.new(gp_color, 20), width = 1, style = line.style_dashed)
            else
                line.set_xy1(last_line, last_pivot.start.unix_time, last_pivot.start.price)
                line.set_xy2(last_line, last_pivot.end.unix_time, last_pivot.end.price)

            start_price := last_pivot.end.price
            end_price = last_pivot.start.price
            height := (start_price > end_price ? -1 : 1) * math.abs(start_price - end_price)

    [last_pivot, start_price, height]

[gp_last_pivot, gp_start_price, gp_height] = get_gp_vals(close, volume, high, low, time)

draw_fib_level(Pivot pivot, float level, color color, float line_width) =>
    var box fib_line = na, box.delete(fib_line)
    fib_line := box.new(pivot.start.unix_time, level + line_width / 2, time, level - line_width / 2, xloc = xloc.bar_time, bgcolor = gp_color, border_color = gp_color, border_width = 0, extend = extend.right)

process_fib_level(Pivot pivot, series float start_price, series float height, simple float val, color color) =>
	float level = start_price + height * val

    if not na(pivot)
		draw_fib_level(pivot, level, color, height / 200)
        level
    else
        na


// Plots
if gp_showed
    float level_618 = process_fib_level(gp_last_pivot, gp_start_price, gp_height, 0.618, gp_color)
    float level_65 = process_fib_level(gp_last_pivot, gp_start_price, gp_height, 0.65, gp_color)
    var box gp_val_box = na, box.delete(gp_val_box)
    int gp_val_offset = bar_index + 8
    float gp_top_offset = gp_height > 0 ? level_65 : level_618
    gp_val_box := box.new(gp_val_offset, gp_top_offset + get_prd_width_by_perc(300, 1), gp_val_offset + 200, gp_top_offset, bgcolor = transparent_color, border_width = 0, text = get_tf_txt(), text_color = gp_color, text_size = size.small, text_valign = text.align_bottom, text_halign = text.align_left, extend = extend.right)