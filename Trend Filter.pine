// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © tamth_

//@version=6
indicator("Trend Filter", overlay=true, max_boxes_count=500, max_lines_count=500, max_labels_count=500, max_bars_back=5000)


//-----------------------------------------------------------------------------
// Constants
//-----------------------------------------------------------------------------
// Colors
color TRANSPARENT_COLOR = #ffffff00
color WHITE_COLOR       = #dee2e6
color BLACK_COLOR       = #000000
color RED_COLOR         = #F72585
color ORANGE_COLOR      = #fb5607
color YELLOW_COLOR      = #ffbe0b
color GREEN_COLOR       = #2a9d8f
color AQUA_COLOR        = #4CC9F0
color BLUE_COLOR        = #4361ee
color PURPLE_COLOR      = #3F37C9
color PINK_COLOR        = #B5179E
color LIGHT_GRAY_COLOR  = #364156
color DARK_GRAY_COLOR   = #212d40
color TEXT_COLOR        = #ced4da

//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// CTF EMAs
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
ctfEmasGrp = "EMAs"
ctfEmaLen1 = input.int(5, title = 'EMA 1', group = ctfEmasGrp)
ctfEmaLen2 = input.int(10, title = 'EMA 2', group = ctfEmasGrp)
ctfEmaLen3 = input.int(20, title = 'EMA 3', group = ctfEmasGrp)
ctfEmaLen4 = input.int(50, title = 'EMA 4', group = ctfEmasGrp)

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
plot(ta.ema(close, ctfEmaLen1), title = "EMA 1", color = AQUA_COLOR, display = display.pane)
plot(ta.ema(close, ctfEmaLen2), title = "EMA 2", color = PURPLE_COLOR, display = display.pane)
plot(ta.ema(close, ctfEmaLen3), title = "EMA 3", color = PINK_COLOR, display = display.pane)
plot(ta.ema(close, ctfEmaLen4), title = "EMA 4", color = ORANGE_COLOR, display = display.pane)

//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// HTF EMAs
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
htfEmasGrp = "HTF EMAs"
htfEmasShowed = input.bool(true, title = "Show", group = htfEmasGrp)
htfEmasTf = input.timeframe("", title = "Timeframe", group = htfEmasGrp)
htfEmaLen1 = input.int(5, title = 'EMA 1', group = htfEmasGrp)
htfEmaLen2 = input.int(10, title = 'EMA 2', group = htfEmasGrp)
htfEmaLen3 = input.int(20, title = 'EMA 3', group = htfEmasGrp)
htfEmaLen4 = input.int(50, title = 'EMA 4', group = htfEmasGrp)

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
// plot(htfEmasShowed ? request.security(syminfo.tickerid, htfEmasTf, ta.ema(close, htfEmaLen1)) : na, title = "HTF EMA 1", color = LIGHT_GRAY_COLOR, display = display.pane)
// plot(htfEmasShowed ? request.security(syminfo.tickerid, htfEmasTf, ta.ema(close, htfEmaLen2)) : na, title = "HTF EMA 2", color = LIGHT_GRAY_COLOR, display = display.pane)
plot(htfEmasShowed ? request.security(syminfo.tickerid, htfEmasTf, ta.ema(close, htfEmaLen3)) : na, title = "HTF EMA 3", color = LIGHT_GRAY_COLOR, display = display.pane)
plot(htfEmasShowed ? request.security(syminfo.tickerid, htfEmasTf, ta.ema(close, htfEmaLen4)) : na, title = "HTF EMA 4", color = LIGHT_GRAY_COLOR, display = display.pane)

//-----------------------------------------------------------------------------


//-----------------------------------------------------------------------------
// Alpha Trend
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
atGrp = "Alpha Trend"
tf = input.timeframe("", title = "Timeframe", group = atGrp)
len = input.int(14, title = 'Length', group = atGrp)
mult = input.float(1, title = 'Multiplier', step = 0.1, group = atGrp)
src = input.source(close, title = "Source", group = atGrp)

//-----------------------------------------------------------------------------
// Methods
//-----------------------------------------------------------------------------
getAlPhaTrend(upT, downT) =>
    rs = 0.0
    rs := ta.mfi(hlc3, len) >= 50 ? upT < nz(rs[1]) ? nz(rs[1]) : upT : downT > nz(rs[1]) ? nz(rs[1]) : downT
    rs

//-----------------------------------------------------------------------------
// Calculate
//-----------------------------------------------------------------------------
atr = ta.sma(ta.tr, len)
upT = low - atr * mult
downT = high + atr * mult

trend = request.security(syminfo.tickerid, tf, getAlPhaTrend(upT, downT))

buySignal = ta.crossover(trend, trend[2])
sellSignal = ta.crossunder(trend, trend[2])

fillColor = trend > trend[2] ? color.new(GREEN_COLOR, 80) : trend < trend[2] ? color.new(RED_COLOR, 80) : trend[1] > trend[3] ? color.new(GREEN_COLOR, 80) : color.new(RED_COLOR, 80)

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
k1 = plot(trend, color = AQUA_COLOR, linewidth = 1, display = display.pane)
k2 = plot(trend[2], color = PURPLE_COLOR, linewidth = 1, display = display.pane)

fill(k1, k2, color = fillColor)

K1 = ta.barssince(buySignal)
K2 = ta.barssince(sellSignal)
O1 = ta.barssince(buySignal[1])
O2 = ta.barssince(sellSignal[1])

plotshape(buySignal and O1 > K2 ? trend[2] * 0.9999 : na, title = 'Bullish', location = location.absolute, style = shape.circle, size = size.tiny, color = GREEN_COLOR)
plotshape(sellSignal and O2 > K1 ? trend[2] * 1.0001 : na, title = 'Bearish', location = location.absolute, style = shape.circle, size = size.tiny, color = RED_COLOR)

//-----------------------------------------------------------------------------