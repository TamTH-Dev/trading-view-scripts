// Â© tamth_
// @version=5
indicator("Algo", shorttitle = "Algo", overlay = true, max_bars_back = 5000, max_lines_count = 500, max_boxes_count = 500, max_labels_count = 500)


//-----------------------------------------------------------------------------*
//  Constants
//-----------------------------------------------------------------------------{
color TRANSPARENT_COLOR = color.new(#000000, 100)
color WHITE_COLOR = #EFEFEF
color RED_COLOR = #DD326B
color AQUA_COLOR = #04ADBF
color YELLOW_COLOR = #E8D81E
color PURPLE_COLOR = #764AF1
color ORANGE_COLOR = #E8AF1E
color GREEN_COLOR = #17DFAD
color LIGHT_GRAY_COLOR = #364156
color DARK_GRAY_COLOR = #212d40
color TEXT_COLOR = #CCCCCC


//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Variables
//-----------------------------------------------------------------------------{
series int barIdx = bar_index
series bool confirmed = barstate.isconfirmed

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Methods
//-----------------------------------------------------------------------------{
debug(simple string txt) =>
    // Create label on the first bar
    var label = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    // On next bars, update the label"s x and y position, and the text it displays
    label.set_xy(label, barIdx, ta.highest(10)[1])
    label.set_text(label, txt)

getPrdWidthByPerc(int prd, float perc) => (ta.highest(prd) - ta.lowest(prd)) * perc / 100

getTfTxt() =>
    string prd = timeframe.period
    string tf = na

    if str.contains(prd, "S")
        tf := str.length(prd) == 1 ? "1S" : prd
    else if str.contains(prd, "D")
        tf := str.length(prd) == 1 ? "1D" : prd
    else if str.contains(prd, "W")
        tf := str.length(prd) == 1 ? "1W" : prd
    else if str.contains(prd, "M")
        tf := str.length(prd) == 1 ? "1M" : prd
    else
        float mins = str.tonumber(prd)

        if mins >= 60
            tf := str.format("{0}H",  mins / 60)
        else
            tf := str.format("{0}M",  mins)

    tf

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// S/R
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string srGrp = "S/R"
bool srShowed = input.bool(true, title = "Show", group = srGrp)
int srPrd = input.int(284, title = "Period", group = srGrp)
color srSupportColor = input.color(color.new(LIGHT_GRAY_COLOR, 85), title = "Support Color", group = srGrp)
color srResistanceColor = input.color(color.new(LIGHT_GRAY_COLOR, 85), title = "Resistance Color", group = srGrp)
int srStrength = input.int(2, title = "Strength", minval = 1, group = srGrp)
float srZoneWidthPerc = input.float(1.5, title = "Zone Width In %", minval = 0, group = srGrp)
color srValColor = input.color(TEXT_COLOR, title = "Value Color", group = srGrp)

//-----------------------------------------------------------------------------}
// Methods
//-----------------------------------------------------------------------------{
getSrValTxt(float val) =>
    string tf = getTfTxt()
    // str.format("{0} | {1}", tf, val)
    str.format("{0}", val)

buildSrValBox(float top, float bot, float val, float padding) =>
    int txtOffset = barIdx + 28
    box.new(txtOffset, top - padding / 5, txtOffset + 150, bot + padding / 5, bgcolor = TRANSPARENT_COLOR, border_width = 0, text = getSrValTxt(val), text_color = srValColor, text_size = size.tiny, text_valign = text.align_center, text_halign = text.align_left, extend = extend.right)

//-----------------------------------------------------------------------------}
// Get Values
//-----------------------------------------------------------------------------{
int srSize = 21
int srRb = 10
float srPh = ta.pivothigh(srRb, srRb)
float srPl = ta.pivotlow(srRb, srRb)
var srLevels = array.new_float(srSize, na)
float srHighestVal = ta.highest(srPrd)
float srLowestVal = ta.lowest(srPrd)
float srChannelWidth = getPrdWidthByPerc(srPrd, 10)
float srZoneWidth = getPrdWidthByPerc(300, srZoneWidthPerc)
bool[] srAas = array.new_bool(41, true)
float srHighestPh = 0.0, srHighestPh := srHighestPh[1]
float srLowestPl = 0.0, srLowestPl := srLowestPl[1]
var srLevelsClone = array.new_float(srSize, na)
var srAreaBoxes = array.new_box(srSize, na)
var srValBoxes = array.new_box(srSize, na)

if (not na(srPh) or not na(srPl)) and confirmed and srShowed
    for i = 0 to array.size(srLevels) - 1
        array.set(srLevels, i, na)

    srHighestPh := srLowestVal
    srLowestPl := srHighestVal
    int ppCount = 0

    for i = 0 to srPrd
        if na(close[i])
            break

        if not na(srPh[i]) or not na(srPl[i])
            srHighestPh := math.max(srHighestPh, nz(srPh[i], srLowestVal), nz(srPl[i], srLowestVal))
            srLowestPl := math.min(srLowestPl, nz(srPh[i], srHighestVal), nz(srPl[i], srHighestVal))
            ppCount += 1

            if ppCount > 40
                break

            if array.get(srAas, ppCount)
                upl = (not na(srPh[i]) ? high[i + srRb] : low[i + srRb]) + srChannelWidth
                dnl = (not na(srPh[i]) ? high[i + srRb] : low[i + srRb]) - srChannelWidth
                tmp = array.new_bool(41, true)
                count = 0
                points = 0

                for j = 0 to srPrd
                    if na(close[j])
                        break

                    if not na(srPh[j]) or not na(srPl[j])
                        chg = false
                        count += 1

                        if count > 40
                            break

                        if array.get(srAas, count)
                            if not na(srPh[j])
                                if high[j + srRb] <= upl and high[j + srRb] >= dnl
                                    points += 1
                                    chg := true

                            if not na(srPl[j])
                                if low[j + srRb] <= upl and low[j + srRb] >= dnl
                                    points += 1
                                    chg := true

                        if chg and count < 41
                            array.set(tmp, count, false)

                if points >= srStrength
                    for g = 0 to 40 by 1
                        if not array.get(tmp, g)
                            array.set(srAas, g, false)

                    if not na(srPh[i]) and ppCount < srSize
                        array.set(srLevels, ppCount, high[i + srRb])

                    if not na(srPl[i]) and ppCount < srSize
                        array.set(srLevels, ppCount, low[i + srRb])

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// VWAP
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string vwapGrp = "VWAP"
bool vwapShowed = input.bool(false, title = "Show", group = vwapGrp)
string vwapAnchor = input.string("Week", title = "Anchor Period", options = ["Session", "Week", "Month", "Quarter", "Year", "Decade", "Century", "Earnings", "Dividends", "Splits"], group="VWAP Settings")
float vwapSrc = input(hlc3, title = "Source", group = vwapGrp)
bool vwapBandsShowed = input.bool(false, title = "Reversal Bands", group = vwapGrp)

//-----------------------------------------------------------------------------}
// Get Values
//-----------------------------------------------------------------------------{
series float vwapNewEarnings = request.earnings(syminfo.tickerid, earnings.actual, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol = true)
series float vwapNewDividends = request.dividends(syminfo.tickerid, dividends.gross, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol = true)
series float vwapNewSplit = request.splits(syminfo.tickerid, splits.denominator, barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol = true)
series bool vwapPrd = switch vwapAnchor
	"Earnings"  => not na(vwapNewEarnings)
	"Dividends" => not na(vwapNewDividends)
	"Splits"    => not na(vwapNewSplit)
	"Session"   => timeframe.change("D")
	"Week"      => timeframe.change("W")
	"Month"     => timeframe.change("M")
	"Quarter"   => timeframe.change("3M")
	"Year"      => timeframe.change("12M")
	"Decade"    => timeframe.change("12M") and year % 10 == 0
	"Century"   => timeframe.change("12M") and year % 100 == 0
	=> false

bool vwapIsEsdAnchor = vwapAnchor == "Earnings" or vwapAnchor == "Dividends" or vwapAnchor == "Splits"
if na(vwapSrc[1]) and not vwapIsEsdAnchor
	vwapPrd := true

[vwap, vwapStDev, _] = ta.vwap(vwapSrc, vwapPrd, 1)
series float vwapBasis = vwapStDev - vwap
float vwapUpperBand1 = vwap + vwapBasis * 1.0
float vwapLowerBand1 = vwap - vwapBasis * 1.0
float vwapUpperBand2 = vwap + vwapBasis * 2.0
float vwapLowerBand2 = vwap - vwapBasis * 2.0

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// EMAs
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string emasGrp = "EMAs"
bool emasShowed = input.bool(true, title = "Show", group = emasGrp)
bool ema1Showed = input.bool(false, title = "Show EMA 1", group = emasGrp)
int ema1Len = input.int(20, title = "EMA 1", group = emasGrp)
bool ema2Showed = input.bool(true, title = "Show EMA 2", group = emasGrp)
int ema2Len = input.int(50, title = "EMA 2", group = emasGrp)
bool ema3Showed = input.bool(false, title = "Show EMA 3", group = emasGrp)
int ema3Len = input.int(200, title = "EMA 3", group = emasGrp)

//-----------------------------------------------------------------------------}
// Get Values
//-----------------------------------------------------------------------------{
series float ema1 = ta.ema(close, ema1Len)
series float ema2 = ta.ema(close, ema2Len)
series float ema3 = ta.ema(close, ema3Len)

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Volumatic
//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string volGrp = "Volumatic"
bool volShowed = input.bool(true, title = "Showed", group = volGrp)
int volLen = input.int(10, "Volumatic Length", group = volGrp)
int volMomentum = input.int(20, "Volumatic Momentum", group = volGrp)
float volBandDistance = input.float(2, "Distance factor for upper/lower bands", step = 0.1, group = volGrp)

int volPivotLeftBars = 3
int volPivotRightBars = volPivotLeftBars

float volSrc = input.source(close, "Source", group = volGrp)
color volUpTrendColor = input(LIGHT_GRAY_COLOR, "+", group = volGrp, inline = "c")
color volDnTrendColor = input(LIGHT_GRAY_COLOR, "-", group = volGrp, inline = "c")
bool volShadow = input.bool(true, "Shadow", group = volGrp, inline = "c")

var float volVolumeVal = na
float volSmoothedVal = na
var bool volIsTrendUp = na

var float volUpTrendVolume = na
var float volDnTrendVolume = na

//-----------------------------------------------------------------------------}
// Methods
//-----------------------------------------------------------------------------{
calcVol(src, volLen, volMomentum) =>
    float momentum = ta.change(src)
    float sumPosMomentum = math.sum((momentum >= 0) ? momentum : 0.0, volMomentum)
    float sumNegMomentum = math.sum((momentum >= 0) ? 0.0 : -momentum, volMomentum)
    float absCmo = math.abs(100 * (sumPosMomentum - sumNegMomentum) / (sumPosMomentum + sumNegMomentum))
    float alpha = 2 / (volLen + 1)
    var float val = 0.0
    val := alpha * absCmo / 100 * src + (1 - alpha * absCmo / 100) * nz(val[1])
    ta.sma(val, 15)

//-----------------------------------------------------------------------------}
// Get values
//-----------------------------------------------------------------------------{
float volAtrVal = ta.atr(200)
volVal = calcVol(volSrc, volLen, volMomentum)
float volUpperBand = volVal + volAtrVal * volBandDistance
float volLowerBand = volVal - volAtrVal * volBandDistance

if ta.crossover(volSrc, volUpperBand)
    volIsTrendUp := true 
if ta.crossunder(volSrc, volLowerBand)
    volIsTrendUp := false 

if volIsTrendUp
    volSmoothedVal := volLowerBand
if not volIsTrendUp
    volSmoothedVal := volUpperBand
if ta.change(volIsTrendUp)
    volSmoothedVal := na

float volPivotHigh = ta.pivothigh(volPivotLeftBars, volPivotRightBars)
float volPivotLow = ta.pivotlow(close, volPivotLeftBars, volPivotRightBars)

if low[volPivotRightBars] > volSmoothedVal and volPivotLow 
    volVolumeVal := math.sum(volume, volPivotRightBars + volPivotLeftBars) / (volPivotRightBars + volPivotLeftBars)

if high[volPivotRightBars] < volSmoothedVal and volPivotHigh 
    volVolumeVal := math.sum(-volume, volPivotRightBars + volPivotLeftBars) / (volPivotRightBars + volPivotLeftBars)

bool volTrendCrossUp = not volIsTrendUp[1] and volIsTrendUp
bool volTrendCrossDn = not volIsTrendUp and volIsTrendUp[1]

if ta.change(volTrendCrossUp) or ta.change(volTrendCrossDn)
    volUpTrendVolume := 0
    volDnTrendVolume := 0
if not(ta.change(volTrendCrossUp) or ta.change(volTrendCrossDn))
    volUpTrendVolume += (close > open ? volume : 0)
    volDnTrendVolume += (close < open ? volume : 0)

float volAvgVolumeDelta = (volUpTrendVolume + volDnTrendVolume) / 2
color volTrendColor = volIsTrendUp ? volUpTrendColor 
                       : not volIsTrendUp ? volDnTrendColor
                       : chart.fg_color
string volDelta = 
                   str.tostring(((volUpTrendVolume - volDnTrendVolume) / volAvgVolumeDelta) * 100, format.percent) == "NaN%" 
                   ? "0%" 
                   : str.tostring(((volUpTrendVolume - volDnTrendVolume) / volAvgVolumeDelta) * 100, format.percent)

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Plots
//-----------------------------------------------------------------------------{
// S/R
if srShowed
    var box srHighestAreaBox = na, box.delete(srHighestAreaBox)
    var box srLowestAreaBox = na, box.delete(srLowestAreaBox)
    var box srHighestValBox = na, box.delete(srHighestValBox)
    var box srLowestValBox = na, box.delete(srLowestValBox)
    color srHighestColor = close >= srHighestPh ? srSupportColor : srResistanceColor
    color srLowestColor = close >= srLowestPl ? srSupportColor : srResistanceColor
    float srHighestTop = srHighestPh + srZoneWidth
    float srHighestBot = srHighestPh - srZoneWidth
    float srLowestTop = srLowestPl + srZoneWidth
    float srLowestBot = srLowestPl - srZoneWidth
    srHighestAreaBox := box.new(barIdx, srHighestTop, barIdx, srHighestBot, extend = extend.both, bgcolor = srHighestColor, border_width = 1, border_color = srHighestColor)
    srLowestAreaBox := box.new(barIdx, srLowestTop, barIdx, srLowestBot, extend = extend.both, bgcolor = srLowestColor, border_width = 1, border_color = srLowestColor)
    srHighestValBox := buildSrValBox(srHighestTop, srHighestBot, srHighestPh, srZoneWidth)
    srLowestValBox := buildSrValBox(srLowestTop, srLowestBot, srLowestPl, srZoneWidth)

    if not na(srPh) or not na(srPl)
        for i = 0 to array.size(srAreaBoxes) - 1
            array.set(srLevelsClone, i, array.get(srLevels, i))

    for i = 0 to array.size(srAreaBoxes) - 1
        box.delete(array.get(srAreaBoxes, i))
        box.delete(array.get(srValBoxes, i))

        if not na(array.get(srLevelsClone, i))
            color lineColor = close >= array.get(srLevelsClone, i) ? srSupportColor : srResistanceColor
            float level = array.get(srLevelsClone, i)
            float top = level + srZoneWidth
            float bot = level - srZoneWidth
            bool topExisted = math.abs(level - srHighestPh) < srZoneWidth
            bool botExisted = math.abs(level - srLowestPl) < srZoneWidth

            if (not topExisted and not botExisted)
                array.set(srAreaBoxes, i, box.new(barIdx, top, barIdx, bot, extend = extend.both, bgcolor = lineColor, border_width = 1, border_color = lineColor))
                array.set(srValBoxes, i, buildSrValBox(top, bot, level, srZoneWidth))

// VWAP
plot(vwapShowed ? vwap : na, title = 'VWAP', color = LIGHT_GRAY_COLOR, linewidth = 2, display = display.pane)
plot(vwapUpperBand1, title = "Upper Reversal Band #1", color = LIGHT_GRAY_COLOR, display = vwapBandsShowed ? display.pane : display.none)
plot(vwapLowerBand1, title = "Lower Reversal Band #1", color = LIGHT_GRAY_COLOR, display = vwapBandsShowed ? display.pane : display.none)
plot(vwapUpperBand2, title = "Upper Reversal Band #2", color = LIGHT_GRAY_COLOR, display = vwapBandsShowed ? display.pane : display.none)
plot(vwapLowerBand2, title = "Lower Reversal Band #2", color = LIGHT_GRAY_COLOR, display = vwapBandsShowed ? display.pane : display.none)

// EMAs
plot(emasShowed and ema1Showed ? ema1 : na, title = "EMA 1", color = LIGHT_GRAY_COLOR, display = display.pane)
plot(emasShowed and ema2Showed ? ema2 : na, title = "EMA 2", color = LIGHT_GRAY_COLOR, display = display.pane)
plot(emasShowed and ema3Showed ? ema3 : na, title = "EMA 3", color = LIGHT_GRAY_COLOR, display = display.pane)

// Volumatic
var table volTableDisplayer = table.new(position.bottom_right, 2, 3, bgcolor = DARK_GRAY_COLOR, frame_width = 1, frame_color = LIGHT_GRAY_COLOR, border_color = LIGHT_GRAY_COLOR, border_width = 1)
if barstate.islast and volShowed
    table.cell(volTableDisplayer, 0, 0, "Buy Vol", text_color = TEXT_COLOR, text_halign = text.align_left, text_size = size.small)
    table.cell(volTableDisplayer, 1, 0, str.tostring(volUpTrendVolume, format.volume), text_color = TEXT_COLOR, text_halign = text.align_left, text_size = size.small)
    table.cell(volTableDisplayer, 0, 1, "Sell Vol", text_color = TEXT_COLOR, text_halign = text.align_left, text_size = size.small)
    table.cell(volTableDisplayer, 1, 1, str.tostring(volDnTrendVolume, format.volume), text_color = TEXT_COLOR, text_halign = text.align_left, text_size = size.small)
    table.cell(volTableDisplayer, 0, 2, "Delta Vol", text_color = TEXT_COLOR, text_halign = text.align_left, text_size = size.small)
    table.cell(volTableDisplayer, 1, 2, str.tostring(volDelta[0]), text_color = TEXT_COLOR, text_halign = text.align_left, text_size = size.small)

// p1 = plot(volShowed ? volSmoothedVal : na, color = volTrendColor, linewidth = 2, style = plot.style_linebr, display = display.pane)
// p2 = plot(volShowed ? hl2 : na, display = display.none)
// fill(p1, p2, volSmoothedVal, hl2, color.new(volTrendColor, volShadow ? 80 : 100), na)

//-----------------------------------------------------------------------------}
