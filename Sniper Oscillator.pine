// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© tamth_

// @version=5
indicator("Sniper Oscillator", shorttitle = "Sniper Oscillator", overlay = false, max_bars_back = 5000, max_lines_count = 500, max_boxes_count = 500, max_labels_count = 500)


//-----------------------------------------------------------------------------*
//  Constants
//-----------------------------------------------------------------------------{
color TRANSPARENT_COLOR = #ffffff00
color WHITE_COLOR = #EFEFEF
color RED_COLOR = #E81E61
color AQUA_COLOR = #04ADBF
color PURPLE_COLOR = #764AF1
color GREEN_COLOR = #1EE8A3
color LIGHT_GRAY_COLOR = #364156
color DARK_GRAY_COLOR = #212d40

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Variables
//-----------------------------------------------------------------------------{
series int barIdx = bar_index
series bool confirmed = barstate.isconfirmed

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Common Functions
//-----------------------------------------------------------------------------{
debug(simple string txt) =>
    // Create label on the first bar
    var label = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    // On next bars, update the label"s x and y position, and the text it displays
    label.set_xy(label, barIdx, ta.highest(10)[1])
    label.set_text(label, txt)

//-----------------------------------------------------------------------------}


//-----------------------------------------------------------------------------*
// Settings
//-----------------------------------------------------------------------------{
string thresholdGrp = "Threshold"
bool thresholdShowed = input.bool(true, title = "Show", group = thresholdGrp)
int overboughtThreshold = input.int(60, title = "Overbought Threshold", group = thresholdGrp)
int oversoldThreshold = input.int(-60, title = "Oversold Threshold", group = thresholdGrp)
string wtGrp = "Waves Trend"
bool wtShowed = input.bool(true, title = "Show", group = wtGrp)
int wtChlPrd = input.int(9, title = "Channel Period", group = wtGrp)
int wtAvgPrd = input.int(12, title = "Average Period", group = wtGrp)
float wtMaSrc = input.source(hlc3, title = "MA Source", group = wtGrp)
int wtMaLen = input.int(3, title = "MA Length", group = wtGrp)
string mfoGrp = "MFO"
bool mfoShowed = input.bool(true, title = "Show", group = mfoGrp)
// bool mfoBarShowed = input.bool(true, title = "Support Bar", group = mfoGrp)
int mfoPrd = input.int(60, title = "Period", group = mfoGrp)
int mfoMult = input.int(150, title = "Area Multiplier", group = mfoGrp)
string vwapGrp = "VWAP"
bool vwapShowed = input.bool(true, title = "Show", group = vwapGrp)
string veGrp = "Volume Explosion"
int veSensitivity = input.int(180, title = "Sensitivity", group = veGrp)
int veLeadingLen = input.int(20, title = "Leading Length", group = veGrp)
int veLaggingLen = input.int(40, title = "Lagging Length", group = veGrp)
int veChannelLen = input.int(20, title = "Channel Length", group = veGrp)
float veChannelMult = input.float(2.0, title = "Channel Multiplier", group = veGrp)

//-----------------------------------------------------------------------------}
// Functions
//-----------------------------------------------------------------------------{
getTopFractal(series float src) => src[4] < src[2] and src[3] < src[2] and src[2] > src[1] and src[2] > src[0]
getBotFractal(series float src) => src[4] > src[2] and src[3] > src[2] and src[2] < src[1] and src[2] < src[0]
fractalize(series float src) =>
    series bool isBotFractal = getBotFractal(src)
    series bool isTopFractal = getTopFractal(src)
    isTopFractal ? 1 : isBotFractal ? -1 : 0

getDivPoints(series float src, int topLimit, int botLimit) =>
    series bool isTopFractal = not na(fractalize(src) > 0 and src[2] >= topLimit ? src[2] : na)
    series bool isBotFractal = not na(fractalize(src) < 0 and src[2] <= botLimit ? src[2] : na)
    float highPrev = ta.valuewhen(isTopFractal, src[2], 0)[2]
    float highPrice = ta.valuewhen(isTopFractal, high[2], 0)[2]
    float lowPrev = ta.valuewhen(isBotFractal, src[2], 0)[2]
    float lowPrice = ta.valuewhen(isBotFractal, low[2], 0)[2]
    bool isBearish = isTopFractal and high[2] > highPrice and src[2] < highPrev
    bool isBullish = isBotFractal and low[2] < lowPrice and src[2] > lowPrev
    [isTopFractal, isBotFractal, lowPrev, isBearish, isBullish]

getWtAndVwap() =>
    float src = request.security(syminfo.tickerid, timeframe.period, wtMaSrc)
    float esa = ta.ema(src, wtChlPrd)
    float d = ta.ema(math.abs(src - esa), wtChlPrd)
    float ci = (src - esa) / (0.015 * d)
    float leadingWt = ta.ema(ci, wtAvgPrd)
    float laggingWt = ta.sma(leadingWt, wtMaLen)
    bool isOversold = laggingWt <= oversoldThreshold
    bool isOverbought = laggingWt >= overboughtThreshold
    bool wtCross = ta.cross(leadingWt, laggingWt)
    bool wtCrossUp = laggingWt - leadingWt <= 0
    bool wtCrossDn = laggingWt - leadingWt >= 0
    float vwap = leadingWt - laggingWt
    [leadingWt, laggingWt, isOversold, isOverbought, wtCross, wtCrossUp, wtCrossDn, vwap]

getHaVal(series float src) => request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, src)

getMfo() =>
    series float haOpen = getHaVal(open)
    series float haClose = getHaVal(close)
    series float haHigh = getHaVal(high)
    series float haLow = getHaVal(low)
    mfo = ta.sma((haClose - haOpen) / (haHigh - haLow) * mfoMult, mfoPrd)

getMaWt(src, leadingLen, laggingLen) =>
	series float leadingMa = ta.ema(src, leadingLen)
	series float laggingMa = ta.ema(src, laggingLen)
	leadingMa - laggingMa

getChannelUpper(src, len, mult) => 
	series float basis = ta.sma(src, len)
	series float dev = mult * ta.stdev(src, len)
	basis + dev

getChannelLower(src, len, mult) => 
	series float basis = ta.sma(src, len)
	series float dev = mult * ta.stdev(src, len)
	basis - dev


//-----------------------------------------------------------------------------}
// Get values
//-----------------------------------------------------------------------------{
int WT_LONG_BEARISH_DIV_LEVEL = 45
int WT_LONG_BULLISH_DIV_LEVEL = -65
int WT_SHORT_BEARISH_DIV_LEVEL = 15
int WT_SHORT_BULLISH_DIV_LEVEL = -40
series float _close = request.security(syminfo.tickerid, timeframe.period, close)
series float _high = request.security(syminfo.tickerid, timeframe.period, high)
series float _low = request.security(syminfo.tickerid, timeframe.period, low)
float mfo = getMfo()
[leadingWt, laggingWt, isOversold, isOverbought, cross, crossUp, crossDn, vwap] = getWtAndVwap()
[wtLongTopFractal, wtLongBotFractal, wtLongLowPrev, isWtLongBearishDiv, isWtLongBullishDiv] = getDivPoints(laggingWt, WT_LONG_BEARISH_DIV_LEVEL, WT_LONG_BULLISH_DIV_LEVEL)
[wtShortTopFractal, wtShortBotFractal, wtShortLowPrev, isWtShortBearishDiv, isWtShortBullishDiv] =  getDivPoints(laggingWt, WT_SHORT_BEARISH_DIV_LEVEL, WT_SHORT_BULLISH_DIV_LEVEL)
bool isBuySignal = ta.crossover(leadingWt, laggingWt)
bool isSellSignal = ta.crossunder(leadingWt, laggingWt)
bool isDivBuySignal = isWtLongBullishDiv or isWtShortBullishDiv
bool isDivSellSignal = isWtLongBearishDiv or isWtShortBearishDiv

series float veVol = (getMaWt(close, veLeadingLen, veLaggingLen) - getMaWt(close[1], veLeadingLen, veLaggingLen)) * veSensitivity
series float veExplosionVol = getChannelUpper(close, veChannelLen, veChannelMult) - getChannelLower(close, veChannelLen, veChannelMult)
series float veIsUpTrend = veVol >= 0 ? veVol : 0
series float veIsDnTrend = veVol < 0 ? (-1 * veVol) : 0

//-----------------------------------------------------------------------------}
// Render values
//-----------------------------------------------------------------------------{
color veTopBarColor = veIsUpTrend > veExplosionVol ? (veIsUpTrend < veIsUpTrend[1] ? color.new(GREEN_COLOR, 50) : GREEN_COLOR) : color.new(LIGHT_GRAY_COLOR, 50)
color veBotBarColor = veIsDnTrend > veExplosionVol ? (veIsDnTrend < veIsDnTrend[1] ? color.new(RED_COLOR, 50) : RED_COLOR) : color.new(LIGHT_GRAY_COLOR, 50)
var veTopLineSt = plot(105, title = "Top Explosion Bar", color = TRANSPARENT_COLOR, editable = false, display = display.pane)
var veTopLineNd = plot(100, title = "Top Explosion Bar", color = TRANSPARENT_COLOR, editable = false, display = display.pane)
var veBotLineSt = plot(-100, title = "Bottom Explosion Bar", color = TRANSPARENT_COLOR, editable = false, display = display.pane)
var veBotLineNd = plot(-105, title = "Bottom Explosion Bar", color = TRANSPARENT_COLOR, editable = false, display = display.pane)
fill(veTopLineSt, veTopLineNd, title = "Top Explosion Bar Color", color = veTopBarColor)
fill(veBotLineSt, veBotLineNd, title = "Bottom Explosion Bar Color", color = veBotBarColor)

plot(thresholdShowed ? overboughtThreshold : na, title = "Overbought Threshold", color = DARK_GRAY_COLOR, display = display.pane, linewidth = 1, style = plot.style_cross)
plot(thresholdShowed ? oversoldThreshold : na, title = "Oversold Threshold", color = DARK_GRAY_COLOR, display = display.pane, linewidth = 1, style = plot.style_cross)

// var mfoBarTopLineSt = plot(mfoShowed and mfoBarShowed ? 105 : na, title = "MFO Bar", color = TRANSPARENT_COLOR, editable = false, display = display.pane)
// var mfoBarTopLineNd = plot(mfoShowed and mfoBarShowed ? 100 : na, title = "MFO Bar", color = TRANSPARENT_COLOR, editable = false, display = display.pane)
// var mfoBarBotLineSt = plot(mfoShowed and mfoBarShowed ? -100 : na, title = "MFO Bar", color = TRANSPARENT_COLOR, editable = false, display = display.pane)
// var mfoBarBotLineNd = plot(mfoShowed and mfoBarShowed ? -105 : na, title = "MFO Bar", color = TRANSPARENT_COLOR, editable = false, display = display.pane)
// fill(mfoBarTopLineSt, mfoBarTopLineNd, title = "MFO Bar", color = mfo > 0 ? color.new(GREEN_COLOR, 50) : color.new(LIGHT_GRAY_COLOR, 50))
// fill(mfoBarBotLineSt, mfoBarBotLineNd, title = "MFO Bar", color = mfo < 0 ? color.new(RED_COLOR, 50) : color.new(LIGHT_GRAY_COLOR, 50))

plot(vwapShowed ? vwap : na, title = "VWAP", color = color.new(LIGHT_GRAY_COLOR, 10), style = plot.style_area)

plot(mfoShowed ? mfo : na, title = "MFO", color = mfo > 0 ? color.new(GREEN_COLOR, 70) : color.new(RED_COLOR, 70), linewidth = 2, style = plot.style_area)

color leadingWtColor = leadingWt >= laggingWt ? color.new(AQUA_COLOR, 20) : color.new(WHITE_COLOR, 20)
var leadingWtPlot = plot(wtShowed ? leadingWt : na, title = "Leading Wave Trend", color = leadingWtColor, linewidth = 2, style = plot.style_line, display = display.pane)
var laggingWtPlot = plot(wtShowed ? laggingWt : na, title = "Lagging Wave Trend", color = TRANSPARENT_COLOR, linewidth = 1, style = plot.style_line, display = display.pane)
color wtFillColor = leadingWt >= laggingWt ? color.new(AQUA_COLOR, 75) : color.new(WHITE_COLOR, 75)
fill(leadingWtPlot, laggingWtPlot, title = 'Wave Trend', color = wtFillColor)

plot(0, title = "Zero Line", color = color.new(DARK_GRAY_COLOR, 80), display = display.pane)

plot(isBuySignal and confirmed ? laggingWt : na, title = "Buy Signal", color = color.new(AQUA_COLOR, 20), linewidth = 2, style = plot.style_circles, display = display.pane)
plot(isSellSignal and confirmed  ? laggingWt : na, title = "Sell Signal", color = color.new(WHITE_COLOR, 20), linewidth = 2, style = plot.style_circles, display = display.pane)
plot(isDivBuySignal and confirmed ? -110 : na, title = "Divergence Buy Signal", color = AQUA_COLOR, linewidth = 2, style = plot.style_circles, offset = -2, display = display.pane)
plot(isDivSellSignal and confirmed ? 110 : na , title = "Divergence Sell Signal", color = WHITE_COLOR, linewidth = 2, style = plot.style_circles, offset = -2, display = display.pane)

//-----------------------------------------------------------------------------}
// Alert Conditions
//-----------------------------------------------------------------------------{
bool hasTradeSignal = isDivBuySignal or isDivSellSignal or (isBuySignal and laggingWt <= oversoldThreshold) or (isSellSignal and laggingWt >= overboughtThreshold)
alertcondition(hasTradeSignal, 'Trade Signal', 'Take money ð°ð°ð°')
