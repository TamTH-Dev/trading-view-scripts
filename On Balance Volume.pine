// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © tamth_
 
//@version=6
indicator("On Balance Volume", "OBV", overlay = false, precision = 2, max_labels_count = 500, max_lines_count = 500, max_boxes_count = 1000, max_bars_back = 1000)

//-----------------------------------------------------------------------------
// Constants
//-----------------------------------------------------------------------------
// Colors
color TRANSPARENT_COLOR = color.new(#000000, 100)
color WHITE_COLOR      = #dee2e6
color BLACK_COLOR      = #000000
color RED_COLOR        = #F72585
color ORANGE_COLOR     = #fb5607
color YELLOW_COLOR     = #ffbe0b
color GREEN_COLOR      = #2a9d8f
color AQUA_COLOR       = #4CC9F0
color BLUE_COLOR       = #4361ee
color PURPLE_COLOR     = #3F37C9
color PINK_COLOR       = #B5179E
color LIGHT_GRAY_COLOR = #364156
color DARK_GRAY_COLOR  = #212d40
color TEXT_COLOR       = #ced4da

//-----------------------------------------------------------------------------
// Common Variables
//-----------------------------------------------------------------------------
// Bar index and input
series int barIdx = bar_index

//-----------------------------------------------------------------------------
// Common Methods
//-----------------------------------------------------------------------------
// Debug label function
debug(simple string txt) =>
    var label lbl = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    label.set_xy(lbl, barIdx, ta.highest(10)[1])
    label.set_text(lbl, txt)

//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// On Balance Volume
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
obvGrp = "On Balance Volume"
obvEma1Showed = input.bool(defval = true, title = "EMA 1", inline = "ema1", group = obvGrp)
obvEma1Len = input.int(defval = 50, title = "", minval = 1, inline = "ema1", group = obvGrp)
obvEma1Color = input.color(defval = AQUA_COLOR, title = "", inline = "ema1", group = obvGrp)
obvEma2Showed = input.bool(defval = true, title = "EMA 2", inline = "ema2", group = obvGrp)
obvEma2Len = input.int(defval = 200, title = "", minval = 1, inline = "ema2", group = obvGrp)
obvEma2Color = input.color(defval = PURPLE_COLOR, title = "", inline = "ema2", group = obvGrp)
obvBodyUpColor = input.color(defval = TRANSPARENT_COLOR, title = "Body", inline = "bcol", group = obvGrp)
obvBodyDnColor = input.color(defval = TRANSPARENT_COLOR, title = "", inline = "bcol", group = obvGrp)
obvBorderUpColor = input.color(defval = WHITE_COLOR, title = "Border", inline = "bocol", group = obvGrp)
obvBorderDnColor = input.color(defval = BLUE_COLOR, title = "", inline = "bocol", group = obvGrp)

//-----------------------------------------------------------------------------
// Methods
//-----------------------------------------------------------------------------
obvTw = high - math.max(open, close) 
obvBw = math.min(open, close) - low 
obvBody = math.abs(close - open) 

obvGetRate(cond) =>
    ret = 0.5 * (obvTw + obvBw + (cond ? 2 * obvBody : 0)) / (obvTw + obvBw + obvBody) 
    ret := nz(ret) == 0 ? 0.5 : ret
    ret
    
//-----------------------------------------------------------------------------
// Calculate
//-----------------------------------------------------------------------------
obvDeltaUp =  volume * obvGetRate(open <= close) 
obvDeltaDn = volume * obvGetRate(open > close)
obvDelta = close >= open ? obvDeltaUp : -obvDeltaDn
obvCumDelta = ta.cum(obvDelta)
float obvOpen = obvCumDelta[1]
float obvHigh = math.max(obvCumDelta, obvCumDelta[1])
float obvLow = math.min(obvCumDelta, obvCumDelta[1])
float obvClose = obvCumDelta
float obvHaClose = na
float obvHaOpen = na
float obvHaHigh = na
float obvHaLow = na
obvHaClose := (obvOpen + obvHigh + obvLow + obvClose) / 4
obvHaOpen  := na(obvHaOpen[1]) ? (obvOpen + obvClose) / 2 : (obvHaOpen[1] + obvHaClose[1]) / 2
obvHaHigh  := math.max(obvHigh, math.max(obvHaOpen, obvHaClose))
obvHaLow   := math.min(obvLow, math.min(obvHaOpen, obvHaClose))

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
plotcandle(obvHaOpen, obvHaHigh, obvHaLow, obvHaClose, title = 'OBV Candles', color = obvHaOpen <= obvHaClose ? obvBodyUpColor : obvBodyDnColor, bordercolor = obvHaOpen <= obvHaClose ? obvBorderUpColor : obvBorderDnColor, wickcolor = obvHaOpen <= obvHaClose ? obvBorderUpColor : obvBorderDnColor, display = display.pane)
plot(obvEma1Showed ? ta.ema(obvHaClose, obvEma1Len) : na, title = "EMA 1", color = obvEma1Color, display = display.pane)
plot(obvEma2Showed ? ta.ema(obvHaClose, obvEma2Len) : na, title = "EMA 2", color = obvEma2Color, display = display.pane)

//-----------------------------------------------------------------------------