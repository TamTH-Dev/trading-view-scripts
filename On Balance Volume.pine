// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © tamth_
 
//@version=6
indicator("On Balance Volume", "OBV", overlay = false, precision = 2, max_labels_count = 500, max_lines_count = 500, max_boxes_count = 1000, max_bars_back = 1000)

//-----------------------------------------------------------------------------
// Constants
//-----------------------------------------------------------------------------
// Colors
color TRANSPARENT_COLOR = color.new(#000000, 100)
color WHITE_COLOR      = #dee2e6
color BLACK_COLOR      = #000000
color RED_COLOR        = #F72585
color ORANGE_COLOR     = #fb5607
color YELLOW_COLOR     = #ffbe0b
color GREEN_COLOR      = #2a9d8f
color AQUA_COLOR       = #4CC9F0
color BLUE_COLOR       = #4361ee
color PURPLE_COLOR     = #3F37C9
color PINK_COLOR       = #B5179E
color LIGHT_GRAY_COLOR = #364156
color DARK_GRAY_COLOR  = #212d40
color TEXT_COLOR       = #ced4da

//-----------------------------------------------------------------------------
// Common Variables
//-----------------------------------------------------------------------------
// Bar index and input
series int barIdx = bar_index

//-----------------------------------------------------------------------------
// Common Methods
//-----------------------------------------------------------------------------
// Debug label function
debug(simple string txt) =>
    var label lbl = label.new(barIdx, na, txt, xloc.bar_index, yloc.price, color(na), label.style_none, WHITE_COLOR, size.large, text.align_left)
    label.set_xy(lbl, barIdx, ta.highest(10)[1])
    label.set_text(lbl, txt)

//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// On Balance Volume
//-----------------------------------------------------------------------------
// Settings
//-----------------------------------------------------------------------------
hacandle = input.bool(true, title = "Heikin Ashi Candles?")
showema1 = input.bool(defval = true, title = "EMA 1", inline = "ema1")
ema1len = input.int(defval = 50, title = "", minval = 1, inline = "ema1")
ema1col = input.color(defval = AQUA_COLOR, title = "", inline = "ema1")
showema2 = input.bool(defval = true, title = "EMA 2", inline = "ema2")
ema2len = input.int(defval = 200, title = "", minval = 1, inline = "ema2")
ema2col = input.color(defval = PURPLE_COLOR, title = "", inline = "ema2")
colorup = input.color(defval = WHITE_COLOR, title = "Body", inline = "bcol")
colordown = input.color(defval = BLUE_COLOR, title = "", inline = "bcol")
bcolup = input.color(defval = WHITE_COLOR, title = "Border", inline = "bocol")
bcoldown = input.color(defval = BLUE_COLOR, title = "", inline = "bocol")

//-----------------------------------------------------------------------------
// Methods
//-----------------------------------------------------------------------------
tw = high - math.max(open, close) 
bw = math.min(open, close) - low 
body = math.abs(close - open) 

getRate(cond) =>
    ret = 0.5 * (tw + bw + (cond ? 2 * body : 0)) / (tw + bw + body) 
    ret := nz(ret) == 0 ? 0.5 : ret
    ret
    
//-----------------------------------------------------------------------------
// Calculate
//-----------------------------------------------------------------------------
deltaup =  volume * getRate(open <= close) 
deltadown = volume * getRate(open > close)
delta = close >= open ? deltaup : -deltadown
cumdelta = ta.cum(delta)
float o = na
float h = na
float l = na
float c = na
o := cumdelta[1]
h := math.max(cumdelta, cumdelta[1])
l := math.min(cumdelta, cumdelta[1])
c := cumdelta

float haclose = na
float haopen = na
float hahigh = na
float halow = na
haclose := (o + h + l + c) / 4
haopen  := na(haopen[1]) ? (o + c) / 2 : (haopen[1] + haclose[1]) / 2
hahigh  := math.max(h, math.max(haopen, haclose))
halow   := math.min(l, math.min(haopen, haclose))
 
c_ = hacandle ? haclose : c
o_ = hacandle ? haopen : o
h_ = hacandle ? hahigh : h
l_ = hacandle ? halow : l

//-----------------------------------------------------------------------------
// Render
//-----------------------------------------------------------------------------
plotcandle(o_, h_, l_, c_, title='CDV Candles', color = o_ <= c_ ? colorup : colordown, bordercolor = o_ <= c_ ? bcolup : bcoldown, wickcolor = o_ <= c_ ? bcolup : bcoldown)
plot(showema1 ? ta.ema(c_, ema1len) : na, title = "EMA 1", color = ema1col)
plot(showema2 ? ta.ema(c_, ema2len) : na, title = "EMA 2", color = ema2col)

//-----------------------------------------------------------------------------